Attribute VB_Name = "basKsCommon"
'*************************************************************************
'
'プロジェクト名：契約管理システム・基礎数値修正
'
'オブジェクト名：basKsCommon
'
'機能概要　：チェック機能
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Private Const MODULE_NAME As String = "basKsCommon"

'*************************************************************************
'関数名　　：行削除
'
'引　　数　：ARG1   I   iKind     long    対象(1:組入資産情報、2:基礎数値情報)
'　　　　　：ARG2   I   iDelRow   long    対象行番号
'
'戻り値　　：Long       エラー番号
'
'機能説明　：指定された行を削除する
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Function fncKsCmnDeleteRow(iKind As Long, iDelRow As Long) As Long
On Error GoTo ErrorHandler

    fncKsCmnDeleteRow = 0

    With ActiveSheet
        If .Cells(iDelRow, COLN_DATA_FLAG) = "" Then
            MsgBox "消す行がない！！", vbExclamation
            Exit Function
        End If

        If iKind = 1 Then
            fncCmnDelOptionButton RNG_LINKCELL
        ElseIf iKind = 2 Then
            Call fncCmnDelCheckBox
        End If

        .Rows(iDelRow & ":" & iDelRow).Select
        Application.CutCopyMode = False
        Selection.Delete Shift:=xlUp

        .Cells(iDelRow, COLN_DATA_TOP).Select
    End With

    Exit Function

ErrorHandler:
    MsgBox Err.Description
    fncKsCmnDeleteRow = Err.Number

End Function

'*************************************************************************
'関数名　　：明細行位置取得
'
'引　　数　：ARG1   I   iKind     long    対象(1:組入資産情報、2:基礎数値情報)
'
'戻り値　　：明細行の開始行番号
'
'機能説明　：明細行の開始行番号を返す
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Function fncKsCmnSearchDataTopRow(iKind As Long) As Long
    Dim lngKindCnt  As Long
    Dim lngCnt      As Long

On Error GoTo ErrorHandler

    fncKsCmnSearchDataTopRow = 0
    
    lngCnt = HEADER_BOTTOM_ROW
    With ActiveSheet
        Do While (1)
            If iKind = 1 And .Cells(lngCnt, COLN_DATA_TOP) = "対象" Then
                fncKsCmnSearchDataTopRow = lngCnt + 2
                Exit Function
            ElseIf iKind = 2 And .Cells(lngCnt, COLN_DATA_TOP) = "修正額 採用" Then
                fncKsCmnSearchDataTopRow = lngCnt + 1
                Exit Function
            End If
            lngCnt = lngCnt + 1
            If lngCnt = 65536 Then Exit Function
        Loop
    End With
    
    Exit Function

ErrorHandler:
    MsgBox Err.Description
'    fncKsCmnSearchDataTopRow = Err.Number

End Function


'*************************************************************************
'関数名　　：指定情報削除
'
'引　　数　：ARG1   I   iKind     long    対象(1:組入資産情報、2:基礎数値情報)
'
'戻り値　　：Long       エラー番号
'
'機能説明　：指定された削除対象の行を全て削除する
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Function fncKsCmnRowDelete(iKind As Long) As Long
    Dim lngCnt As Long

On Error GoTo ErrorHandler

    fncKsCmnRowDelete = 0
    
    Select Case iKind
        Case 1:     '組入資産情報
                lngCnt = fncKsCmnSearchDataTopRow(1)
    
        Case 2:     '基礎数値情報
                lngCnt = fncKsCmnSearchDataTopRow(2)
    End Select
        
    With ActiveSheet
       
        Do While (.Cells(lngCnt, COLN_DATA_FLAG) <> vbNullString)
            fncKsCmnDeleteRow iKind, lngCnt
        Loop
    End With
    
    Exit Function

ErrorHandler:
    MsgBox Err.Description
    fncKsCmnRowDelete = Err.Number

End Function

'*************************************************************************
'関数名　　：新規行追加
'
'引　　数　：ARG1   I   iKind       long    対象(1:組入資産情報、2:基礎数値情報)
'　　　　　：ARG2   I   iInsRow     long    追加先シートの行番号
'　　　　　：ARG3   I   iSrcRow     long    コピー元シートの行番号
'
'戻り値　　：Long       エラー番号
'
'機能説明　：追加先シートの指定行番号に新規行を追加(コピー)する。
'           追加する行はコピー元シートの指定行番号より取得する。
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Function fncKsCmnInsRow(iKind As Long, iInsRow As Long, iSrcRow As Long) As Long
    
On Error GoTo ErrorHandler

    fncKsCmnInsRow = 0
    
    Sheets(SHEET_TEMP).Rows(iSrcRow & ":" & iSrcRow).Copy
    Sheets(SHEET_MAIN).Select
    Rows(iInsRow & ":" & iInsRow).Select
    Selection.Insert Shift:=xlDown
    Application.CutCopyMode = False

    With ActiveSheet
        If iKind = 1 Then
            fncCmnSetOptionButton _
                Replace(.Cells(iInsRow, COLN_DATA_TOP).Address, "$", vbNullString), _
                RNG_LINKCELL
        ElseIf iKind = 2 Then
            fncCmnSetCheckBox Replace(.Cells(iInsRow, COLN_DATA_TOP).Address, "$", vbNullString), RNG_CHK_FLG_LINKCELL & iInsRow
        End If
        .Cells(iInsRow, 5).Select
    End With
    
    Exit Function

ErrorHandler:
    MsgBox Err.Description
    fncKsCmnInsRow = Err.Number
    
End Function

'*************************************************************************
'関数名　　：新規行追加(メイン処理)
'
'引　　数　：ARG1   I   iKind       long    対象(1:組入資産情報、2:基礎数値情報)
'　　　　　：ARG2   I   RowCnt      long    追加行数
'
'戻り値　　：Long       エラー番号
'
'機能説明　：追加対象の新規行を指定された行数追加する。
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Function fncKsCmnAddNrow(iKind As Long, RowCnt As Long) As Long
    
On Error GoTo ErrorHandler
    Dim lngCnt As Long
    Dim lngRow As Long

    fncKsCmnAddNrow = 0
    lngRow = fncKsCmnSearchDataTopRow(iKind)
    For lngCnt = 1 To RowCnt
        fncKsCmnInsRow iKind, lngRow, IIf(iKind = 1, 2, 5)
        lngRow = lngRow + 1
    Next
    Exit Function

ErrorHandler:
    MsgBox Err.Description
    fncKsCmnAddNrow = Err.Number
    
End Function


'*************************************************************************
'関数名　　：メイン画面の初期化
'
'引　　数　：ARG1   I   iKind   long    0:全項目クリア
'　　　　　　                           1:組入資産情報クリア
'　　　　　　                           2:基礎数値情報クリア
'戻り値　　：Long       エラー番号
'
'機能説明　：入力フィールドの初期化
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Function fncKsCmnClearField(iKind As Long) As Long
    
On Error GoTo ErrorHandler

    fncKsCmnClearField = 0
    
    If iKind = 0 Then
        '全項目クリア
        With Sheets(SHEET_MAIN)
            .Range(RNG_KOUZA_NO).Value = vbNullString  '口座番号
            .Range(RNG_KOUZA_NM).Value = vbNullString  '口座名
            .Range(RNG_KIJYUNBI).Value = vbNullString  '基準日
        End With
        '検索ボタンを押せるようにする
        Sheets(SHEET_MAIN).cmdSearch.Enabled = True
    End If
    
    If iKind = 0 Or iKind = 1 Then
        '全項目クリア or 組入資産情報クリア
        fncKsCmnRowDelete 1
        '表示ボタンを押せなくする
        Sheets(SHEET_MAIN).cmdDisp.Enabled = False
    End If
    
    If iKind = 0 Or iKind = 2 Then
        '全項目クリア or 基礎数値情報クリア
        fncKsCmnRowDelete 2
        '更新ボタンを押せなくする
        Sheets(SHEET_MAIN).cmdUpdate.Enabled = False
    End If
    
    Exit Function

ErrorHandler:
    MsgBox Err.Description
    fncKsCmnClearField = Err.Number
    
End Function


'*************************************************************************
'関数名　　：トランザクション開始
'
'引　　数　：
'
'機能説明　：トランザクションを開始する。
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Public Sub fncKsCmnBeginTrans()
On Error GoTo 0 'ErrHandler
    
    mainmenu.cnAdo.BeginTrans
    
    Exit Sub
ErrHandler:
Dim lng As Long
    lng = Err.Number
    Call subErrProcess(MODULE_NAME, "", Err.Number, Err.Description)
    On Error GoTo 0
    Err.Raise lng
End Sub

'*************************************************************************
'関数名　　：トランザクションコミット
'
'引　　数　：
'
'機能説明　：トランザクションをコミットする。
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Public Sub fncKsCmnCommitTrans()
On Error GoTo 0 'ErrHandler
    
    mainmenu.cnAdo.CommitTrans
    
    Exit Sub
ErrHandler:
Dim lng As Long
    lng = Err.Number
    Call subErrProcess(MODULE_NAME, "", Err.Number, Err.Description)
    On Error GoTo 0
    Err.Raise lng
End Sub

'*************************************************************************
'関数名　　：トランザクションロールバック
'
'引　　数　：
'
'機能説明　：トランザクションをロールバックする。
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Public Sub fncKsCmnRollbackTrans()
On Error GoTo 0 'ErrHandler
    
    mainmenu.cnAdo.RollbackTrans
    
    Exit Sub
ErrHandler:
Dim lng As Long
    lng = Err.Number
    Call subErrProcess(MODULE_NAME, "", Err.Number, Err.Description)
    On Error GoTo 0
    Err.Raise lng
End Sub


'*************************************************************************
'関数名　　：
'
'引　　数　：
'           lngProcess     I         処理フラグ 0=抽出処理 1=追加処理 2=更新処理 3=削除処理
'           strSql         I         SQL文
'           vntRs()        O         取得したデータ(２次元)
'           lngCols        O         列数
'           lngRows        O         行数
'           strErrCode     I/O       エラーコード(入力時は、除外するエラーコードが入ってくる。)
'戻り値　　：Boolean
'
'機能説明　：引数で取得したSQL文を実行し、結果を返す。
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Public Function fncKsCmnDoExequteSql( _
                             lngProcess As Long, _
                             strSql As String, _
                             vntRs() As Variant, _
                             lngCols As Long, _
                             lngRows As Long, _
                             Optional strErrCode As String = "") As Boolean

'関数説明
' 1.SQL文の実行処理を行う。
' 2.処理フラグが、0の場合、抽出したデータ件数をlngRows引数に返す。
' 3.処理フラグが、0の場合、抽出したデータをstrSql引数に返す。
' 4.処理フラグが、1,2,3の場合、更新したデータ件数をlngRows引数に返す。
' 5.処理フラグが、1,2,3の場合、strSqlに""を返す。
' 6.処理が成功した場合はTrueを返し、終了する。
' 7.エラーが発生した場合はFalseを返し、終了する。


'On Error GoTo ErrSection

    Dim blnRet As Boolean

    fncKsCmnDoExequteSql = gclsdb.DoExequteSql(lngProcess, strSql, vntRs, lngCols, lngRows, strErrCode)


Exit Function

'*******************************************************
'* エラーセクション                                　  *
'*******************************************************
ErrSection:

End Function


'*************************************************************************
'関数名　　：DBシステム日付取得
'
'引　　数　：ARG1   O   DbSysdate   String (YYYYMMDD)
'
'戻り値　　：エラー番号
'
'機能説明　：DBのシステム日付(SYSDATE)を取得する
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Function fncGetDbSysdate(DbSysdate As String) As Long

    Const PROCEDURE_NAME As String = "fncGetDbSysdate"
    
    Dim strDay As String

On Error GoTo ErrHandler
    
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
    
    '共通関数よりDBシステム日付取得
    gfunc_GetSvDateTime DbSysdate, strDay
    
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    
    Exit Function
ErrHandler:
    fncGetDbSysdate = Err.Number
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Function


'*************************************************************************
'関数名　　：組入資産情報取得
'
'引　　数　：ARG1   I   Kouza_no    Strinng 口座番号("0000000")
'　　　　　：ARG2   I   Kijyunbi    Strinng 基準日("YYYYMMDD")
'　　　　　：ARG5   O   vntRec      Variant データ配列
'
'戻り値　　：エラー番号
'
'機能説明　：組入資産情報を取得する
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Function fncKumiireRead( _
            Kouza_no As String, _
            Kijyunbi As String, _
            vntRec() As Variant, _
            lngRow As Long) As Long

    Const PROCEDURE_NAME As String = "fncKumiireRead"

    On Error GoTo ErrHandler
    
    Dim strRet      As String
    Dim strKouza_no As String
    Dim strSql      As String
    Dim lngCol      As Long
    Dim strErrCd    As String
    Dim blnRet      As Boolean
    
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
    
    fncKumiireRead = 0
    
    strSql = ""
    strSql = strSql & " SELECT DISTINCT"
    strSql = strSql & "      SHISAN_BUNRUI_NM,"
    strSql = strSql & "      SHISAN_CODE,"
    strSql = strSql & "      SHISAN_NM,"
    strSql = strSql & "      SHISAN_BUNRUI_CODE,"
    strSql = strSql & "      SEIKYU_KIKAN_FROM,"
    strSql = strSql & "      SEIKYU_KIKAN_TO,"
    strSql = strSql & "      RATE_TEKIYOH_KIKAN_FROM,"
    strSql = strSql & "      RATE_TEKIYOH_KIKAN_TO,"
    strSql = strSql & "      KISO_SUCHI_KEISAN_HOHHOH,"
    strSql = strSql & "      KISO_SUCHI_KEISAN_HOHHOH_NM,"
    strSql = strSql & "      PX_SHINTAKU_KBN,"
    strSql = strSql & "      PX_SHINTAKU_KBN_NM,"
    strSql = strSql & "      KEISAN_HOHHOH"
    strSql = strSql & "  FROM ("
    strSql = strSql & " "
    strSql = strSql & "      SELECT"
    strSql = strSql & "          KCV1.VALUE_NAME                        SHISAN_BUNRUI_NM,"
    strSql = strSql & " "
    strSql = strSql & "          CASE"
    strSql = strSql & "              WHEN KRTK.KEISAN_HOHHOH = '2' THEN "   'N6
    strSql = strSql & "                 '00000'"
    strSql = strSql & "              WHEN KRTK.KEISAN_HOHHOH = '4' THEN "   'N11
    strSql = strSql & "                 '00000'"
'=== 2007/10/26 Added By T.Ichikawa PH3.5対応 Start
    strSql = strSql & "              WHEN KRTK.KEISAN_HOHHOH = '5' THEN "   'N12
    strSql = strSql & "                 '00000'"
'=== 2007/10/26 Added By T.Ichikawa PH3.5対応 End
    strSql = strSql & "          Else"
    strSql = strSql & "                 KKS.SHISAN_BUNRUI || KKS.SHISAN_CODE"
    strSql = strSql & "          END                                    SHISAN_CODE,"
    strSql = strSql & " "
    strSql = strSql & "          CASE"
    strSql = strSql & "              WHEN KRTK.KEISAN_HOHHOH = '2' THEN  "  'N6
    strSql = strSql & "                 '運用資産全体(N6)'"
    strSql = strSql & "              WHEN KRTK.KEISAN_HOHHOH = '4' THEN "   'N11
    strSql = strSql & "                 '運用資産全体(N11)'"
'=== 2007/10/26 Added By T.Ichikawa PH3.5対応 Start
    strSql = strSql & "              WHEN KRTK.KEISAN_HOHHOH = '5' THEN "   'N12
    strSql = strSql & "                 '運用資産全体(N12)'"
'=== 2007/10/26 Added By T.Ichikawa PH3.5対応 End
    strSql = strSql & "          Else"
    strSql = strSql & "                 KS.SHISAN_NAME"
    strSql = strSql & "          END                                    SHISAN_NM,"
    strSql = strSql & " "
    strSql = strSql & "          KKS.SHISAN_BUNRUI                      SHISAN_BUNRUI_CODE,"
    strSql = strSql & "          KSK.SEIKYU_KIKAN_FROM                  SEIKYU_KIKAN_FROM,"
    strSql = strSql & "          KSK.SEIKYU_KIKAN_TO                    SEIKYU_KIKAN_TO,"
    strSql = strSql & "          KRTK.RATE_TEKIYOH_KIKAN_FROM           RATE_TEKIYOH_KIKAN_FROM,"
    strSql = strSql & "          KRTK.RATE_TEKIYOH_KIKAN_TO             RATE_TEKIYOH_KIKAN_TO,"
    strSql = strSql & "          KRTK.KISO_SUCHI_KEISAN_HOHHOH          KISO_SUCHI_KEISAN_HOHHOH,"
    strSql = strSql & "          KCV2.VALUE_NAME                        KISO_SUCHI_KEISAN_HOHHOH_NM,"
    strSql = strSql & "          KRTK.PX_SHINTAKU_KBN                   PX_SHINTAKU_KBN,"
    strSql = strSql & "          KCV3.VALUE_NAME PX_SHINTAKU_KBN_NM,"
    strSql = strSql & "          KRTK.KEISAN_HOHHOH                     KEISAN_HOHHOH"
    strSql = strSql & "      FROM"
    strSql = strSql & "          KYK_SEIKYU_KIKAN KSK, "            '請求期間
    strSql = strSql & "          KYK_KUMIIRE_SHISAN KKS, "          '組入資産
    strSql = strSql & "          KYK_SHISAN KS, "                   '資産
    strSql = strSql & "          KYK_RATE_TEKIYOH_KIKAN KRTK, "     '料率適用期間
    strSql = strSql & "          KYK_CODE_VALUE KCV1, "             'コード値(資産分類名)
    strSql = strSql & "          KYK_CODE_VALUE KCV2, "             'コード値(基礎数値計算方法名)
    strSql = strSql & "          KYK_CODE_VALUE KCV3 "              'コード値(基礎数値種類名)
    strSql = strSql & "      WHERE"
    strSql = strSql & "          KSK.Kohza_no = KKS.Kohza_no"
    strSql = strSql & "      AND KSK.SEIKYU_KIKAN_ID     = KKS.SEIKYU_KIKAN_ID"
    strSql = strSql & "      AND KSK.SAKUJO_FLG          = '0'"
    strSql = strSql & "      AND KKS.SAKUJO_FLG          = '0'"
    strSql = strSql & "      AND KSK.KOHZA_NO            = '" & Format(Kouza_no, "0000000") & "'"
    strSql = strSql & "      AND KSK.SEIKYU_KIKAN_FROM   <= " & Kijyunbi
    strSql = strSql & "      AND KSK.SEIKYU_KIKAN_TO     >= " & Kijyunbi
    strSql = strSql & "      AND KKS.SHISAN_BUNRUI       = KS.SHISAN_BUNRUI(+)"
    strSql = strSql & "      AND KKS.SHISAN_CODE         = KS.SHISAN_CODE(+)"
    strSql = strSql & "      AND KKS.KOHZA_NO            = KRTK.KOHZA_NO(+)"
    strSql = strSql & "      AND KKS.SEIKYU_KIKAN_ID     = KRTK.SEIKYU_KIKAN_ID(+)"
    strSql = strSql & "      AND KKS.SHISAN_BUNRUI       = KRTK.SHISAN_BUNRUI(+)"
    strSql = strSql & "      AND KKS.SHISAN_CODE         = KRTK.SHISAN_CODE(+)"
    strSql = strSql & "      AND KS.SAKUJO_FLG        (+)= '0'"
    strSql = strSql & "      AND KRTK.SAKUJO_FLG      (+)= '0'"
    strSql = strSql & "          AND KRTK.SHISAN_BUNRUI      =  KCV1.CODE_VALUE(+)"
    strSql = strSql & "          AND KCV1.CODE_NO     (+)= '1'      "   '資産分類名
    strSql = strSql & "      AND KCV1.SAKUJO_FLG      (+)= '0'"
    strSql = strSql & "          AND KRTK.KISO_SUCHI_KEISAN_HOHHOH =  KCV2.CODE_VALUE(+)"
    strSql = strSql & "          AND KCV2.CODE_NO     (+)= '2'      "   '基礎数値計算方法名
    strSql = strSql & "      AND KCV2.SAKUJO_FLG      (+)= '0'"
    strSql = strSql & "          AND NVL(KRTK.PX_SHINTAKU_KBN,'3')    =  KCV3.CODE_VALUE(+)"
    strSql = strSql & "          AND KCV3.CODE_NO     (+)= '6'      "   '基礎数値種類名
    strSql = strSql & "      AND KCV3.SAKUJO_FLG      (+)= '0'"
    strSql = strSql & " )"
    strSql = strSql & " "
    strSql = strSql & " Order BY"
    strSql = strSql & "      SHISAN_BUNRUI_CODE,"
    strSql = strSql & "      RATE_TEKIYOH_KIKAN_FROM,"
    strSql = strSql & "      SHISAN_CODE"
    strSql = strSql & " "
    strSql = strSql & " "
    
    blnRet = fncKsCmnDoExequteSql(mainmenu.gcSELECT, strSql, vntRec, lngCol, lngRow, strErrCd)
    If blnRet = False Then
        fncKumiireRead = strErrCd
        Exit Function
    End If
    
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    
    Exit Function
ErrHandler:
    fncKumiireRead = Err.Number
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Function


'*************************************************************************
'関数名　　：メッセージ表示
'
'引　　数　：ARG1   I   strMsgKbn   String  メッセージ区分(1:情報,2:質問,3:警告,4:エラー)
'　　　　　：ARG2   I   lngMsgId    long    メッセージＩＤ
'　　　　　：ARG3   I   strAddText  String  追加テキスト(項目名)
'　　　　　：ARG4   I   strAddText2 String  追加テキスト
'　　　　　：ARG5   I   blnPopUp    boolean メッセージボックス出力フラグ(デフォルト：True(表示))
'
'戻り値　　：エラー番号
'
'機能説明　：メッセージを出力する
'
'更新履歴　：2007/03/19 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Function fncKsCmnMessageDisp( _
              ByVal strMsgKbn As String _
            , ByVal lngMsgId As Long _
            , ByVal strAddText As String _
            , Optional ByVal strAddText2 As String _
            , Optional ByVal blnPopUp As Boolean = True) As String

    '共通関数をCALL
    fncKsCmnMessageDisp = gfunc_ErrorMsg( _
                            strMsgKbn, _
                            lngMsgId, _
                            strAddText, _
                            strAddText2, _
                            blnPopUp)


End Function


'*************************************************************************
'関数名　　：テスト用基礎数値情報取得
'
'引　　数　：ARG1   I   Kouza_no    Strinng 口座番号("0000000")
'　　　　　：ARG2   I   Kijyunbi    Strinng 基準日("YYYYMMDD")
'　　　　　：ARG5   O   vntRec      Variant データ配列
'
'戻り値　　：エラー番号
'
'機能説明　：基礎数値情報を取得する
'
'更新履歴　：2007/03/28 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Public Function fncTestRead( _
            Kouza_no As String, _
            Shisan_code As String, _
            Kijyunbi As String, _
            vntRec() As Variant, _
            lngRow As Long) As Long

    Const PROCEDURE_NAME As String = "fncTestRead"

    On Error GoTo ErrHandler
    
    Dim strRet      As String
    Dim strKouza_no As String
    Dim strSql      As String
    Dim lngCol      As Long
    Dim strErrCd    As String
    Dim blnRet      As Boolean
    
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
    
    fncTestRead = 0
    
    strSql = ""
    strSql = strSql & "SELECT" & vbCrLf
    strSql = strSql & "    SHUUSEIGAKU_SAIYOU_FLG," & vbCrLf
    strSql = strSql & "    KIJUN_YMD," & vbCrLf
    strSql = strSql & "    PX_SHINTAKU_KBN," & vbCrLf
    strSql = strSql & "    KISO_SUCHI_MOD" & vbCrLf
    strSql = strSql & "FROM" & vbCrLf
    strSql = strSql & "    KYK_SHISAN_JIKA" & vbCrLf
    strSql = strSql & "WHERE" & vbCrLf
    strSql = strSql & "    KOHZA_NO = '" & Kouza_no & "'" & vbCrLf
    
    'N11の場合は資産コードを参照しない
    If Shisan_code <> "" Then
        strSql = strSql & "AND SHISAN_CODE = '" & Shisan_code & "'" & vbCrLf
    End If
    
    strSql = strSql & "AND KIJUN_YMD = '" & Kijyunbi & "'" & vbCrLf
    strSql = strSql & "ORDER BY" & vbCrLf
    strSql = strSql & "    SHISAN_BUNRUI," & vbCrLf
    strSql = strSql & "    SHISAN_CODE," & vbCrLf
    strSql = strSql & "    KIJUN_YMD," & vbCrLf
    strSql = strSql & "    PX_SHINTAKU_KBN" & vbCrLf
    
    blnRet = fncKsCmnDoExequteSql(mainmenu.gcSELECT, strSql, vntRec, lngCol, lngRow, strErrCd)
    If blnRet = False Then
        fncTestRead = strErrCd
        Exit Function
    End If
    
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    
    Exit Function
ErrHandler:
    fncTestRead = Err.Number
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Function


