VERSION 5.00
Begin {C62A69F0-16DC-11CE-9E98-00AA00574A4F} frmProcess 
   Caption         =   "請求書作成指示"
   ClientHeight    =   1980
   ClientLeft      =   45
   ClientTop       =   330
   ClientWidth     =   4710
   OleObjectBlob   =   "frmProcess.frx":0000
   StartUpPosition =   1  'オーナー フォームの中央
End
Attribute VB_Name = "frmProcess"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit
'*************************************************************************
'
'プロジェクト名：外部委託ライセンスフィー算出システム・計算確認書作成指示
'
'オブジェクト名：frmProcess
'
'機能概要　：進捗画面と帳票作成のメイン
'
'更新履歴　：2008/06/30 SRA 東       新規作成
'
'*************************************************************************

Const MODULE_NAME As String = "frmProcess"

Dim mblnFlag            As Boolean      '実行中フラグ

'*************************************************************************
'関数名　　：フォームアクティブ・イベントプロシージャ
'
'引　　数　：
'
'戻り値　　：
'
'機能説明　：進捗画面のフォームアクティブ処理
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'更新履歴　：2008/08/04 SRA Y.Azuma    変更   連結障害対応(No.17)
'
'*************************************************************************
Private Sub UserForm_Activate()

On Error GoTo ErrHandler
    
    Const PROCEDURE_NAME    As String = "UserForm_Activate"

    Dim lngLoopCnt      As Long                 '取込～印刷までの処理カウンタ
    Dim lngLoopEnd      As Long                 '取込～印刷までの処理ステップ数
    Dim blnRet          As Boolean              'CALL関数復帰値
    Dim GI_STRCT()      As typGI_SHIHARAI_STRCT '外部委託先構造体
    Dim lngGIstrct_Cnt  As Long                 '外部委託先構造体のカウンター
    Dim lngLtrStrct_Cnt As Long                 '外部委託レター構造体カウンター
    
    Dim blnKeisan       As Boolean          '(mainシート項目)計算
    Dim blnPrint        As Boolean          '(mainシート項目)印刷
    Dim strGi_No        As String           '(mainシート項目)外部委託先番号
    Dim strKikan        As String           '(mainシート項目)送付日
    Dim strOutputDir    As String           '(mainシート項目)保存フォルダ
    Dim strFileName     As String           '出力ファイル名
    Dim strOutFileName  As String           '帳票出力ファイル名
    Dim strNamInfo()    As String           'NAM情報格納配列
    Dim strDate         As String           'システム日付
    Dim strTime         As String           'システム時間
    Dim strKbnKj        As String           '計算区分漢字
    Dim strCalcTime     As String
    Dim lngErrorCnt     As Long             'エラーカウンタ
    Dim lngRecCnt       As Long             '<----------- Modify azuma 2008/08/05 連結障害対応(No.17)
        
'Dim dblS    As Double   'for debug
'Dim dblE    As Double   'for debug
    
    
    If mblnFlag = False Then
    
        'フォームアクティブ毎に実行されないためのフラグ
        mblnFlag = True
        
        Me.MousePointer = fmMousePointerHourGlass
        
        '初期化
        Erase strNamInfo
        
        strCalcTime = ""
        
        lngErrorCnt = 0
'*******************************************************
'* 関数開始　                                        　*
'*******************************************************
        
'dblS = Timer 'for debug
        '***************************
        '①**** 画面の項目を取得 ****
        '***************************
        Call sub_GetMainItem(blnKeisan _
                           , blnPrint _
                           , strGi_No _
                           , strKikan _
                           , strOutputDir)
        
        If blnPrint Then
            lngLoopEnd = 3
        Else
            lngLoopEnd = 2
        End If
        
        Call subBeginProcess("", vbCrLf & _
        "↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓計算確認書作成　開始↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓")

        Call subBeginProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME & "," & _
                                          blnKeisan & "," & _
                                          blnPrint & "," & _
                                          strGi_No & "," & _
                                          strKikan)

'------------<Modify Start azuma 2008/08/05 > 連結障害対応(No.17)-----------------------
        '入金済みのチェック
        If blnKeisan Then
            blnRet = func_GetShiharaiKanriStatus(strKikan, lngRecCnt)
            
            If blnRet = False Then
            'ステータス取得処理失敗
                Call gfunc_ErrorMsg(4, 20180, "", "(func_GetShiharaiKanriStatus)")
                GoTo NormalError
            Else
                If lngRecCnt = 0 Then
                '処理対象がない
                    Call gfunc_ErrorMsg(3, 20190, "", "(func_GetShiharaiKanriStatus)")
                    GoTo NormalError
                Else
                    '計算処理対象がある。（処理なし)
                End If
            End If
            
        End If
'------------<Modify End   azuma 2008/08/05 > 連結障害対応(No.17)-----------------------


'dblE = Timer 'for debug
'Debug.Print "sub_GetMainItem        : " & (dblE - dblS) 'for debug

        '*******************
        '②**** 計算処理 ****
        '*******************
        If blnKeisan Then
        '計算チェックボックス＝TRUEの場合のみ実行

            strCalcTime = "計算中" & vbCrLf & "開始時刻 ： " & Now
            lblStatus.Caption = strCalcTime
            ProgressBar1.Value = 70
            DoEvents

            '計算バッチ起動関数呼出
            blnRet = func_CallCalcProcess(strGi_No, strKikan)

            strCalcTime = strCalcTime & vbCrLf & "終了時刻 ： " & Now
            If blnRet = False Then
                '計算処理失敗
                Call gfunc_ErrorMsg(3, 20070, "", strCalcTime)
                GoTo NormalError
            End If

            lblStatus.Caption = strCalcTime
            ProgressBar1.Value = 100
            DoEvents
        
        End If
        
        ThisWorkbook.Application.ScreenUpdating = False
        
        
        blnRet = False

        '**************************************
        '③**** 処理対象外部委託先一覧取得 ****
        '**************************************
        lblStatus.Caption = "計算確認書作成　前処理中"
        ProgressBar1.Value = 10
        DoEvents

        ThisWorkbook.Application.ScreenUpdating = False

'dblS = Timer 'for debug
        ReDim GI_STRCT(0)
        '外部委託支払管理、外部委託支払期間、外部委託支払計算合計から対象件数取得
        blnRet = func_GetGIList(strGi_No _
                              , strKikan _
                              , GI_STRCT _
                              , lngErrorCnt)
        
'dblE = Timer 'for debug
'Debug.Print "func_GetGIList        : " & (dblE - dblS) 'for debug
'dblS = Timer 'for debug
        
        If blnRet = False Then
            Call gfunc_ErrorMsg(3, 20090, "外部委託支払管理テーブル", "")
            GoTo NormalError
        Else

            '関数正常で取得件数０件の場合
            If UBound(GI_STRCT) = 0 Then
                Call gfunc_ErrorMsg(3, 20100, "外部委託支払管理テーブル", "計算処理が行われていない可能性があります。")
                GoTo NormalError
            Else
            '外部委託計算期間の取得
                For lngGIstrct_Cnt = 1 To UBound(GI_STRCT)
                
                    ReDim GI_STRCT(lngGIstrct_Cnt).GI_LETTER_STRCT(0)
                    
                    '外部委託先ごとのレター構造体と料率構造体の取得方法が異なる
                    Select Case GI_STRCT(lngGIstrct_Cnt).GI_NO
                        Case GI_CODE_RAFI   '1:RAFI
                
                            '構造体設定関数(RAFI)
                            blnRet = func_MakeGIStruct_RAFI(GI_STRCT(lngGIstrct_Cnt))
                            
                            If blnRet = False Then
                                Call gfunc_ErrorMsg(3, 20130, "外部委託計算期間テーブル", "")
                                GoTo NormalError
                            Else
                                '処理なし
                            End If
                            
                        Case Else
                            '処理なし
                    End Select
                
                Next lngGIstrct_Cnt
            End If
        End If
'dblE = Timer 'for debug
'Debug.Print "func_MakeGIStruct_RAFI        : " & (dblE - dblS) 'for debug
'dblS = Timer 'for debug
            
        '**************************
        '④**** 計算確認書作成 ****
        '**************************
        
        blnRet = False
        'NAM情報の読み込み
        blnRet = func_ReadNamInfo(3, strNamInfo())
        If blnRet = False Then
            Call gfunc_ErrorMsg(3, 20140, "", "")
            GoTo NormalError
        End If
        
'dblE = Timer 'for debug
'Debug.Print "func_ReadNamInfo        : " & (dblE - dblS) 'for debug
'dblS = Timer 'for debug
        
        ThisWorkbook.Application.ScreenUpdating = False
        
        '処理外部委託先回数分(外部委託先構造体数分)実行する。
        For lngGIstrct_Cnt = 1 To UBound(GI_STRCT)
            ThisWorkbook.Application.ScreenUpdating = False
        
            lngErrorCnt = 0
        
            blnRet = False
            
            Me.Caption = "計算確認書作成指示"
            ProgressBar1.Value = 20
            lblGI_Name.Caption = GI_STRCT(lngGIstrct_Cnt).GI_NAME   '外部委託先名
            lblStatus.Caption = "テンプレートのコピー中"
            DoEvents

            'テンプレートファイルのコピー
            blnRet = func_TemplateCopy(GI_STRCT(lngGIstrct_Cnt), strOutputDir, strFileName)
            If blnRet = False Then
                Call gfunc_ErrorMsg(3, 20150, "", "")
                GoTo NormalError
            End If
            
            
            '帳票出力ファイル名作成
            '　"外部委託先名(送付日)日付"_"時刻"_"本仮区分".xls
            'システム日付の取得
            Call gfunc_GetSvDateTime(strDate, strTime)
            
            '本仮計算区分の変換
            If Trim(GI_STRCT(lngGIstrct_Cnt).KARI_KEISAN_FLG) <> "" Then
                '外部委託支払計算合計テーブルから取得した仮計算フラグを元に
                'ファイルの本、仮を設定する。
                If GI_STRCT(lngGIstrct_Cnt).KARI_KEISAN_FLG = "0" Then
                    strKbnKj = "本"
                Else
                    strKbnKj = "仮"
                End If
            Else
                    strKbnKj = "仮"
            End If
            
            strOutFileName = GI_STRCT(lngGIstrct_Cnt).GI_NAME & _
                             "(" & strKikan & ")" & _
                             strDate & "_" & strTime & "_" & _
                             strKbnKj & ".xls"
            
'dblE = Timer 'for debug
'Debug.Print "func_TemplateCopy        : " & (dblE - dblS) 'for debug
            
        
            'データ取込～印刷
            For lngLoopCnt = 1 To lngLoopEnd
'dblS = Timer 'for debug
            
                Select Case lngLoopCnt
                Case 1
                    blnRet = True
                '④-1**** データ取込 ****
                    lblStatus.Caption = "データ取込中"
                    ProgressBar1.Value = 40
                    DoEvents
                    blnRet = func_TorikomiMain(GI_STRCT(lngGIstrct_Cnt) _
                                             , strOutputDir _
                                             , strFileName _
                                             , strNamInfo() _
                                             , lngErrorCnt)
'dblE = Timer 'for debug
'Debug.Print "func_TorikomiMain        : " & (dblE - dblS) 'for debug
                    
                Case 2
                '④-2**** 計算確認書EXCEL作成 ****
                    lblStatus.Caption = "計算確認書作成中"
                    ProgressBar1.Value = 70
                    DoEvents
                    blnRet = False
                    
                    blnRet = func_KakuninshoMain(GI_STRCT(lngGIstrct_Cnt) _
                                              , strOutputDir _
                                              , strFileName _
                                              , strOutFileName _
                                              , lngErrorCnt)
'dblE = Timer 'for debug
'Debug.Print "func_KakuninshoMain        : " & (dblE - dblS) 'for debug

                Case 3
                '④-3**** 計算確認書印刷 ****
                    If blnPrint And blnRet And lngErrorCnt = 0 Then
                        lblStatus.Caption = "印刷中"
                        ProgressBar1.Value = 90
                        DoEvents
                        blnRet = True
                        Call KakuninshoPrint(strOutFileName)
                    End If
                End Select
            
            
                
                If blnRet = False Or lngErrorCnt <> 0 Then

                    'エラー情報構造体セット
                    With gusrErr
                        .ModuleId = MODULE_NAME         'モジュール名
                        .Procedure = PROCEDURE_NAME     'プロシージャ名
                        .ErrNum = Err.Number             'エラー番号
                          'エラー概要
                        .ErrDescript = "計算確認書作成中(データ取込～印刷)にエラーが発生しました。"
                        .GI_NAME = GI_STRCT(lngGIstrct_Cnt).GI_NAME     '外部委託先
                        '口座番号
                        .KohzaNo = ""
                        .MsgNaiyou = "Err.Number:" & Err.Number & vbCrLf & _
                                     "Err.Description：" & Err.Description & vbCrLf & _
                                     "lngErrorCnt：" & lngErrorCnt & vbCrLf & _
                                      "計算チェックＯＮで再実行を行ってもこのエラーが発生する場合は、" & vbCrLf & _
                                      "システム管理者に連絡して下さい。" & vbCrLf & _
                                      "ファイル名　　：" & strFileName & vbCrLf & _
                                      "エラー発生処理：" & lblStatus.Caption       'メッセージ詳細
                    End With
                    'エラーシート書き込み
                    Call fncWriteErrSheet(ERROR_SHEETNAME)
                    
                    'データファイルのクローズ
                    On Error Resume Next
                    ThisWorkbook.Application.DisplayAlerts = False
                    Workbooks(strFileName).Close savechanges:=True
                    ThisWorkbook.Application.DisplayAlerts = True
                    On Error GoTo ErrHandler
                    
                    Exit For
    
                End If
            
            Next lngLoopCnt
'dblS = Timer 'for debug
            
            ProgressBar1.Value = 100
            DoEvents
            
            ThisWorkbook.Application.DisplayAlerts = False
            
            '計算確認書ファイルのクローズ
            On Error Resume Next
            Workbooks(strOutFileName).Close savechanges:=True
            On Error GoTo ErrHandler
            
            ThisWorkbook.Application.DisplayAlerts = True
            

'dblE = Timer 'for debug
'Debug.Print "Close        : " & (dblE - dblS) 'for debug
        
        Next lngGIstrct_Cnt
        
        ThisWorkbook.Application.ScreenUpdating = True
        
        Me.MousePointer = fmMousePointerAppStarting
    
        Unload Me
    
    End If
    
    Me.MousePointer = fmMousePointerAppStarting
    
    ThisWorkbook.Application.ScreenUpdating = True
    
    Call subEndProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME & vbCrLf & _
    "↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑計算確認書作成　終了↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑" & vbCrLf)
    
    mblnFlag = False
    
    Exit Sub
    
NormalError:
    
    On Error Resume Next
    ThisWorkbook.Application.DisplayAlerts = False
    Workbooks(strFileName).Close
    ThisWorkbook.Application.Workbooks(strOutFileName).Close
    
    Erase strNamInfo
    Me.MousePointer = fmMousePointerAppStarting
    ThisWorkbook.Application.ScreenUpdating = True
    ThisWorkbook.Application.DisplayAlerts = True
    Unload Me
    
    Call subEndProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME & vbCrLf & _
    "↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑計算確認書作成　終了(NormalError)↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑" & vbCrLf)
    
    mblnFlag = False
    
    Exit Sub

ErrHandler:
    
    mblnFlag = False
    Me.MousePointer = fmMousePointerAppStarting
'MsgBox "Error " & Err.Description
'Resume
    ThisWorkbook.Application.ScreenUpdating = True
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0

    Erase strNamInfo
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------


    If lngErrorCnt <> 0 Then

        'エラー情報構造体セット
        With gusrErr
            .ModuleId = MODULE_NAME         'モジュール名
            .Procedure = PROCEDURE_NAME     'プロシージャ名
            .ErrNum = Err.Number            'エラー番号
              'エラー概要
            .ErrDescript = "UserForm_Activateでシステムエラーが発生しました。"
            .GI_NAME = ""                   '外部委託先
            '口座番号
            .KohzaNo = ""
            .MsgNaiyou = "Err.Number     ：" & Err.Number & vbCrLf & _
                         "Err.Description：" & Err.Description & vbCrLf & _
                         "lngErrorCnt　　：" & lngErrorCnt & vbCrLf & _
                         "lngLoopCnt     ：" & lblStatus.Caption       'メッセージ詳細
        End With
        'エラーシート書き込み
        Call fncWriteErrSheet(ERROR_SHEETNAME)
        
    End If



    Call subEndProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME & vbCrLf & _
    "↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑計算確認書作成　終了(OnError)↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑" & vbCrLf)
    Unload Me


End Sub

'*************************************************************************
'関数名　　：フォーム初期処理
'
'引　　数　：なし
'
'
'戻り値　　：なし
'
'機能説明　：画面項目の初期化
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Sub UserForm_Initialize()

On Error GoTo ErrHandler

    Const PROCEDURE_NAME As String = "UserForm_Initialize"

'*******************************************************
'* 関数開始　                                        　*
'*******************************************************
    
    lblStatus.Caption = ""
    lblGI_Name.Caption = ""
    ProgressBar1.Min = 0
    ProgressBar1.Max = 100

Exit Sub

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

Exit Sub

End Sub

'*************************************************************************
'関数名　　：フォームQueryCloseイベントプロシージャ
'
'引　　数　：
'           Cancel       I/O
'           CloseMode    I      イベント発生理由
'
'戻り値　　：なし
'
'機能説明　：フォームを強制終了させない
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    
On Error GoTo ErrHandler

    Const PROCEDURE_NAME As String = "UserForm_QueryClose"

'*******************************************************
'* 関数開始　                                        　*
'*******************************************************
    
    'フォームの×ボタンでフォームを閉じさせない
    If CloseMode = vbFormControlMenu Then
        Cancel = True   'Unloadをキャンセル
        Exit Sub
    End If
Exit Sub

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

Exit Sub

End Sub



'*************************************************************************
'関数名　　：Main画面の入力情報取得関数
'
'引　　数　：
'           blnKeisan       I       計算チェックボックス
'           blnPrint        I       印刷チェックボックス
'           strGI_No        I       外部委託先番号
'           strKikan        I       送付日
'           strOutputDir    I       保存フォルダ
'
'戻り値　　：
'
'機能説明　：画面の項目の取得を行う
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Sub sub_GetMainItem(ByRef blnKeisan As Boolean _
                          , ByRef blnPrint As Boolean _
                          , ByRef strGi_No As String _
                          , ByRef strKikan As String _
                          , ByRef strOutputDir As String)
On Error GoTo ErrHandler

    Const PROCEDURE_NAME As String = "sub_GetMainItem"

        With ThisWorkbook.Worksheets(MAIN_SHEETNAME)
            
            '計算
            blnKeisan = .chkCalc.Value
            
            '印刷
            blnPrint = .chkPrint.Value
            
            '外部委託先番号
            If IsNull(.Range("外部委託先").Value) = True Or Trim(.Range("外部委託先").Value) = "" Then
                strGi_No = ""
            Else
                strGi_No = Mid(.Range("外部委託先").Value, 1, 1)
            End If
            
            '送付日
            strKikan = .Range("送付日").Value
            
            '保存フォルダ
            strOutputDir = .Range("保存フォルダ").Value
        End With
        
Exit Sub
        
ErrHandler:


'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
        
End Sub



'*************************************************************************
'関数名　　：計算確認書作成の外部委託先一覧取得関数
'
'引　　数　：
'           strGi_No            I       外部委託先番号
'           strSoufuYmd         I       送付日
'           GI_STRCT()          O       検索結果(処理対象外部委託先構造体配列)
'           lngErrorCnt         O       エラーカウンタ
'
'戻り値　　：
'
'機能説明　：外部委託先、送付日から
'           計算確認書作成の対象データ一覧を取得する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Function func_GetGIList(ByVal strGi_No As String _
                              , ByVal strSoufuYmd As String _
                              , ByRef GI_STRCT() As typGI_SHIHARAI_STRCT _
                              , ByRef lngErrorCnt As Long) As Boolean

On Error GoTo ErrHandler

    Const PROCEDURE_NAME    As String = "func_GetGIList"

    Dim strSql              As String
    Dim vdata()             As Variant
    Dim lngCol              As Long
    Dim lngRow              As Long
    Dim lngRowCnt           As Long
    Dim lngGIcnt            As Long
    
    func_GetGIList = False

    lngGIcnt = 0
    
'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

    'SQL作成
    strSql = ""
    strSql = strSql & " SELECT A.GI_NO"                     '0:外部委託先番号
    strSql = strSql & "       ,A.GI_SHIHARAI_KIKAN_ID"      '1:送付日
    strSql = strSql & "       ,A.SOUFU_YMD"                 '2:外部委託支払期間ID
    strSql = strSql & "       ,B.GI_SHIHARAI_KIKAN_FROM"    '3:外部委託支払期間From
    strSql = strSql & "       ,B.GI_SHIHARAI_KIKAN_TO"      '4:外部委託支払期間To
    strSql = strSql & "       ,C.KARI_KEISAN_FLG"           '5:仮計算フラグ
    strSql = strSql & "       ,D.VALUE_NAME"                '6:コード値の名前
    strSql = strSql & "   FROM KYK_GI_SHIHARAI_KANRI A "
    strSql = strSql & "        LEFT JOIN KYK_GI_SHIHARAI_KIKAN      B  ON (   A.GI_NO                = B.GI_NO"
    strSql = strSql & "                                                   AND A.GI_SHIHARAI_KIKAN_ID = B.GI_SHIHARAI_KIKAN_ID"
    strSql = strSql & "                                                   AND B.SAKUJO_FLG           = '0')"
    strSql = strSql & "        LEFT JOIN KYK_GI_SHIHARAI_KEISAN_SUM C  ON (   A.GI_NO                = C.GI_NO"
    strSql = strSql & "                                                   AND A.GI_SHIHARAI_KIKAN_ID = C.GI_SHIHARAI_KIKAN_ID"
    strSql = strSql & "                                                   AND A.SHIHARAI_FLG         = C.SHIHARAI_FLG"
    strSql = strSql & "                                                   AND B.GI_SHIHARAI_KIKAN_TO = C.KEISAN_TO_YMD)"
    strSql = strSql & "        LEFT JOIN KYK_CODE_VALUE             D  ON (   A.GI_NO                = D.CODE_VALUE"
    strSql = strSql & "                                                   AND D.CODE_NO              = '56'"
    strSql = strSql & "                                                   AND D.SAKUJO_FLG           = '0')"
    strSql = strSql & "  WHERE A.SHIHARAI_FLG = '1'"
    strSql = strSql & "    AND A.SAKUJO_FLG   = '0'"
    strSql = strSql & "    AND A.SOUFU_YMD    = " & strSoufuYmd
    
    '外部委託先が指定されている場合
    If Trim(strGi_No) = "" Then
        '処理なし
    Else
        strSql = strSql & "    AND A.GI_NO        = '" & strGi_No & "'"
    End If
    strSql = strSql & "    AND C.SAKUJO_FLG   = '0'"
    strSql = strSql & "  ORDER BY A.GI_NO"
    
    'データ取得
    Call gclsDB.DoExequteSql(gcSELECT, strSql, vdata, lngCol, lngRow)
    
    '取得データを設定
    If lngRow > 0 Then
        
        For lngRowCnt = 0 To lngRow - 1
        
            '外部委託先がRAFI以外の場合、構造体に追加せずエラーシートへ
            If CStr(vdata(0, lngRowCnt)) = GI_CODE_RAFI Then
            'RAFIの場合
                lngGIcnt = lngGIcnt + 1
                ReDim GI_STRCT(lngGIcnt)

                '≪外部委託先構造体(GI_SHIHARAI_STRCT)≫へのデータ設定
                With GI_STRCT(lngGIcnt)
                    .GI_NO = vdata(0, lngRowCnt)
                    .GI_SHIHARAI_KIKAN_ID = vdata(1, lngRowCnt)
                    .SOUFU_YMD = vdata(2, lngRowCnt)
                    .GI_SHIHARAI_KIKAN_FROM = vdata(3, lngRowCnt)
                    .GI_SHIHARAI_KIKAN_TO = vdata(4, lngRowCnt)
                    .KARI_KEISAN_FLG = vdata(5, lngRowCnt)
                    .GI_NAME = vdata(6, lngRowCnt)
                End With
            Else
            'RAFI以外の外部委託先
                'エラー情報構造体セット
                With gusrErr
                    .ModuleId = MODULE_NAME         'モジュール名
                    .Procedure = PROCEDURE_NAME     'プロシージャ名
                    .ErrNum = Err.Number            'エラー番号
                      'エラー概要
                    .ErrDescript = "未対応の外部委託先"
                    .GI_NAME = CStr(vdata(6, lngRowCnt))  '外部委託先
                    '口座番号
                    .KohzaNo = ""
                    .MsgNaiyou = "未対応の外部委託先の為、処理対象から除外しました。" & vbCrLf & _
                                  "システム管理者に連絡して下さい。" & vbCrLf & _
                                  "外部委託先番号　　：" & CStr(vdata(0, lngRowCnt)) & vbCrLf & _
                                  "外部委託先        ：" & CStr(vdata(6, lngRowCnt))       'メッセージ詳細
                End With
                'エラーシート書き込み
                Call fncWriteErrSheet(ERROR_SHEETNAME)
                lngErrorCnt = lngErrorCnt + 1
            End If
        Next lngRowCnt
                        
    End If
    
    Erase vdata

    func_GetGIList = True
    
Exit Function
    
ErrHandler:

    func_GetGIList = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
    
    Erase vdata
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function



'*************************************************************************
'関数名　　：外部委託先構造体設定関数(RAFI)
'
'引　　数　：
'           GI_STRCT            I/O     検索結果(処理対象外部委託先構造体配列)
'
'戻り値　　：
'
'機能説明　：外部委託先計算期間、から≪外部委託レター構造体(GI_LETTER_STRCT)≫
'            ≪外部委託料率期間構造体(GI_RATE_KIKAN_STRCT)≫のデータを取得する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Function func_MakeGIStruct_RAFI(ByRef GI_STRCT As typGI_SHIHARAI_STRCT) As Boolean

On Error GoTo ErrHandler


    Const PROCEDURE_NAME    As String = "func_MakeGIStruct_RAFI"
    Dim lngLtrStrct_Cnt     As Long
    Dim blnRet              As Boolean
    
    func_MakeGIStruct_RAFI = False
'*******************************************************
'* 関数開始　                                        　*
'*******************************************************
    
    '外部委託計算期間からデータを取得し外部委託レター構造体に設定する。
    blnRet = func_GetGILetterList_RAFI(GI_STRCT)
    
    If blnRet = False Then
        Call gfunc_ErrorMsg(3, 20110, "外部委託計算期間テーブル", "")
        Exit Function
    Else

        '関数正常で取得件数０件以外の場合
        If UBound(GI_STRCT.GI_LETTER_STRCT) <= 0 Then
            '処理なし
        Else
        '1件以上
            'レターの件数分、料率(計算期間)データ取得を行う
            For lngLtrStrct_Cnt = 1 To UBound(GI_STRCT.GI_LETTER_STRCT)
            
                ReDim GI_STRCT.GI_LETTER_STRCT(lngLtrStrct_Cnt).GI_RATE_KIKAN_STRCT(0)
                
                '外部委託計算期間からデータを取得し外部委託料率期間構造体に設定する。
                blnRet = func_GetGIRateKikan_RAFI(GI_STRCT, lngLtrStrct_Cnt)
                
                If blnRet = False Then
                    Call gfunc_ErrorMsg(3, 20120, "外部委託計算期間テーブル", "")
                    Exit Function
                Else
                    '処理なし
                End If
                
            Next lngLtrStrct_Cnt
        End If
    End If
    
    
    
    func_MakeGIStruct_RAFI = True
Exit Function

ErrHandler:

    func_MakeGIStruct_RAFI = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
    
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function




'*************************************************************************
'関数名　　：外部委託先計算期間一覧取得関数(RAFI)
'
'引　　数　：
'           GI_STRCT            I/O     検索結果(処理対象外部委託先構造体配列)
'
'戻り値　　：
'
'機能説明　：外部委託先計算期間から≪外部委託レター構造体(GI_LETTER_STRCT)≫の
'            データを取得する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'更新履歴　：2008/08/06 SRA Y.Azuma    変更   連結障害対応(No.19)
'
'*************************************************************************
Private Function func_GetGILetterList_RAFI(ByRef GI_STRCT As typGI_SHIHARAI_STRCT) As Boolean

On Error GoTo ErrHandler


    Const PROCEDURE_NAME    As String = "func_GetGILetterList_RAFI"
    Dim strSql              As String
    Dim vdata()             As Variant
    Dim lngCol              As Long
    Dim lngRow              As Long
    Dim lngRowCnt           As Long
    

    func_GetGILetterList_RAFI = False

'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

    'SQL作成
'------------<Modify Start azuma 2008/08/06 > 連結障害対応(No.19)-----------------------
    strSql = ""
    strSql = strSql & " SELECT A.KOHZA_NO"                                          '0:口座番号
    strSql = strSql & "       ,A.ISSCD"                                             '1:銘柄コード
    strSql = strSql & "       ,DECODE(A.GI_KEISAN_HOHHOH, '1', '1' "
    strSql = strSql & "                                 , '2', '1' "
    strSql = strSql & "                                 , '3', '3' "
    strSql = strSql & "                                 , '4', '3', '') "           '2:外部委託計算方法
    strSql = strSql & "       ,MIN(A.GI_KEISAN_KIKAN_FROM) GI_KEISAN_KIKAN_FROM"    '3:外部委託計算期間FROM
    strSql = strSql & "       ,MAX(A.GI_KEISAN_KIKAN_TO)   GI_KEISAN_KIKAN_TO"      '4:外部委託計算期間TO
    strSql = strSql & "   FROM KYK_GI_KEISAN_KIKAN A"
    strSql = strSql & "  WHERE A.GI_NO                = '" & GI_STRCT.GI_NO & "'"
    strSql = strSql & "    AND A.GI_SHIHARAI_KIKAN_ID =  " & GI_STRCT.GI_SHIHARAI_KIKAN_ID
    strSql = strSql & "    AND A.SAKUJO_FLG           = '0'"
    strSql = strSql & "  GROUP BY A.KOHZA_NO"
    strSql = strSql & "          ,A.ISSCD"
    strSql = strSql & "          ,DECODE(A.GI_KEISAN_HOHHOH, '1', '1' "
    strSql = strSql & "                                    , '2', '1' "
    strSql = strSql & "                                    , '3', '3' "
    strSql = strSql & "                                    , '4', '3', '') "
    strSql = strSql & "  ORDER BY DECODE(A.GI_KEISAN_HOHHOH, '1', '1' "
    strSql = strSql & "                                    , '2', '1' "
    strSql = strSql & "                                    , '3', '3' "
    strSql = strSql & "                                    , '4', '3', '') "
    strSql = strSql & "          ,A.ISSCD"
    strSql = strSql & "          ,A.KOHZA_NO "
''    strSql = ""
''    strSql = strSql & " SELECT   A.KOHZA_NO"                                        '0:口座番号
''    strSql = strSql & "        , A.ISSCD"                                           '1:銘柄コード
''    strSql = strSql & "        , A.GI_KEISAN_HOHHOH "                               '2:外部委託計算方法
''    strSql = strSql & "        , MIN(A.GI_KEISAN_KIKAN_FROM) GI_KEISAN_KIKAN_FROM"  '3:外部委託計算期間FROM
''    strSql = strSql & "        , MAX(A.GI_KEISAN_KIKAN_TO)   GI_KEISAN_KIKAN_TO"    '4:外部委託計算期間TO
''    strSql = strSql & "  FROM    KYK_GI_KEISAN_KIKAN A"
''    strSql = strSql & "  WHERE   A.GI_NO                = '" & GI_STRCT.GI_NO & "'"
''    strSql = strSql & "    AND   A.GI_SHIHARAI_KIKAN_ID =  " & GI_STRCT.GI_SHIHARAI_KIKAN_ID
''    strSql = strSql & "    AND   A.SAKUJO_FLG           = '0'"
''    strSql = strSql & " GROUP BY "
''    strSql = strSql & "          A.KOHZA_NO"
''    strSql = strSql & "        , A.ISSCD"
''    strSql = strSql & "        , A.GI_KEISAN_HOHHOH "
''    strSql = strSql & "        , DECODE(A.GI_KEISAN_HOHHOH,'1','1'"
''    strSql = strSql & "                                   ,'2','1'"
''    strSql = strSql & "                                   ,'3','3'"
''    strSql = strSql & "                                   ,'4','3','')"
''    strSql = strSql & " ORDER BY DECODE(A.GI_KEISAN_HOHHOH,'1','1'"
''    strSql = strSql & "                                   ,'2','1'"
''    strSql = strSql & "                                   ,'3','3'"
''    strSql = strSql & "                                   ,'4','3','')"
''    strSql = strSql & "        , A.ISSCD"
''    strSql = strSql & "        , A.KOHZA_NO"
''    strSql = strSql & " "
'------------<Modify End   azuma 2008/08/06 > 連結障害対応(No.19)-----------------------

    'データ取得
    Call gclsDB.DoExequteSql(gcSELECT, strSql, vdata, lngCol, lngRow)
    
    
    '取得データを構造体に設定
    If lngRow > 0 Then
        ReDim GI_STRCT.GI_LETTER_STRCT(lngRow)
        For lngRowCnt = 0 To lngRow - 1
            With GI_STRCT.GI_LETTER_STRCT(lngRowCnt + 1)
                .KOHZA_NO = CStr(vdata(0, lngRowCnt))               '口座番号
                .ISSCD = CStr(vdata(1, lngRowCnt))                  '銘柄コード
                .GI_KEISAN_HOHHOH = CStr(vdata(2, lngRowCnt))       '外部委託計算方法
                .GI_KEISAN_KIKAN_FROM = CStr(vdata(3, lngRowCnt))   '外部委託計算期間From
                .GI_KEISAN_KIKAN_TO = CStr(vdata(4, lngRowCnt))     '外部委託計算期間To
            End With
        Next lngRowCnt
    Else
        'データなしでも正常とする。
    End If
                        
    Erase vdata

    func_GetGILetterList_RAFI = True
    Exit Function
    
ErrHandler:

    func_GetGILetterList_RAFI = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
    
    Erase vdata
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function

'*************************************************************************
'関数名　　：外部委託先計算期間(料率)一覧取得関数(RAFI)
'
'引　　数　：
'           GI_STRCT            I/O     検索結果(処理対象外部委託先構造体配列)
'           lngLtrStrct_Cnt     I       外部委託レター構造体の処理対象インデックス番号
'
'戻り値　　：
'
'機能説明　：外部委託先計算期間から≪外部委託料率期間構造体(typGI_RATE_KIKAN_STRCT)≫の
'            データを取得する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'更新履歴　：2008/08/06 SRA Y.Azuma    変更   連結障害対応(No.20)
'更新履歴　：2008/08/29 SRA Y.Azuma    変更   連結障害対応(No.21)
'
'*************************************************************************
Private Function func_GetGIRateKikan_RAFI(ByRef GI_STRCT As typGI_SHIHARAI_STRCT, ByVal lngLtrStrct_Cnt As Long) As Boolean

On Error GoTo ErrHandler


    Const PROCEDURE_NAME    As String = "func_GetGIRateKikan_RAFI"
    Dim strSql              As String
    Dim vdata()             As Variant
    Dim lngCol              As Long
    Dim lngRow              As Long
    Dim lngRowCnt           As Long
    

    func_GetGIRateKikan_RAFI = False

'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

    'SQL作成
    strSql = ""
    strSql = strSql & " SELECT   A.GI_KEISAN_KIKAN_ID"      '0:外部委託計算期間ID
    strSql = strSql & "        , A.GI_KEISAN_KIKAN_FROM"    '1:外部委託計算期間FROM
    strSql = strSql & "        , A.GI_KEISAN_KIKAN_TO"      '2:外部委託計算期間TO
    strSql = strSql & "        , A.RATE_CODE"               '3:料率コード
    strSql = strSql & "        , A.GI_KEISAN_HOHHOH "       '4:外部委託計算方法
    strSql = strSql & "   FROM   KYK_GI_KEISAN_KIKAN A"
    strSql = strSql & "  WHERE   A.GI_NO                 = '" & GI_STRCT.GI_NO & "'"
    strSql = strSql & "    AND   A.GI_SHIHARAI_KIKAN_ID  =  " & GI_STRCT.GI_SHIHARAI_KIKAN_ID
    strSql = strSql & "    AND   A.KOHZA_NO              = '" & GI_STRCT.GI_LETTER_STRCT(lngLtrStrct_Cnt).KOHZA_NO & "'"
'------------<Modify Start azuma 2008/08/29 > 連結障害対応(No.21)-----------------------
    strSql = strSql & "    AND   A.ISSCD                 = '" & func_ChkQuoteshon(GI_STRCT.GI_LETTER_STRCT(lngLtrStrct_Cnt).ISSCD, "'") & "'"
'''    strSql = strSql & "    AND   A.ISSCD                 = '" & GI_STRCT.GI_LETTER_STRCT(lngLtrStrct_Cnt).ISSCD & "'"
'------------<Modify End   azuma 2008/08/29 > 連結障害対応(No.21)-----------------------
    strSql = strSql & "    AND   A.GI_KEISAN_KIKAN_FROM >=  " & GI_STRCT.GI_LETTER_STRCT(lngLtrStrct_Cnt).GI_KEISAN_KIKAN_FROM
    strSql = strSql & "    AND   A.GI_KEISAN_KIKAN_TO   <=  " & GI_STRCT.GI_LETTER_STRCT(lngLtrStrct_Cnt).GI_KEISAN_KIKAN_TO
'------------<Modify Start azuma 2008/08/06 > 連結障害対応(No.20)-----------------------
    If GI_STRCT.GI_LETTER_STRCT(lngLtrStrct_Cnt).GI_KEISAN_HOHHOH = "1" Then
        strSql = strSql & "    AND   GI_KEISAN_HOHHOH IN('1','2') "
    ElseIf GI_STRCT.GI_LETTER_STRCT(lngLtrStrct_Cnt).GI_KEISAN_HOHHOH = "3" Then
        strSql = strSql & "    AND   GI_KEISAN_HOHHOH IN('3','4') "
    End If
'------------<Modify End   azuma 2008/08/06 > 連結障害対応(No.20)-----------------------
    strSql = strSql & "    AND   A.SAKUJO_FLG            = '0'"
    strSql = strSql & "   ORDER BY A.GI_KEISAN_KIKAN_FROM"
    strSql = strSql & "          , A.GI_KEISAN_KIKAN_TO"
    strSql = strSql & " "
    
    'データ取得
    Call gclsDB.DoExequteSql(gcSELECT, strSql, vdata, lngCol, lngRow)
    
    
    '取得データを構造体に設定
    If lngRow > 0 Then
        ReDim GI_STRCT.GI_LETTER_STRCT(lngLtrStrct_Cnt).GI_RATE_KIKAN_STRCT(lngRow)
        For lngRowCnt = 0 To lngRow - 1
            With GI_STRCT.GI_LETTER_STRCT(lngLtrStrct_Cnt).GI_RATE_KIKAN_STRCT(lngRowCnt + 1)
                .GI_KEISAN_KIKAN_ID = CStr(vdata(0, lngRowCnt))     '外部委託計算期間ID
                .GI_KEISAN_KIKAN_FROM = CStr(vdata(1, lngRowCnt))   '外部委託計算期間FROM
                .GI_KEISAN_KIKAN_TO = CStr(vdata(2, lngRowCnt))     '外部委託計算期間TO
                .RATE_CODE = CStr(vdata(3, lngRowCnt))              '料率コード
                .GI_KEISAN_HOHHOH = CStr(vdata(4, lngRowCnt))       '外部委託計算方法
            End With
        Next lngRowCnt
    Else
        Exit Function
    End If
                        
    Erase vdata

    func_GetGIRateKikan_RAFI = True
    Exit Function
    
ErrHandler:

    func_GetGIRateKikan_RAFI = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
    
    Erase vdata
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function


'*************************************************************************
'関数名　　：テンプレートファイルコピー関数
'
'引　　数　：
'           GI_STRCT        I       処理対象外部委託先構造体
'           strOutputDir    I       出力先フォルダ
'           strFileName     O       コピー先ファイル名(Pathなし)
'
'戻り値　　：
'
'機能説明　：
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Function func_TemplateCopy(ByRef GI_STRCT As typGI_SHIHARAI_STRCT _
                                 , ByVal strOutputDir As String _
                                 , ByRef strFileName As String) As Boolean

On Error GoTo ErrHandler

    Const PROCEDURE_NAME        As String = "func_TemplateCopy"
    Dim strTemplate_fileName    As String
    Dim valSrcFileName          As Variant      'コピー元フィル名
    Dim valNewFileName          As Variant      '新規ファイル名
    Dim lngSheetNum             As Long
    Dim wbNewBook               As Workbook

    func_TemplateCopy = False
    
    strTemplate_fileName = ""
    '外部委託先ごとのテンプレートファイル名を選択
    Select Case GI_STRCT.GI_NO
        Case GI_CODE_RAFI '1:RAFI
            strTemplate_fileName = TEMPLATE_FILENAME_RAFI
        Case Else
            '処理なし
    End Select
    
    
    
    'コピー元ファイル設定
    valSrcFileName = ThisWorkbook.Path & "\" & TEMPLATE_FOLDER & "\" & strTemplate_fileName
    
    '新ファイル名作成(送付日_外部委託先名.xls)
    strFileName = GI_STRCT.SOUFU_YMD & "_" & GI_STRCT.GI_NAME & ".xls"
    
    If Right(strOutputDir, 1) = "\" Then
        valNewFileName = strOutputDir
    Else
        valNewFileName = strOutputDir & "\"
    End If
    
    'データシートファイル名作成
    valNewFileName = valNewFileName & strFileName
    
    ThisWorkbook.Application.SheetsInNewWorkbook = 1
    Set wbNewBook = ThisWorkbook.Application.Workbooks.Add(valSrcFileName)
    
    'ファイルの保存
    ThisWorkbook.Application.DisplayAlerts = False
    wbNewBook.Application.ActiveWorkbook.SaveAs Filename:=valNewFileName
    ThisWorkbook.Application.DisplayAlerts = True
    
    Set wbNewBook = Nothing
    Set valSrcFileName = Nothing
    Set valNewFileName = Nothing

    func_TemplateCopy = True

    Exit Function
ErrHandler:

    func_TemplateCopy = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
    
    Set wbNewBook = Nothing
    Set valSrcFileName = Nothing
    Set valNewFileName = Nothing
    
    ThisWorkbook.Application.DisplayAlerts = False
    
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function


'*************************************************************************
'関数名　　：NAM情報取得関数
'
'引　　数　：
'           lngSheetNo      I       対象シート
'           strNamInfo      O       NAM情報格納配列
'
'戻り値　　：Boolean
'
'機能説明　：NAM情報のExcelファイルからNAM情報を取得する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Function func_ReadNamInfo(ByRef lngSheetNo As Long, ByRef strNamInfo() As String) As Boolean
On Error GoTo ErrHandler

    Const PROCEDURE_NAME    As String = "func_ReadNamInfo"
    Dim exl_ap              As Excel.Application             'ファイルオープン用
    Dim exl_wb              As Excel.Workbook                'ファイルオープン用
    Dim lngRowNo            As Long
    Dim lngMaxRow           As Long

    func_ReadNamInfo = False


'*******************************************************
'* 関数開始　                                        　*
'*******************************************************
    
    
    Set exl_ap = CreateObject("Excel.Application")
    
    '
    Set exl_wb = exl_ap.Workbooks.Open(ThisWorkbook.Path & "\" & NAM_INFO_FILENAME)
    
    exl_wb.Application.Visible = False
    
    
    '行数
    lngMaxRow = exl_wb.Worksheets(lngSheetNo).Range("A65536").End(xlUp).Row
    
    ReDim strNamInfo(lngMaxRow, 1)
    
    With exl_wb.Sheets(lngSheetNo)
        For lngRowNo = 1 To lngMaxRow
            strNamInfo(lngRowNo, 0) = gfunc_ChangeNull(.Range("A" & lngRowNo).Value, "")   'カラム名
            strNamInfo(lngRowNo, 1) = gfunc_ChangeNull(.Range("B" & lngRowNo).Value, "")    '値
        Next lngRowNo
    End With
    
    exl_ap.Application.DisplayAlerts = False
    exl_ap.Workbooks(NAM_INFO_FILENAME).Close
    exl_ap.Quit
    exl_ap.Application.DisplayAlerts = True
    
    Set exl_wb = Nothing
    Set exl_ap = Nothing

    func_ReadNamInfo = True
    Exit Function

ErrHandler:

    func_ReadNamInfo = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    Set exl_wb = Nothing
    Set exl_ap = Nothing


End Function




'*************************************************************************
'関数名　　：支払管理ステータス取得関数
'
'引　　数　：
'           strKikan        I       送付日
'           lngRecCnt       O       取得件数
'
'戻り値　　：Boolean
'
'機能説明　：指定された外部委託先と送付日から外部委託支払管理テーブルの
'            ステータス該当件数を取得する。
'
'更新履歴　：2008/08/05 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Function func_GetShiharaiKanriStatus(ByVal strKikan As String _
                                           , ByRef lngRecCnt As Long) As Boolean
On Error GoTo ErrHandler


    Const PROCEDURE_NAME    As String = "func_GetShiharaiKanriStatus"
    Dim strSql              As String
    Dim vdata()             As Variant
    Dim lngRow              As Long
    Dim lngCol              As Long
    Dim strErrCode          As String


    func_GetShiharaiKanriStatus = False

    lngRow = 0
    strErrCode = ""
    
'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

    strSql = ""
    strSql = strSql & " SELECT COUNT(*)"
    strSql = strSql & "   FROM KYK_GI_SHIHARAI_KANRI A "
    strSql = strSql & "  WHERE A.SOUFU_YMD  = " & strKikan
    strSql = strSql & "    AND A.STATUS     < '2'"
    strSql = strSql & "    AND A.SAKUJO_FLG = '0'"

    'データ取得
    Call gclsDB.DoExequteSql(gcSELECT, strSql, vdata, lngCol, lngRow, strErrCode)
    

    '取得データを判定
    If Trim(strErrCode) = "" Then
        If lngRow > 0 Then
            lngRecCnt = CLng(vdata(0, 0))
        End If
    Else
    'システムエラー
        Erase vdata
        Exit Function
    End If
                        
    Erase vdata

    func_GetShiharaiKanriStatus = True

    Exit Function

ErrHandler:

    func_GetShiharaiKanriStatus = False
    
'Debug.Print strSql
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    Erase vdata

End Function


