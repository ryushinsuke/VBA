Attribute VB_Name = "bas40Torikomi"
Option Explicit
'*************************************************************************
'
'プロジェクト名：外部委託ライセンスフィー算出システム・計算確認書作成指示
'
'オブジェクト名：bas40Torikomi
'
'機能概要　：帳票データ取込み作成処理
'
'更新履歴　：2008/06/30 SRA 東       新規作成
'
'*************************************************************************

Const MODULE_NAME  As String = "bas40Torikomi"

'≪外部委託料率期間構造体(typGI_RATE_KIKAN_STRCT)≫のメンバー
Public Type typGI_RATE_KIKAN_STRCT
    GI_KEISAN_KIKAN_ID      As String                   '外部委託計算期間ID
    GI_KEISAN_KIKAN_FROM    As String                   '外部委託計算期間FROM
    GI_KEISAN_KIKAN_TO      As String                   '外部委託計算期間TO
    RATE_CODE               As String                   '料率コード
    GI_KEISAN_HOHHOH        As String                   '外部委託計算方法
    SEIKYU_KIKAN_ID         As String                   '請求期間ID
    SHISAN_BUNRUI           As String                   '資産分類
    SHISAN_CODE             As String                   '資産コード
    RATE_TEKIYOH_KIKAN_ID   As String                   '料率適用期間ID
    RATE_TEKIYOH_KIKAN_FROM As String                   '料率適用期間FROM
    RATE_TEKIYOH_KIKAN_TO   As String                   '料率適用期間TO
End Type


'≪外部委託レター構造体(GI_LETTER_STRCT)≫のメンバー
Public Type typGI_LETTER_STRCT
    KOHZA_NO                As String                   '口座番号
    ISSCD                   As String                   '銘柄コード
    GI_KEISAN_HOHHOH        As String                   '外部委託計算方法
    GI_KEISAN_KIKAN_FROM    As String                   '外部委託計算期間From
    GI_KEISAN_KIKAN_TO      As String                   '外部委託計算期間To
    GI_RATE_KIKAN_STRCT()   As typGI_RATE_KIKAN_STRCT   '料率期間構造体(配列)
    SEIKYU_KIKAN_ID         As String                   '請求期間ID
    HIZUKE_SHURUI           As String                   '日付種類
    KEISAN_FROM_YMD         As String                   '計算FROM日
    KEISAN_TO_YMD           As String                   '計算TO日
End Type


'≪外部委託先構造体(typGI_SHIHARAI_STRCT)≫のメンバー
Public Type typGI_SHIHARAI_STRCT
    GI_NO                   As String                   '外部委託先番号
    GI_NAME                 As String                   '外部委託先名
    GI_SHIHARAI_KIKAN_ID    As String                   '外部委託支払期間ID
    SOUFU_YMD               As String                   '送付日
    GI_SHIHARAI_KIKAN_FROM  As String                   '外部委託支払期間FROM
    GI_SHIHARAI_KIKAN_TO    As String                   '外部委託支払期間TO
    KARI_KEISAN_FLG         As String                   '仮計算フラグ
    GI_LETTER_STRCT()       As typGI_LETTER_STRCT       '外部委託レター構造体(配列)
End Type
 



'*************************************************************************
'関数名　　：取込処理メイン
'
'引　　数　：
'           GI_STRCT          I       外部委託先構造体
'           strOutputDir      I       出力先フォルダ
'           strFileName       I       データファイル名(Pathなし)
'           strNamInfo        I       NAM情報
'           lngErrorCnt       O       エラー数
'
'戻り値　　：
'
'機能説明　：
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Function func_TorikomiMain(ByRef GI_STRCT As typGI_SHIHARAI_STRCT _
                                , ByVal strOutputDir As String _
                                , ByVal strFileName As String _
                                , ByRef strNamInfo() As String _
                                , ByRef lngErrorCnt As Long) As Boolean
On Error GoTo ErrHandler

    Const PROCEDURE_NAME    As String = "func_TorikomiMain"
    Dim blnRet              As Boolean
'Dim dblS    As Double   'for debug
'Dim dblE    As Double   'for debug
    
    func_TorikomiMain = False

    blnRet = False
    

'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

    With Workbooks(strFileName)
        'データシートの追加
        .Sheets.Add After:=Worksheets(DATASHEET_TEMP_DATA)
        .ActiveSheet.Name = DATASHEET_DATA        'シート名変更
        .Worksheets(DATASHEET_TEMP_DATA).Visible = False
        
'dblS = Timer 'for debug
        
        '外部委託先ごとに作成する関数の振り分け
        Select Case GI_STRCT.GI_NO
            Case GI_CODE_RAFI
                'RAFI計算確認書データシート作成関数
                blnRet = func_KeisanKakuninsho_RAFI(GI_STRCT _
                                                  , strFileName _
                                                  , lngErrorCnt)
                
            Case Else
                Call gfunc_ErrorMsg(3, 20170, "", "外部委託先番号:" & GI_STRCT.GI_NO & vbCrLf & "外部委託先名:" & GI_STRCT.GI_NAME)
                lngErrorCnt = lngErrorCnt + 1
                Exit Function
        End Select
    
'dblE = Timer 'for debug
'Debug.Print "func_KeisanKakuninsho_RAFI        : " & (dblE - dblS) 'for debug
    
        If blnRet = False Or lngErrorCnt <> 0 Then
            GoTo FileClose
            Exit Function
        End If
        
'dblS = Timer 'for debug
    
        ' データファイルの行毎にデータ取得
        blnRet = False
        blnRet = func_CompleteDataFile(strFileName _
                                     , GI_STRCT _
                                     , strNamInfo() _
                                     , lngErrorCnt)
        If blnRet = False Or lngErrorCnt <> 0 Then
            GoTo FileClose
            Exit Function
        End If
        
'dblE = Timer 'for debug
'Debug.Print "func_CompleteDataFile        : " & (dblE - dblS) 'for debug
        
        .Worksheets(DATASHEET_DATA).Visible = True
        .Worksheets(DATASHEET_DATA).Select

        'データシートの元シートを削除する。
        ThisWorkbook.Application.DisplayAlerts = False
        .Worksheets(DATASHEET_TEMP_DATA).Delete
        ThisWorkbook.Application.DisplayAlerts = True
    
    
        'データファイルを保存して閉じる
        .Close savechanges:=True
    
    End With

    func_TorikomiMain = True

Exit Function
    
FileClose:
    ThisWorkbook.Application.DisplayAlerts = False
    'データファイルを保存して閉じる
    Workbooks(strFileName).Close savechanges:=True
    
    Exit Function
    
ErrHandler:

    func_TorikomiMain = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function





'*************************************************************************
'関数名　　：データシート列追加
'
'引　　数　：
'           strbookName     I       コピー元ブック
'           strSheetName    I       コピー元シート
'           strChikanMae    I       シート名の置換検索文字
'           strChikanAto    I       シート名の置換文字
'           strOffSet       I       行番号にせっていする
'           lngStartRow     O       開始行
'           lngEndRow       O       終了行
'           lngErrorCnt     O       エラー数
'           strCellName     I       置換列セル
'           lngDelStRow     I       削除開始行
'           lngDelEdRow     O       削除終了行
'
'
'戻り値　　：
'
'機能説明　：データシートに指定された資産の列を追加する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Sub sub_AddSheetItemRow(ByVal strBookName As String _
                              , ByVal strSheetName As String _
                              , ByRef strChikanMae As String _
                              , ByRef strChikanAto As String _
                              , ByRef strOffSet As String _
                              , ByRef lngStartRow As Long _
                              , ByRef lngEndRow As Long _
                              , ByRef lngErrorCnt As Long _
                              , Optional ByVal strCellName As String = "" _
                              , Optional ByVal lngDelStRow As Long = 0 _
                              , Optional ByVal lngDelEdRow As Long = 0)
    
On Error GoTo ErrHandler
    
    Const PROCEDURE_NAME    As String = "sub_AddSheetItemRow"
    Dim lngTmpStartRow      As Long
    Dim lngTmpEndRow        As Long
    Dim blnRet              As Boolean
    Dim ErrNumber           As String
    Dim ErrDescription      As String
    
    ErrNumber = ""
    ErrDescription = ""
'*******************************************************
'* 関数開始　                                        　*
'*******************************************************
    
    'テンプレートシートの開始行を求める
    lngTmpStartRow = func_GetStartRow(strBookName, DATASHEET_TEMP_DATA, strSheetName, lngErrorCnt)
    
    'テンプレートシートの最終行を求める
    lngTmpEndRow = func_GetEndRow(strBookName, DATASHEET_TEMP_DATA, lngErrorCnt, strSheetName)
    
    'データシートへの列の追加処理とA列名変更
    blnRet = func_RowCopyPast(strBookName _
                        , DATASHEET_TEMP_DATA _
                        , lngTmpStartRow _
                        , lngTmpEndRow _
                        , DATASHEET_DATA _
                        , strChikanMae _
                        , strChikanAto _
                        , strOffSet _
                        , lngStartRow _
                        , lngEndRow _
                        , strCellName _
                        , ErrNumber _
                        , ErrDescription)
                        
    If blnRet = False Then
        'エラー情報構造体セット
        With gusrErr
            .ModuleId = MODULE_NAME         'モジュール名
            .Procedure = PROCEDURE_NAME     'プロシージャ名
            .ErrNum = ErrNumber             'エラー番号
            .ErrDescript = "行貼り付け関数(func_RowCopyPast)でエラー発生"  'エラー概要
            .GI_NAME = ""                   '外部委託先
            .KohzaNo = ""                   '口座番号
            'エラーメッセージ
            .MsgNaiyou = PROCEDURE_NAME & "内の関数func_RowCopyPastでエラー発生" & vbCrLf
            'メッセージ詳細
            .MsgSyousai = "Err.Number:" & ErrNumber & vbCrLf & _
                          "Err.Description：" & ErrDescription & vbCrLf
        End With
        'エラーシート書き込み
        Call fncWriteErrSheet(ERROR_SHEETNAME)
        lngErrorCnt = lngErrorCnt + 1
        
        Exit Sub
    End If
                        
    '指定行を削除する。
    If lngDelStRow <> 0 And lngDelEdRow <> 0 And lngDelStRow <= lngDelEdRow Then
        With Workbooks(strBookName).Worksheets(DATASHEET_DATA)
            .Range(lngStartRow + lngDelStRow & ":" & lngStartRow + lngDelEdRow).Delete Shift:=xlUp
        End With
        lngEndRow = lngEndRow - (lngDelEdRow - lngDelStRow + 1)
    End If
                       
Exit Sub

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    ErrNumber = Err.Number
    ErrDescription = ThisWorkbook.Name & "\" & MODULE_NAME & "\" & PROCEDURE_NAME & vbCrLf & Err.Description
'---- Error Log End   ----------------------------------------------------
    'エラー情報構造体セット
    With gusrErr
        .ModuleId = MODULE_NAME         'モジュール名
        .Procedure = PROCEDURE_NAME     'プロシージャ名
        .ErrNum = ErrNumber             'エラー番号
        .ErrDescript = "データシート列追加関数でシステムエラー発生"  'エラー概要
        .GI_NAME = ""                   '外部委託先
        .KohzaNo = ""                   '口座番号
        'エラーメッセージ
        .MsgNaiyou = PROCEDURE_NAME & "内でシステムエラー発生" & vbCrLf
        'メッセージ詳細
        .MsgSyousai = "Err.Number:" & ErrNumber & vbCrLf & _
                     "Err.Description：" & ErrDescription & vbCrLf & _
                     "strSheetName：" & strSheetName
    End With
    'エラーシート書き込み
    Call fncWriteErrSheet(ERROR_SHEETNAME)
    lngErrorCnt = lngErrorCnt + 1
    
End Sub
'
'*************************************************************************
'関数名　　：列先頭取得関数
'
'引　　数　：
'           strbookName     I       対象ブック
'           strSheetName    I       対象シート
'           strName         I       検索する名前
'           lngErrorCnt     I       エラー数
'
'戻り値　　：行番号
'
'機能説明　：指定されたワークシートの列の先頭を求める
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Function func_GetStartRow(ByVal strBookName As String _
                                , ByVal strSheetName As String _
                                , ByVal strName As String _
                                , ByRef lngErrorCnt As Long) As Long
On Error GoTo ErrHandler

    Const PROCEDURE_NAME    As String = "func_GetStartRow"
    Dim lngRowCnt           As Long
    Dim lngRowEnd           As Long
    Dim ErrNumber           As String
    Dim ErrDescription      As String
    
'*******************************************************
'* 関数開始　                                        　*
'*******************************************************
    
    lngRowEnd = func_GetEndRow(strBookName, strSheetName, lngErrorCnt)
    
    With Workbooks(strBookName).Worksheets(strSheetName)
        For lngRowCnt = 1 To lngRowEnd
            If .Range(DATASHEET_SHEETNAME_COL & lngRowCnt).Value = strName Then
                Exit For
            End If
        Next lngRowCnt
    End With
    
    func_GetStartRow = lngRowCnt
Exit Function

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    ErrNumber = Err.Number
    ErrDescription = ThisWorkbook.Name & "\" & MODULE_NAME & "\" & PROCEDURE_NAME & vbCrLf & Err.Description
'---- Error Log End   ----------------------------------------------------
    'エラー情報構造体セット
    With gusrErr
        .ModuleId = MODULE_NAME         'モジュール名
        .Procedure = PROCEDURE_NAME     'プロシージャ名
        .ErrNum = ErrNumber             'エラー番号
        .ErrDescript = "列先頭取得関数でシステムエラー発生"  'エラー概要
        .GI_NAME = ""                   '外部委託先
        .KohzaNo = ""                   '口座番号
        'エラーメッセージ
        .MsgNaiyou = PROCEDURE_NAME & "内でシステムエラー発生" & vbCrLf
        'メッセージ詳細
        .MsgSyousai = "Err.Number       :" & ErrNumber & vbCrLf & _
                      "Err.Description  :" & ErrDescription & vbCrLf & _
                      "strSheetName     :" & strSheetName & vbCrLf & _
                      "lngRowCnt        :" & lngRowCnt & vbCrLf
    End With
    'エラーシート書き込み
    Call fncWriteErrSheet(ERROR_SHEETNAME)
    lngErrorCnt = lngErrorCnt + 1
    

    
End Function


'
'*************************************************************************
'関数名　　：末行取得関数
'
'引　　数　：
'           strbookName     I       対象ブック
'           strSheetName    I       対象シート
'           lngErrorCnt     I       エラー数
'           strName         I       検索する名前
'
'戻り値　　：行番号
'
'機能説明　：指定されたワークシートの列の最後行を求める
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Function func_GetEndRow(ByVal strBookName As String _
                             , ByVal strSheetName As String _
                             , ByRef lngErrorCnt As Long _
                             , Optional ByVal strName As String = "") As Long
On Error GoTo ErrHandler

    Const PROCEDURE_NAME    As String = "func_GetEndRow"
    Dim lngRowCnt           As Long
    Dim lngRowEnd           As Long
    Dim ErrNumber           As String
    Dim ErrDescription      As String

'*******************************************************
'* 関数開始　                                        　*
'*******************************************************
    
    
    lngRowEnd = Workbooks(strBookName).Worksheets(strSheetName).Range(DATASHEET_ITEMNAME_COL & "65536").End(xlUp).Row
    
    If Trim(strName) = "" Then
        If lngRowEnd = 1 Then
            lngRowEnd = 0
        End If
        func_GetEndRow = lngRowEnd
    Else
        With Workbooks(strBookName).Worksheets(strSheetName)
            For lngRowCnt = lngRowEnd + 1 To 1 Step -1
                If Trim(.Range(DATASHEET_SHEETNAME_COL & lngRowCnt).Text) = Trim(strName) Then
                    Exit For
                End If
            Next lngRowCnt
        End With
        func_GetEndRow = lngRowCnt
    End If
    
Exit Function

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    ErrNumber = Err.Number
    ErrDescription = ThisWorkbook.Name & "\" & MODULE_NAME & "\" & PROCEDURE_NAME & vbCrLf & Err.Description
'---- Error Log End   ----------------------------------------------------
    'エラー情報構造体セット
    With gusrErr
        .ModuleId = MODULE_NAME         'モジュール名
        .Procedure = PROCEDURE_NAME     'プロシージャ名
        .ErrNum = ErrNumber             'エラー番号
        .ErrDescript = "末行取得関数でシステムエラー発生"  'エラー概要
        .GI_NAME = ""                   '外部委託先
        .KohzaNo = ""                   '口座番号
        'エラーメッセージ
        .MsgNaiyou = PROCEDURE_NAME & "内でシステムエラー発生" & vbCrLf
        'メッセージ詳細
        .MsgSyousai = "Err.Number       :" & ErrNumber & vbCrLf & _
                      "Err.Description  :" & ErrDescription & vbCrLf & _
                      "strName          :" & strName & vbCrLf & _
                      "lngRowCnt        :" & lngRowCnt & vbCrLf
    End With
    'エラーシート書き込み
    Call fncWriteErrSheet(ERROR_SHEETNAME)
    lngErrorCnt = lngErrorCnt + 1
    
    
    
End Function

'
'*************************************************************************
'関数名　　：行コピー処理
'
'引　　数　：
'           strCpyBookName      I       コピー元ブック名
'           strCpySheetName     I       コピー元シート名
'           lngCpyStartRow      I       コピー範囲開始行
'           lngCpyEndRow        I       コピー範囲終了行
'           strPstSheetName     I       貼付シート名
'           strChikanMae        I       置換前文字列
'           strChikanAto        I       置換後文字列
'           strOffSet           I       行数(オフセット)
'           lngStartRow         O       貼付範囲開始行
'           lngEndRow           O       貼付範囲終了行
'           strCellName         I       置換列
'           ErrNumber           O       システムエラー番号
'           ErrDescription      O       システムエラー内容
'
'戻り値　　：なし
'
'機能説明　：コピー元シートの指定行(開始、終了)をコピーし
'           コピー先シートの最終行へ貼り付ける。Ａ列の名称変更する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Function func_RowCopyPast(ByVal strCpyBookName As String _
                                , ByVal strCpySheetName As String _
                                , ByVal lngCpyStartRow As Long _
                                , ByVal lngCpyEndRow As Long _
                                , ByVal strPstSheetName As String _
                                , ByRef strChikanMae As String _
                                , ByRef strChikanAto As String _
                                , ByRef strOffSet As String _
                                , ByRef lngStartRow As Long _
                                , ByRef lngEndRow As Long _
                                , ByVal strCellName As String _
                                , ByRef ErrNumber As String _
                                , ByRef ErrDescription As String) As Boolean
                          

On Error GoTo ErrHandler

    Const PROCEDURE_NAME    As String = "func_RowCopyPast"
    Dim lngPastRow          As Long
    Dim lngPastNum          As Long
    Dim lngRow              As Long
    Dim strCell             As String
    Dim lngErrorCnt         As Long
    
    func_RowCopyPast = False
    
'*******************************************************
'* 関数開始　                                        　*
'*******************************************************
    
    With Workbooks(strCpyBookName)
        '元シートからコピー
        .Worksheets(strCpySheetName).Rows(lngCpyStartRow & ":" & lngCpyEndRow).Copy
        
        'シートの終端(空行位置)を求める
        lngPastRow = func_GetEndRow(strCpyBookName, strPstSheetName, lngErrorCnt) + 1
        
        lngStartRow = lngPastRow                '貼付け開始行
        
        'シートに貼付け
        .Worksheets(strPstSheetName).Rows(lngPastRow & ":" & lngPastRow).Insert Shift:=xlDown
    
        '貼り付けた行数
        lngPastNum = lngCpyEndRow - lngCpyStartRow + 1
         
        lngEndRow = lngStartRow + lngPastNum - 1  '貼付け終了行
    
        '置換前文字列がNULLでない場合、置換後文字列で置換する。
        If Trim(strCellName) = "" Then
            strCell = DATASHEET_SHEETHEAD_COL      'ヘッダ部を置換
        Else
            strCell = strCellName
        End If
            
        .Worksheets(strPstSheetName). _
            Range(strCell & lngPastRow & ":" & strCell & lngPastRow + lngPastNum).Replace _
            What:=strChikanMae, Replacement:=strChikanAto, LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=False
        
        
        '行数(オフセット)がNULLでない場合、行数にオフセット値を代入する。
        If Trim(strOffSet) <> "" Then
            For lngRow = lngStartRow To lngEndRow
                .Worksheets(strPstSheetName).Range(DATASHEET_OFFSET_COL & lngRow).Value = strOffSet
            Next lngRow
        End If
        
    End With
    
    func_RowCopyPast = True
    
Exit Function
    
ErrHandler:

    func_RowCopyPast = False

'---- Error Log Start ----------------------------------------------------
    ErrNumber = Err.Number
    ErrDescription = ThisWorkbook.Name & "\" & MODULE_NAME & "\" & PROCEDURE_NAME & vbCrLf & Err.Description & _
                     "コピーシート名：" & strCpySheetName & vbCrLf & _
                     "コピー行　　　：" & lngCpyStartRow & " 〜 " & lngCpyEndRow & vbCrLf & _
                     "ペースト行　　：" & lngStartRow & " 〜 " & lngEndRow & vbCrLf & _
                     "オフセット値　：" & strOffSet

'---- Error Log End   ----------------------------------------------------
    
End Function


'*************************************************************************
'関数名　　：データシート固定情報の設定(計算期間期間)
'
'引　　数　：
'           strFileName     I       データシートファイル名
'           GI_STRCT        I       外部委託先構造体
'           GI_LETTER　　　 I       外部委託先レター構造体
'           GI_RATE_STRCT   I       外部委託先料率構造体
'           lngRateIndex    I       外部委託先料率構造体のインデックス
'           lngRow          I       条件を設定する開始行
'           lngErrorCnt     O       エラー数
'           lngKikanNo      I       期間番号
'
'戻り値　　：なし
'
'機能説明　：指定範囲内の「(＠＠＠)文字」を実際の値に置換する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Sub sub_SetJoukenData(ByVal strFileName As String _
                           , ByRef GI_STRCT As typGI_SHIHARAI_STRCT _
                           , ByRef GI_LETTER As typGI_LETTER_STRCT _
                           , ByRef GI_RATE_STRCT() As typGI_RATE_KIKAN_STRCT _
                           , ByVal lngRateIndex As Long _
                           , ByVal lngRow As Long _
                           , ByRef lngErrorCnt As Long _
                           , ByVal lngKikanNo As Long)
                            
On Error GoTo ErrHandler

    Const PROCEDURE_NAME    As String = "sub_SetJoukenData"
    Dim lngEnd              As Long
    Dim lngCnt              As Long
    Dim strWhat             As String
    Dim strReplace          As String
    Dim ErrNumber           As String
    Dim ErrDescription      As String
    
'*******************************************************
'* 関数開始　                                        　*
'*******************************************************
    

        
    lngEnd = func_GetEndRow(strFileName, DATASHEET_DATA, lngErrorCnt)
    
    For lngCnt = 1 To 5
        strWhat = ""
        strReplace = ""
        Select Case lngCnt
            Case 1
                strWhat = "(外部委託計算期間ＩＤ)"
                strReplace = GI_LETTER.GI_RATE_KIKAN_STRCT(lngRateIndex).GI_KEISAN_KIKAN_ID
            Case 2
                strWhat = "(口座番号)"
                strReplace = GI_LETTER.KOHZA_NO
            Case 3
                strWhat = "(銘柄コード)"
                strReplace = GI_LETTER.ISSCD
            Case 4
                strWhat = "(外部委託計算方法)"
                strReplace = GI_LETTER.GI_RATE_KIKAN_STRCT(lngRateIndex).GI_KEISAN_HOHHOH
            Case 5
                strWhat = "(シート名口座番号)"
                strReplace = Format(lngKikanNo, "000") & "_" & GI_LETTER.KOHZA_NO
        End Select
    
        Workbooks(strFileName).Worksheets(DATASHEET_DATA).Range(lngRow & ":" & lngEnd).Replace _
            What:=strWhat, Replacement:="'" & strReplace, LookAt:=xlPart, _
            SearchOrder:=xlByRows, MatchCase:=False
    
    Next lngCnt
    
Exit Sub

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    ErrNumber = Err.Number
    ErrDescription = ThisWorkbook.Name & "\" & MODULE_NAME & "\" & PROCEDURE_NAME & vbCrLf & Err.Description
'---- Error Log End   ----------------------------------------------------
    'エラー情報構造体セット
    With gusrErr
        .ModuleId = MODULE_NAME         'モジュール名
        .Procedure = PROCEDURE_NAME     'プロシージャ名
        .ErrNum = ErrNumber             'エラー番号
        .ErrDescript = "データシート固定情報の設定(計算期間期間)関数でシステムエラー発生"  'エラー概要
        .GI_NAME = GI_STRCT.GI_NAME                    '外部委託先
        .KohzaNo = ""                   '口座番号
        'エラーメッセージ
        .MsgNaiyou = PROCEDURE_NAME & "内でシステムエラー発生" & vbCrLf
        'メッセージ詳細
        .MsgSyousai = "Err.Number:" & ErrNumber & vbCrLf & _
                     "Err.Description：" & ErrDescription & vbCrLf & _
                     "lngCnt:" & lngCnt
    End With
    'エラーシート書き込み
    Call fncWriteErrSheet(ERROR_SHEETNAME)
    lngErrorCnt = lngErrorCnt + 1

End Sub


'*************************************************************************
'関数名　　：データシート固定情報の設定(支払期間)
'
'引　　数　：
'           strFileName     I       データシートファイル名
'           GI_STRCT        I       外部委託先構造体
'           lngStartRow     I       置換範囲開始行
'           lngEndRow       I       置換範囲終了行
'           lngErrorCnt     O       エラー数
'
'戻り値　　：なし
'
'機能説明　：指定範囲内の「(＠＠＠)文字」を実際の値に置換する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Sub sub_ReplaceKeyItem(ByVal strFileName As String _
                            , ByRef GI_STRCT As typGI_SHIHARAI_STRCT _
                            , ByVal lngStartRow As Long _
                            , ByVal lngEndRow As Long _
                            , ByRef lngErrorCnt As Long)
On Error GoTo ErrHandler

    Const PROCEDURE_NAME    As String = "sub_ReplaceKeyItem"
    Dim lngCnt              As Long
    Dim strOldName          As String
    Dim strNewName          As String
    Dim ErrNumber           As String
    Dim ErrDescription      As String
    
'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

    
    For lngCnt = 1 To 5

        Select Case lngCnt
        Case 1
            strOldName = "(外部委託先番号)"
            strNewName = "'" & GI_STRCT.GI_NO
        Case 2
            strOldName = "(外部委託支払期間ＩＤ)"
            strNewName = GI_STRCT.GI_SHIHARAI_KIKAN_ID
        Case 3
            strOldName = "(支払フラグ)"
            strNewName = "1"    '固定値
        Case 4
            strOldName = "(計算ＴＯ日)"
            strNewName = GI_STRCT.GI_SHIHARAI_KIKAN_TO
        Case 5
            strOldName = "(外部委託先名)"
            strNewName = "'" & GI_STRCT.GI_NAME & "レター"
        
        End Select
        
        Workbooks(strFileName).Worksheets(DATASHEET_DATA).Rows(lngStartRow & ":" & lngEndRow).Replace _
            What:=strOldName, Replacement:=strNewName _
            , LookAt:=xlWhole, SearchOrder:=xlByRows, MatchCase:=True
            
    Next lngCnt

Exit Sub

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    ErrNumber = Err.Number
    ErrDescription = ThisWorkbook.Name & "\" & MODULE_NAME & "\" & PROCEDURE_NAME & vbCrLf & Err.Description
'---- Error Log End   ----------------------------------------------------
    'エラー情報構造体セット
    With gusrErr
        .ModuleId = MODULE_NAME         'モジュール名
        .Procedure = PROCEDURE_NAME     'プロシージャ名
        .ErrNum = ErrNumber             'エラー番号
        .ErrDescript = "データシート固定情報の設定(支払期間)関数でシステムエラー発生"  'エラー概要
        .GI_NAME = GI_STRCT.GI_NAME                    '外部委託先
        .KohzaNo = ""                   '口座番号
        'エラーメッセージ
        .MsgNaiyou = PROCEDURE_NAME & "内でシステムエラー発生" & vbCrLf
        'メッセージ詳細
        .MsgSyousai = "Err.Number:" & ErrNumber & vbCrLf & _
                     "Err.Description：" & ErrDescription & vbCrLf & _
                     "lngCnt:" & lngCnt
    End With
    'エラーシート書き込み
    Call fncWriteErrSheet(ERROR_SHEETNAME)
    lngErrorCnt = lngErrorCnt + 1

End Sub



'
'*************************************************************************
'関数名　　：データ取得処理
'
'引　　数　：
'           strFileName         I       データシートファイル名
'           strNamInfo()        I       NAM情報(EXCELファイルから読み込んだもの)
'           lngErrorCnt         O       エラー数
'
'戻り値　　：Boolean
'
'機能説明　：データシートを毎行毎に処理する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Function func_CompleteDataFile(ByVal strFileName As String _
                                     , ByRef GI_STRCT As typGI_SHIHARAI_STRCT _
                                     , ByRef strNamInfo() As String _
                                     , ByRef lngErrorCnt As Long _
                                     , Optional lngStartRow As Long = 1) As Boolean
On Error GoTo ErrHandler

    Const PROCEDURE_NAME        As String = "func_CompleteDataFile"
    Dim ErrNumber               As String       'システムエラー番号
    Dim ErrDescription          As String       'システムエラーメッセージ
    Dim lngCnt                  As Long         '汎用カウンタ
    Dim lngEndRows              As Long         '処理終了行番号
    Dim lngCurRows              As Long         '処理対象行番号(カウンタ)
    Dim strSql                  As String       'Sql
    Dim strFilter               As String       'フィルター
    Dim vdata()                 As Variant
    Dim lngCol                  As Long
    Dim lngRow                  As Long



    func_CompleteDataFile = False

    'シートの最終行取得
    lngEndRows = func_GetEndRow(strFileName, DATASHEET_DATA, lngErrorCnt)

    With Workbooks(strFileName).Worksheets(DATASHEET_DATA)

        '明細行分繰り返し
        For lngCurRows = lngStartRow To lngEndRows
'Dim dblS, dblE 'for debug
'    dblS = Timer

            Select Case .Range(DATASHEET_DATA_TYPE & lngCurRows).Value
            Case "条件"
            '「条件」の場合
                '処理なし

            Case "FILE"

                For lngCnt = 1 To UBound(strNamInfo)

                    'カラム名とNAM情報のカラム名が一致した値を結果に設定する。
                    If strNamInfo(lngCnt, 0) = .Range(DATASHEET_ITEMNAME_COL & lngCurRows).Value Then
                        .Range(DATASHEET_RESULT_COL & lngCurRows).Value = strNamInfo(lngCnt, 1)
                    End If
                Next lngCnt

            Case "検索"

                'SQLの作成
                strSql = ""
                Call sub_MakeDataSheetSql(strFileName, lngCurRows, strSql, strFilter, ErrNumber, ErrDescription)
                If Trim(strSql) = "" Then
                        
                    'エラー情報構造体セット
                    With gusrErr
                        .ModuleId = MODULE_NAME         'モジュール名
                        .Procedure = PROCEDURE_NAME     'プロシージャ名
                        .ErrNum = ErrNumber             'エラー番号
                          'エラー概要
                        .ErrDescript = "データ取得SQL作成でエラーが発生しました。" & vbCrLf & "sub_MakeDataSheetSql"
                        .GI_NAME = GI_STRCT.GI_NAME     '外部委託先
                        '口座番号
                        .KohzaNo = ""
                        'エラーメッセージ
                        With Workbooks(strFileName).Worksheets(DATASHEET_DATA)
                        .MsgNaiyou = "Err.Number:" & ErrNumber & vbCrLf & _
                                     "Err.Description：" & ErrDescription & vbCrLf & _
                                     "データシートから作成したSQLがありません。 " _
                                    & "テンプレートを確認して下さい。" & vbCrLf _
                                    & "ファイル名　：" & strFileName & vbCrLf _
                                    & "行番号　　　：" & lngCurRows & "行目" & vbCrLf _
                                    & "シート名　　：" & .Range(DATASHEET_SHEETHEAD_COL & lngCurRows).Text _
                                                       & .Range(DATASHEET_SHEETNAME_COL & lngCurRows).Text & vbCrLf _
                                    & "カラム名　　：" & .Range(DATASHEET_ITEMNAME_COL & lngCurRows).Text & vbCrLf _
                                    & "SQL         :" & strSql
                        End With
                    End With
                    
                    'エラーシート書き込み
                    Call fncWriteErrSheet(ERROR_SHEETNAME)
                    lngErrorCnt = lngErrorCnt + 1
                    
                End If

                'データ取得
                If Trim(strSql) <> "" Then
                    Call gclsDB.DoExequteSql(gcSELECT, strSql, vdata, lngCol, lngRow)
                
                    If lngRow = 0 Then
                    'データなし
                        Erase vdata
                        
                        'エラー情報構造体セット
                        With gusrErr
                            .ModuleId = MODULE_NAME         'モジュール名
                            .Procedure = PROCEDURE_NAME     'プロシージャ名
                            .ErrNum = ErrNumber             'エラー番号
                              'エラー概要
                            .ErrDescript = "データ取得SQL作成でエラーが発生しました。" & vbCrLf & "sub_MakeDataSheetSql"
                            .GI_NAME = GI_STRCT.GI_NAME     '外部委託先
                            '口座番号
                            .KohzaNo = ""
                            'エラーメッセージ
                            .MsgNaiyou = "データシートから作成したSQLの結果が０件でした。" & vbCrLf _
                                    & "作成されたデータシートの該当行を確認して下さい。" & vbCrLf _
                                    & "ファイル名：" & strFileName & vbCrLf _
                                    & "処理行　　：" & lngCurRows & "行目" & vbCrLf _
                                    & "シート名　：" & Workbooks(strFileName).Worksheets(DATASHEET_DATA).Range(DATASHEET_SHEETHEAD_COL & lngCurRows) & vbCrLf _
                                                     & Workbooks(strFileName).Worksheets(DATASHEET_DATA).Range(DATASHEET_SHEETNAME_COL & lngCurRows) & vbCrLf _
                                    & "カラム名  ：" & Workbooks(strFileName).Worksheets(DATASHEET_DATA).Range(DATASHEET_ITEMNAME_COL & lngCurRows) & vbCrLf _
                                    & "ＳＱＬ文　：" & strSql                'メッセージ詳細
                        End With
                        
                        'ログに書き込み
                        Call sub_ErrLogOutPut

                        'エラーシート書き込み
'                        Call fncWriteErrSheet(ERROR_SHEETNAME)
'                        lngErrorCnt = lngErrorCnt + 1
                    Else
                    'データあり
                        .Range(DATASHEET_RESULT_COL & lngCurRows).Value = "" & Trim(CStr(vdata(0, 0)))
                    End If
                End If
                strSql = ""

            Case "変数"
                '処理なし
            Case "計算"
                '処理なし
            Case "固定"
                '処理なし
            End Select
'dblE = Timer
'.Range("AI" & lngCurRows).Value = dblE - dblS


        Next lngCurRows

        .Columns(DATASHEET_RESULT_COL & ":" & DATASHEET_RESULT_COL).EntireColumn.AutoFit

        .Columns(DATASHEET_ITEMNAME_COL & ":" & DATASHEET_ITEMNAME_COL).EntireColumn.AutoFit

    End With


    Erase vdata


    If lngErrorCnt = 0 Then

        func_CompleteDataFile = True
    End If


    Exit Function

ErrHandler:
'MsgBox "error!!" & Err.Description
'Resume
    func_CompleteDataFile = False

    Erase vdata

    With gusrErr
        .ModuleId = MODULE_NAME         'モジュール名
        .Procedure = PROCEDURE_NAME     'プロシージャ名
        .ErrNum = ErrNumber             'エラー番号
          'エラー概要
        .ErrDescript = "データ取得処理でシステムエラーが発生しました。"
        .GI_NAME = GI_STRCT.GI_NAME     '外部委託先
        '口座番号
        .KohzaNo = ""
        'エラーメッセージ
        .MsgNaiyou = "Err.Number:" & Err.Number & vbCrLf & _
                     "Err.Description：" & Err.Description & vbCrLf & _
                     "データ取得処理でシステムエラーが発生しました。" & vbCrLf _
                    & "システム管理者に連絡して下さい。" & vbCrLf _
                    & "作成中ファイル名       :" & strFileName & vbCrLf _
                    & "SQL:" & strSql
    End With

    'エラーシート書き込み
    Call fncWriteErrSheet(ERROR_SHEETNAME)
    lngErrorCnt = lngErrorCnt + 1

End Function

'
'*************************************************************************
'関数名　　：データシート検索SQL作成
'
'引　　数　：
'           strFileName     I       対象EXCEL名
'           lngCurRows      I       対象行
'           strSql          O       検索SQL
'           strFilter       O       Filter文
'           ErrNumber       O       システムエラー番号
'           ErrDescription  O       システムエラー内容
'
'戻り値　　：なし
'
'機能説明　：データシートの行毎SQL作成
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'更新履歴　：2008/08/29 SRA Y.Azuma    変更   連結障害対応(No.21)
'
'*************************************************************************
Private Sub sub_MakeDataSheetSql(ByVal strFileName As String _
                               , ByVal lngCurRows As Long _
                               , ByRef strSql As String _
                               , ByRef strFilter As String _
                               , ByRef ErrNumber As String _
                               , ByRef ErrDescription As String)
On Error GoTo ErrHandler

    Const PROCEDURE_NAME    As String = "sub_MakeDataSheetSql"
    Dim strTableName        As String
    Dim strGetItem          As String
    Dim strKeyItem()        As String
    Dim vKeyItem            As Variant
    Dim lngCnt              As Long
    Dim strWhere            As String
    Dim lngItem             As Long
    
    Const KEY_ITEM = 11
    lngItem = 0
    strWhere = ""
    
    
    ReDim strKeyItem(KEY_ITEM, 2)
    
'*******************************************************
'* 関数開始　                                        　*
'*******************************************************
    
    
    With Workbooks(strFileName).Worksheets(DATASHEET_DATA)
    
        strTableName = .Range(DATASHEET_TID_COL & lngCurRows).Text
        strGetItem = .Range(DATASHEET_COLID_COL & lngCurRows).Text
    
        vKeyItem = .Range(DATASHEET_KEY_START & lngCurRows & ":AH" & lngCurRows)
        For lngCnt = 1 To 12
            'キー項目
            If Trim(vKeyItem(1, lngCnt * 2)) <> "" Then
                strKeyItem(lngItem, 1) = Trim(vKeyItem(1, lngCnt * 2 - 1))
                'キー項目値
                strKeyItem(lngItem, 2) = Trim(vKeyItem(1, lngCnt * 2))
                lngItem = lngItem + 1
            End If
            
        Next lngCnt
    
    End With
    
    strSql = ""
    strSql = strSql & " SELECT "
    strSql = strSql & "     " & strGetItem
    strSql = strSql & " FROM "
    strSql = strSql & "     " & strTableName
    strSql = strSql & " WHERE "
    
    For lngCnt = 0 To UBound(strKeyItem) 'KEY_ITEM
    
        If Trim(strKeyItem(lngCnt, 1)) <> "" Then
            
            If Trim(strWhere) <> "" Then
                strWhere = strWhere & " AND "
            End If
            
'------------<Modify Start azuma 2008/08/29 > 連結障害対応(No.21)-----------------------
            strWhere = strWhere & strKeyItem(lngCnt, 1) & " = '" & func_ChkQuoteshon(strKeyItem(lngCnt, 2), "'") & "' "
'''            strWhere = strWhere & strKeyItem(lngCnt, 1) & " = '" & strKeyItem(lngCnt, 2) & "' "
'------------<Modify End   azuma 2008/08/29 > 連結障害対応(No.21)-----------------------
            
        End If
    
    Next lngCnt
    
    strSql = strSql & strWhere
    strFilter = strWhere
    
Exit Sub

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    ErrNumber = Err.Number
    ErrDescription = ThisWorkbook.Name & "\" & MODULE_NAME & "\" & PROCEDURE_NAME & vbCrLf & Err.Description
'---- Error Log End   ----------------------------------------------------
End Sub



'*************************************************************************
'関数名　　：データシート行増幅関数
'
'引　　数　：
'           strFileName     I       処理対象シート名
'           lngStartRow     I       検索開始行
'           lngEndRow       I       検索終了行
'           strSearchName   I       検索文字
'           strData()       I       「データ項目」設定データ
'           lngErrorCnt     O       エラー数
'           lngOffSet       I       任意開始行数
'
'戻り値　　：なし
'
'機能説明　：
'
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Sub sub_RowIncrement(ByVal strFileName As String _
                           , ByVal lngStartRow As Long _
                           , ByVal lngEndRow As Long _
                           , ByVal strSearchName As String _
                           , ByRef strData() As String _
                           , ByRef lngErrorCnt As Long _
                           , Optional ByVal lngOffSet As Long = 0)
                           
On Error GoTo ErrHandler

    Const PROCEDURE_NAME    As String = "sub_RowIncrement"
    
    Dim lngRowIncCnt        As Long
    Dim lngCopyStartRow     As Long
    Dim lngCopyEndRow       As Long
    Dim lngSearchCnt        As Long
    Dim valRet              As Variant
    Dim lngDataCnt          As Long
    Dim lngPastRow          As Long
    Dim ErrNumber           As String
    Dim ErrDescription      As String
    Dim strMsgShori         As String
    
    lngCopyStartRow = 65536 'lngEndRow
    lngCopyEndRow = lngStartRow
    strMsgShori = ""

'*******************************************************
'* 関数開始　                                        　*
'*******************************************************
    
    With Workbooks(strFileName).Worksheets(DATASHEET_DATA)
        'コピーする行の開始終了を求める
        strMsgShori = "コピーする行の開始終了を求める"
        For lngSearchCnt = lngStartRow To 65536
            If Trim(.Range(DATASHEET_ITEMNAME_COL & lngSearchCnt).Text) <> "" Then
                valRet = InStr(CStr(.Range(DATASHEET_ITEMNAME_COL & lngSearchCnt).Text), strSearchName)
                If IsNull(valRet) = False Then
                    If Trim(valRet) <> "" And Trim(valRet) <> "0" And lngCopyStartRow > lngSearchCnt Then
                        lngCopyStartRow = lngSearchCnt
                    End If
                    
                    If Trim(valRet) > 0 Then
                        lngCopyEndRow = lngSearchCnt
                    End If
                End If
            Else
                Exit For
            End If
            
        Next lngSearchCnt
        
        lngPastRow = lngCopyStartRow
        '設定データ数分、行をコピーして増やす
        strMsgShori = "設定データ数分、行をコピーして増やす"
        For lngRowIncCnt = 0 To UBound(strData)
        
            '行コピー＆ペースト
            If lngRowIncCnt > 0 Then
                .Rows(lngCopyStartRow & ":" & lngCopyEndRow).Copy
                lngPastRow = lngCopyEndRow + 1 + ((lngRowIncCnt - 1) * (lngCopyEndRow - lngCopyStartRow + 1))
                .Rows(lngPastRow & ":" & lngPastRow).Insert Shift:=xlDown
                .Range(DATASHEET_RESULT_COL & lngPastRow & ":" & DATASHEET_OFFSET_COL & (lngPastRow + (lngCopyEndRow - lngCopyStartRow + 1))).Value = ""
            End If
            
            '「データ項目」と「行数」に値設定
            For lngDataCnt = 0 To (lngCopyEndRow - lngCopyStartRow)
                
                
                If .Range(DATASHEET_SHEETNAME_COL & (lngDataCnt + lngPastRow)) = DATASHEET_RAFI_LETTER_LIST _
                Or .Range(DATASHEET_SHEETNAME_COL & (lngDataCnt + lngPastRow)) = DATASHEET_RAFI_KOHZA_BT_KIKANRATE Then
                '「RAFIレター」の料率段階表示
                    .Range(DATASHEET_RESULT_COL & (lngDataCnt + lngPastRow)).Value = strData(lngRowIncCnt, lngDataCnt)
                    
                Else
                    .Range(DATASHEET_KEYEND_COL & (lngDataCnt + lngPastRow)).Value = strData(lngRowIncCnt, 0)
                    
                End If
                
                If lngOffSet >= 0 Then
                    .Range(DATASHEET_OFFSET_COL & (lngDataCnt + lngPastRow)).Value = lngRowIncCnt + lngOffSet
                Else
                '任意開始行数が負の場合、行数に値を設定しない
                    .Range(DATASHEET_OFFSET_COL & (lngDataCnt + lngPastRow)).Value = ""
                End If
            Next lngDataCnt
        
        Next lngRowIncCnt
    
    End With

    Set valRet = Nothing

Exit Sub

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    ErrNumber = Err.Number
    ErrDescription = ThisWorkbook.Name & "\" & MODULE_NAME & "\" & PROCEDURE_NAME & vbCrLf & Err.Description
'---- Error Log End   ----------------------------------------------------
    'エラー情報構造体セット
    With gusrErr
        .ModuleId = MODULE_NAME         'モジュール名
        .Procedure = PROCEDURE_NAME     'プロシージャ名
        .ErrNum = ErrNumber             'エラー番号
        .ErrDescript = "データシート行増幅関数でシステムエラー発生"  'エラー概要
        .GI_NAME = ""                   '外部委託先
        .KohzaNo = ""                   '口座番号
        'エラーメッセージ
        .MsgNaiyou = PROCEDURE_NAME & "内でシステムエラー発生" & vbCrLf
        'メッセージ詳細
        .MsgSyousai = "Err.Number       :" & ErrNumber & vbCrLf & _
                      "Err.Description  :" & ErrDescription & vbCrLf & _
                      "strMsgShori      :" & strMsgShori & vbCrLf & _
                      "lngStartRow      :" & lngStartRow & vbCrLf & _
                      "lngEndRow        :" & lngEndRow & vbCrLf & _
                      "strSearchName    :" & strSearchName & vbCrLf & _
                      "lngRowIncCnt     :" & lngRowIncCnt & vbCrLf & _
                      "lngDataCnt       :" & lngDataCnt & vbCrLf & _
                      "lngCopyStartRow  :" & lngCopyStartRow & vbCrLf & _
                      "lngCopyEndRow    :" & lngCopyEndRow & vbCrLf
    End With
    'エラーシート書き込み
    Call fncWriteErrSheet(ERROR_SHEETNAME)
    lngErrorCnt = lngErrorCnt + 1
    
    Set valRet = Nothing

End Sub


'*************************************************************************
'関数名　　：データソート処理
'
'引　　数　：
'           strFileName       I       処理対象ブック
'           lngStartRow       I       処理対象開始行
'           lngEndRow         I       処理対象終了行
'
'戻り値　　：なし
'
'機能説明　：
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Sub sub_SortDataSheet(ByVal strFileName As String _
                           , ByRef lngErrorCnt As Long _
                  , Optional ByVal lngStartRow As Long = 2 _
                  , Optional ByVal lngEndRow As Long = 0)
    
    Dim lngStart    As Long
    Dim lngEnd      As Long
    
    lngStart = lngStartRow
    If lngEndRow = 0 Then
        lngEnd = func_GetEndRow(strFileName, DATASHEET_DATA, lngErrorCnt)
    Else
        lngEnd = lngEndRow
    End If

    With Workbooks(strFileName).Worksheets(DATASHEET_DATA)
        .Range(lngStart & ":" & lngEnd).Sort Key1:=Range(DATASHEET_DOCSEQ_COL & lngStart), Order1:=xlAscending _
                     , Key2:=Range(DATASHEET_SHEETHEAD_COL & lngStart), Order2:=xlAscending _
                     , Key3:=Range(DATASHEET_OFFSET_COL & lngStart), Order3:=xlAscending _
                     , Header:=xlNo, OrderCustom:=1 _
                     , MatchCase:=False, Orientation:=xlTopToBottom _
                     , SortMethod:=xlPinYin
    End With
End Sub


'*************************************************************************
'関数名　　：任意セル値設定関数
'
'引　　数　：
'           strbookName     I       対象ブック名
'           strSheetName    I       対象シート名
'           lngStartRow     I       開始行
'           lngEndRow       I       終了行
'           strColName      I       列指定
'           strValue        I       設定値
'           lngErrorCnt     O       エラー数
'
'戻り値　　：
'
'機能説明　：データシートの指定列に任意値を設定する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Sub sub_FillinMultItem(ByVal strBookName As String _
                              , ByVal strSheetName As String _
                              , ByRef lngStartRow As Long _
                              , ByRef lngEndRow As Long _
                              , ByRef strColName As String _
                              , ByRef strValue As String _
                              , ByRef lngErrorCnt As Long)
    
On Error GoTo ErrHandler
    
    Const PROCEDURE_NAME    As String = "sub_FillinMultItem"
    Dim lngRow              As Long
    Dim ErrNumber           As String
    Dim ErrDescription      As String

'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

    For lngRow = lngStartRow To lngEndRow
        Workbooks(strBookName).Sheets(strSheetName).Range(strColName & lngRow).Value = strValue
    Next lngRow
        
Exit Sub

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    ErrNumber = Err.Number
    ErrDescription = ThisWorkbook.Name & "\" & MODULE_NAME & "\" & PROCEDURE_NAME & vbCrLf & Err.Description
'---- Error Log End   ----------------------------------------------------
    'エラー情報構造体セット
    With gusrErr
        .ModuleId = MODULE_NAME         'モジュール名
        .Procedure = PROCEDURE_NAME     'プロシージャ名
        .ErrNum = ErrNumber             'エラー番号
        .ErrDescript = "任意セル値設定関数でシステムエラー発生"  'エラー概要
        .GI_NAME = ""                    '外部委託先
        .KohzaNo = ""                   '口座番号
        'エラーメッセージ
        .MsgNaiyou = PROCEDURE_NAME & "内でシステムエラー発生" & vbCrLf
        'メッセージ詳細
        .MsgSyousai = "Err.Number:" & ErrNumber & vbCrLf & _
                      "Err.Description：" & ErrDescription & vbCrLf & _
                      "lngStartRow:" & lngStartRow & vbCrLf & _
                      "lngEndRow:" & lngEndRow & vbCrLf & _
                      "strColName:" & strColName & vbCrLf & _
                      "strValue:" & strValue
    End With
    'エラーシート書き込み
    Call fncWriteErrSheet(ERROR_SHEETNAME)
    lngErrorCnt = lngErrorCnt + 1

End Sub
