Attribute VB_Name = "bas50Kakuninsho"
Option Explicit
'*************************************************************************
'
'プロジェクト名：外部委託ライセンスフィー算出システム・計算確認書作成指示
'
'オブジェクト名：bas50Kakuninsho
'
'機能概要　：帳票作成処理
'
'更新履歴　：2008/06/30 SRA 東       新規作成
'
'*************************************************************************

Const MODULE_NAME = "bas50Kakuninsho"

'****************************************************
'* ワークシート関数削除定義
'****************************************************
Public Const gCOPY_RANGE = "A1:AY400"   '計算確認書の式を値に変換する為のコピー範囲
Public Const gCOPY_DEBUG_FLG = False    'True:関数を削除しない、False:関数を削除し値のみする。（通常はこっち）


'*************************************************************************
'関数名　　：計算確認書作成処理メイン
'
'引　　数　：
'           GI_STRCT          I       処理対象外部委託先構造体
'           strOutputDir      I       出力先フォルダ
'           strFileName       I       データファイル名(Pathなし)
'           strSeiFileName    I       計算確認書ファイル名(Pathなし)
'           lngErrorCnt       O       エラー数
'
'戻り値　　：Boolean
'
'機能説明　：実際の計算確認書作成のメイン関数
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Function func_KakuninshoMain(ByRef GI_STRCT As typGI_SHIHARAI_STRCT _
                                 , ByVal strOutputDir As String _
                                 , ByVal strFileName As String _
                                 , ByVal strSeiFileName As String _
                                 , ByRef lngErrorCnt As Long) As Boolean
On Error GoTo ErrHandler

    Const PROCEDURE_NAME    As String = "func_KakuninshoMain"

    Dim blnRet              As Boolean
    
    '計算確認書ファイル作成処理
    blnRet = func_MakeSeikyuFile(GI_STRCT, strOutputDir, strFileName, strSeiFileName, lngErrorCnt)
    If blnRet = False Then
        Call gfunc_ErrorMsg(3, 20160, "func_MakeSeikyuFile", "")
        lngErrorCnt = lngErrorCnt + 1
        Exit Function
    End If
    

    func_KakuninshoMain = True
    Exit Function
    
    
ErrHandler:

    func_KakuninshoMain = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
' MsgBox "Error!!" & Err.Description
' Resume
    On Error GoTo 0

'@    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

On Error Resume Next
    
    '計算確認書ファイルCLOSE
    ThisWorkbook.Application.DisplayAlerts = False
    Workbooks(strSeiFileName).Close savechanges:=True
    ThisWorkbook.Application.DisplayAlerts = True

End Function



'*************************************************************************
'関数名　　：TEMPLATEシート名取得
'
'引　　数　：ARG1   I   strDataSeetName 編集前のシート名
'　　　　　：ARG2   O   strTempSeetName 編集後のシート名
'
'戻り値　　：エラー番号
'
'機能説明　：指定されたシート名から"・"以降の文字を取り除く
'           ex)"計算確認書・全体" -> "計算確認書"
'
'更新履歴　：2008/06/16 SRA Y.Azuma    変更   外部委託ライセンスフィー算出対応
'
'*************************************************************************
Private Function fncGetTempSeetName( _
            ByVal strSrcSheetName As String, _
            ByRef strDstSheetName As String) As Long

On Error GoTo ErrHandler
    
    Const PROCEDURE_NAME    As String = "fncGetTempSeetName"
    Dim intPos              As Integer
    
    fncGetTempSeetName = 0
    strDstSheetName = ""
  
    intPos = InStr(strSrcSheetName, "・")
    If intPos > 0 Then
        strDstSheetName = Mid(strSrcSheetName, 1, intPos - 1)
    Else
        strDstSheetName = strSrcSheetName
    End If

Exit Function

ErrHandler:
    fncGetTempSeetName = Err.Number
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function



'*************************************************************************
'関数名　　：名前付きセルの列番号取得
'
'引　　数　：ARG1   I   strBookName     ワークブック名
'　　　　　：ARG2   I   strSheetName    ワークシート名
'　　　　　：ARG3   I   lngRowNo        行番号
'　　　　　：ARG4   O   aryNameCol      列番号配列
'
'戻り値　　：エラー番号
'
'機能説明　：指定された行に存在する名前付きセルの列番号を取得する
'
'更新履歴　：2008/06/16 SRA Y.Azuma    変更   外部委託ライセンスフィー算出対応
'
'*************************************************************************
Private Sub subGetNameCellColumn( _
            ByVal strBookName As String, _
            ByVal strSheetName As String, _
            ByVal lngRowNo As Long, _
            ByRef aryNameCol As Variant _
            )

    Dim lngCnt          As Long
    Dim myObject        As Object
    Dim myRange         As Range
    
On Error Resume Next
    
    ReDim aryNameCol(0)
    lngCnt = 0
    
    Set myRange = Workbooks(strBookName).Sheets(strSheetName).Range("A" & lngRowNo & ":IV" & lngRowNo)
    For Each myObject In myRange
        '以下条件の場合に列番号を保存
        '・値がセットされている
        '・名前が登録されている
        '・式が登録されていない
        If myObject.Value <> "" And InStr(myObject.Formula, "=") = 0 Then
            If myObject.Name <> vbNullString Then
                If Err.Number = 0 Then
                    lngCnt = lngCnt + 1
                    ReDim Preserve aryNameCol(lngCnt)
                    aryNameCol(lngCnt) = myObject.Column
                Else
                    Err.Clear
                End If
            End If
        End If
    Next
    On Error GoTo 0
    
    Set myObject = Nothing
    Set myRange = Nothing
    
    Exit Sub

End Sub

'*************************************************************************
'関数名　　：出力シートの初期設定
'
'引　　数　：ARG1   I   strBookName     ワークブック名
'　　　　　：ARG2   I   strSheetName    ワークシート名
'
'戻り値　　：エラー番号
'
'機能説明　：計算確認書ファイルのシートの初期設定を行う
'
'更新履歴　：2008/06/16 SRA Y.Azuma    変更   外部委託ライセンスフィー算出対応
'
'*************************************************************************
Private Sub subOutSheetIntialize( _
            ByVal strBookName As String, _
            ByVal strSheetName As String _
            )
On Error GoTo ErrorHandler

    Const PROCEDURE_NAME As String = "subOutSheetIntialize"

'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

    '計算確認書シートの表示設定
    With Workbooks(strBookName).Sheets(strSheetName)
        
        .Activate
        With Workbooks(strBookName).Application.ActiveWindow
            'ズーム
            .Zoom = OUT_SHEET_ZOOM
            
            '先頭にスクロール
            .ScrollRow = 1
            .ScrollColumn = 1
        End With
        .Cells(1, 1).Select
        
        'A1セルにカーソル移動
        .Range(OUT_SHEET_DEFAULT_CELL).Select
    
    End With

    Exit Sub

ErrorHandler:

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Sub




'*************************************************************************
'関数名　　：請求ファイル作成処理
'
'引　　数　：
'           GI_STRCT            I       処理対象外部委託先構造体
'           strOutputDir        I       出力先フォルダ
'           strDataFilaName     I       データシートファイル名
'           strSeiFilaName      I       計算確認書ファイル名
'           lngErrorCnt         O       エラー数
'
'戻り値　　：Boolean
'
'機能説明　：請求ファイルのテンプレート作成
'
'更新履歴　：2008/06/16 SRA Y.Azuma    変更   外部委託ライセンスフィー算出対応
'
'*************************************************************************
Private Function func_MakeSeikyuFile(ByRef GI_STRCT As typGI_SHIHARAI_STRCT _
                                   , ByVal strOutputDir As String _
                                   , ByVal strDataFileName As String _
                                   , ByVal strSeiFilaName As String _
                                   , ByRef lngErrorCnt As Long) As Boolean

On Error GoTo ErrHandler

    Const PROCEDURE_NAME        As String = "func_MakeSeikyuFile"

    Dim lngCnt                  As Long             '汎用カウンタ
    Dim lngRowNo                As Long             'データシート行番号
    Dim lngNameRowNo            As Long             '名前セルの行番号(請求ファイル)
    Dim blnRet                  As Long             'リターンコード
    Dim lngRet                  As Long             'リターンコード
    Dim strDataFullName         As String           'データシートファイルのブック名
    Dim strDataSheetName        As String           'データシート上のシート名称
    Dim strSheetName            As String           '計算確認書シート名称
    Dim strTempSheetName        As String           'Templateシート名称
    Dim colSeetNames            As New Dictionary   'シート名用ディクショナリ
    Dim colZoufukuNames         As New Dictionary   '増幅時の名前用ディクショナリ
    Dim aryKyotuData()          As String           '全帳票共通データ用配列 aryKyotuData(1 To 2, 1 To N)
                                                    '   aryKyotuData(1, N) :名前
                                                    '   aryKyotuData(2, N) :設定値
    Dim lngKyotuDataCnt         As Long             '全帳票共通データ数
    Dim strSvLocation           As String           '退避用ロケーション番号
    Dim strWkKey                As String           'KEY編集用ワーク
    Dim strWkName               As String           '名前編集用ワーク
    Dim lngWkOffset             As Long             'オフセット編集用ワーク
    Dim aryNameCol()            As Variant          '名前の付いたセルのカラム番号配列(初期化用)
    Dim blnSheetErr             As Boolean          'シート名不正時:TRUE
    Dim lngSheetMaxCnt          As Long
    Dim lngSheetCnt             As Long
    Dim varPgSetup()            As Variant          'PageSetup
    Dim aryPgSetupName()        As Variant          'PageSetupをするシート名配列

    
    
    func_MakeSeikyuFile = False

    ReDim varPgSetup(0)

    ThisWorkbook.Application.ScreenUpdating = False
    ThisWorkbook.Application.DisplayAlerts = False
    ThisWorkbook.Application.DisplayStatusBar = False

    '*********************************************************
    '計算確認書 新規BOOK作成
    '*********************************************************
    blnRet = func_FileOpen(strOutputDir, strSeiFilaName)
    If blnRet = False Then
        'エラー情報構造体セット
        With gusrErr
            .ModuleId = MODULE_NAME         'モジュール名
            .Procedure = PROCEDURE_NAME     'プロシージャ名
            .ErrNum = Err.Number             'エラー番号
            'エラー概要
            .ErrDescript = "ファイルオープンでエラーが発生しました。"
            .GI_NAME = GI_STRCT.GI_NAME     '外部委託先
            '口座番号
            .KohzaNo = ""
            'メッセージ詳細
            .MsgNaiyou = "Err.Number:" & Err.Number & vbCrLf & _
                         "Err.Description：" & Err.Description & vbCrLf & _
                         "出力フォルダ：" & strOutputDir & vbCrLf & _
                          "ファイル名　　：" & strSeiFilaName
        End With
        'エラーシート書き込み
        Call fncWriteErrSheet(ERROR_SHEETNAME)
        lngErrorCnt = lngErrorCnt + 1
        Set colSeetNames = Nothing
        Set colZoufukuNames = Nothing
        Erase aryKyotuData
        Erase aryNameCol
        
        Exit Function
    End If
    
    '*********************************************************
    'データシートファイルOPEN
    '*********************************************************
    strDataFullName = strOutputDir & "\" & strDataFileName
    ThisWorkbook.Application.Workbooks.Open strDataFullName
    
    'ウィンドウを非表示にする
    With Workbooks(strDataFileName)
        .Activate
        .Application.ActiveWindow.Visible = False
    End With
    
    
    '*********************************************************
    '計算確認書ブックにデータシートをコピー
    '*********************************************************
    Call subSheetCopyOtherBook(Workbooks(strSeiFilaName), Workbooks(strDataFileName), DATASHEET_DATA, DATASHEET_DATA)
    'Sheet1シートを削除
    Workbooks(strSeiFilaName).Sheets(1).Delete
    
    '*********************************************************
    '計算確認書シート作成
    '*********************************************************
    With Workbooks(strDataFileName).Sheets(DATASHEET_DATA)
        '*********************************************************
        '変数の初期化
        '*********************************************************
        lngRowNo = 2                            'データシート２行目から検索(１行目はヘッダー情報)
        lngKyotuDataCnt = 0                     '全帳票共通データ数
        ReDim aryKyotuData(1 To 2, 0)           '全帳票共通データ配列
        
        strSvLocation = vbNullString            '増幅用ロケーション退避エリア初期化
        
        blnSheetErr = False                     'シート名不正時：TRUE
        
        
        '*********************************************************
        'データシートを元に計算確認書シートを作成
        '*********************************************************
        Do While .Range(DATASHEET_SHEETNAME_COL & lngRowNo).Value <> vbNullString

            'テンプレートシート名が"条件"以外の場合処理を行う
            If .Range(DATASHEET_DATA_TYPE & lngRowNo).Value <> "条件" Then
            
            
                '*********************************************************
                'シート名作成
                '*********************************************************
                'データシート上のシート名(ヘッダ＋シート名)
                strDataSheetName = .Range(DATASHEET_SHEETHEAD_COL & lngRowNo).Value & .Range(DATASHEET_SHEETNAME_COL & lngRowNo).Value
                
                'テンプレートシート名("・"文字以降を削除したもの)
                lngRet = fncGetTempSeetName(.Range(DATASHEET_SHEETNAME_COL & lngRowNo).Value, strTempSheetName)
                If lngRet <> 0 Then

                    'エラー情報構造体セット
                    With gusrErr
                        .ModuleId = MODULE_NAME         'モジュール名
                        .Procedure = PROCEDURE_NAME     'プロシージャ名
                        .ErrNum = Err.Number             'エラー番号
                        'エラー概要
                        .ErrDescript = "TEMPLATEシート名取得(fncGetTempSeetName)でエラー発生が発生しました。"
                        .GI_NAME = GI_STRCT.GI_NAME     '外部委託先
                        '口座番号
                        .KohzaNo = ""
                        'メッセージ詳細
                        .MsgNaiyou = "Err.Number       :" & Err.Number & vbCrLf & _
                                     "Err.Description  :" & Err.Description & vbCrLf & _
                                     "lngRowNo         :" & lngRowNo & vbCrLf & _
                                     "シート名         :" & Workbooks(strDataFileName).Sheets(DATASHEET_DATA).Range(DATASHEET_SHEETNAME_COL & lngRowNo).Value & vbCrLf
                    End With
                    'エラーシート書き込み
                    Call fncWriteErrSheet(ERROR_SHEETNAME)
                    lngErrorCnt = lngErrorCnt + 1
                    
                    Set colSeetNames = Nothing
                    Set colZoufukuNames = Nothing
                    Erase aryKyotuData
                    Erase aryNameCol
                    Exit Function
                    
                End If
                
                '計算確認書ファイルに作成するシート名(ヘッダ＋テンプレートシート名)
                strSheetName = Replace(.Range(DATASHEET_SHEETHEAD_COL & lngRowNo).Value, "：", "@")
                
                If strTempSheetName = DATASHEET_BASIC Then
                    '*********************************************************
                    '共通情報退避
                    '*********************************************************
                    'テンプレートシート名が"共通"の場合は配列に共通情報を保存
                    lngKyotuDataCnt = lngKyotuDataCnt + 1
                    ReDim Preserve aryKyotuData(1 To 2, lngKyotuDataCnt)
                    aryKyotuData(1, lngKyotuDataCnt) = .Range(DATASHEET_ITEMNAME_COL & lngRowNo).Text        '名前
                    aryKyotuData(2, lngKyotuDataCnt) = RTrim(.Range(DATASHEET_RESULT_COL & lngRowNo).Text) '設定値
                
                Else
                    '*********************************************************
                    '新規シート作成
                    '*********************************************************
                    '作成済みかチェック

                    If colSeetNames.Exists(strSheetName) = False Then
                        '未作成時はシート作成
                        '*********************************************************
                        'シート名チェック
                        '*********************************************************
                        On Error Resume Next
                        Workbooks(strDataFileName).Sheets(strTempSheetName).Activate
                        
                        If Err.Number <> 0 Then

                            'エラー情報構造体セット
                            With gusrErr
                                .ModuleId = MODULE_NAME         'モジュール名
                                .Procedure = PROCEDURE_NAME     'プロシージャ名
                                .ErrNum = Err.Number             'エラー番号
                                'エラー概要
                                .ErrDescript = "シート名が不正です。"
                                .GI_NAME = GI_STRCT.GI_NAME     '外部委託先
                                '口座番号
                                .KohzaNo = ""
                                'メッセージ詳細
                                .MsgNaiyou = "Err.Number       :" & Err.Number & vbCrLf & _
                                             "Err.Description  :" & Err.Description & vbCrLf & _
                                             "strDataFileName  :" & strDataFileName & vbCrLf & _
                                             "strTempSheetName :" & strTempSheetName
                            End With
                            'エラーシート書き込み
                            Call fncWriteErrSheet(ERROR_SHEETNAME)
                            lngErrorCnt = lngErrorCnt + 1
                            
                            Set colSeetNames = Nothing
                            Set colZoufukuNames = Nothing
                            Erase aryKyotuData
                            Erase aryNameCol
                            Exit Function
                        
                        
                        Else
                            blnSheetErr = False
                        End If
                        On Error GoTo ErrHandler
    
                        If blnSheetErr = False Then
                            
                            '*********************************************************
                            'シート作成
                            '*********************************************************
    
                            Call subSheetCopyOtherBook(Workbooks(strSeiFilaName), Workbooks(strDataFileName), strTempSheetName, strSheetName)
    
                            '作成済みのシート名をディクショナリに保存
                            colSeetNames.Add strSheetName, strDataSheetName
    
                            '*********************************************************
                            '共通情報セット
                            '*********************************************************
                            On Error Resume Next    '共通情報を未使用の帳票対応
    
                            For lngCnt = 1 To UBound(aryKyotuData, 2)
                                Workbooks(strSeiFilaName).Sheets(strSheetName).Range(aryKyotuData(1, lngCnt)) = "" & aryKyotuData(2, lngCnt)
                            Next
    
                            On Error GoTo ErrHandler
                        
                        End If
                    End If
                
                    If blnSheetErr = False Then
                        '*********************************************************
                        'データをセット
                        '*********************************************************
                        If Trim(.Range(DATASHEET_OFFSET_COL & lngRowNo).Value) <> vbNullString Then
                            '*********************************************************
                            '増幅の場合
                            '*********************************************************
                            '増幅用ディクショナリのKEYを編集
                            'KEY:シート名+項目名　DATA:項目名
                            strWkKey = strDataSheetName & .Range(DATASHEET_ITEMNAME_COL & lngRowNo)
                            
                            'オフセットが10000以上の場合は10000で割った余りを求める
                            lngWkOffset = .Range(DATASHEET_OFFSET_COL & lngRowNo).Value Mod GASSAN_OFFSET_BASE
                            If lngWkOffset = 0 Then
                                '増幅の先頭行の項目名をディクショナリに保存
                                colZoufukuNames.Add strWkKey, .Range(DATASHEET_ITEMNAME_COL & lngRowNo).Value
                                
                            End If
                            
                            If lngWkOffset > 0 And Val(strSvLocation) Mod GASSAN_OFFSET_BASE <> lngWkOffset Then
                                '*********************************************************
                                '行増幅処理
                                '*********************************************************
                                '名前の付いたセルの行番号を取得
                                lngNameRowNo = Workbooks(strSeiFilaName).Sheets(strSheetName).Range(.Range(DATASHEET_ITEMNAME_COL & lngRowNo)).Row
                                
                                '名前の付いたセルの列番号を保存する(クリアするため)
                                Call subGetNameCellColumn(strSeiFilaName, strSheetName, lngNameRowNo, aryNameCol)
                                
                                '新規行を追加する
                                With Workbooks(strSeiFilaName).Sheets(strSheetName)
                                    .Rows(lngNameRowNo & ":" & lngNameRowNo).Copy
                                    .Rows(lngNameRowNo + lngWkOffset _
                                         & ":" & lngNameRowNo + lngWkOffset).Insert Shift:=xlDown
                                End With
                                
                                '保存した列番号のセルをクリアする
                                For lngCnt = 1 To UBound(aryNameCol)
                                    Workbooks(strSeiFilaName).Sheets(strSheetName).Cells( _
                                        lngNameRowNo + .Range(DATASHEET_OFFSET_COL & lngRowNo).Value, _
                                        aryNameCol(lngCnt) _
                                        ).Value = vbNullString
                                Next
                                
                            End If
                            
                            '増幅基準行の名前を取得
                            strWkName = colZoufukuNames.Item(strWkKey)

                        Else
                            lngWkOffset = 0
                            strWkName = .Range(DATASHEET_ITEMNAME_COL & lngRowNo).Value
                        End If
                        Dim lngKikanSu As Long
                        If (strTempSheetName = "RAFI口座別") And strWkName = "期間数" Then
                            '期間数の取得
                            lngKikanSu = .Range(DATASHEET_RESULT_COL & lngRowNo).Value
                            
                            '期間数分行コピー＆名前の再作成
                            Call GyouCopy(strSeiFilaName, strSheetName, lngKikanSu)
                            
                            lngRowNo = lngRowNo + 1
                            lngWkOffset = 0
                            strWkName = .Range(DATASHEET_ITEMNAME_COL & lngRowNo).Value
                        End If

                        '名前の位置からオフセット数下の行にデータをセット
                        Workbooks(strSeiFilaName).Sheets(strSheetName).Range(strWkName).Offset(lngWkOffset, 0) _
                            = .Range(DATASHEET_RESULT_COL & lngRowNo).Value
                        With Workbooks(strSeiFilaName).Sheets(strSheetName)
                            '対象行の削除フラグ用セルをクリア
                            If .Range(COLADR_DELETE_FLAG & .Range(strWkName).Row) <> vbNullString Then
                                lngRet = fncSetDelFlag(strSeiFilaName, strSheetName, .Range(strWkName).Row, .Range(strWkName).Row, vbNullString)
                                If lngRet <> 0 Then
                                
                                    'エラー情報構造体セット
                                    With gusrErr
                                        .ModuleId = MODULE_NAME         'モジュール名
                                        .Procedure = PROCEDURE_NAME     'プロシージャ名
                                        .ErrNum = Err.Number             'エラー番号
                                        'エラー概要
                                        .ErrDescript = "削除フラグセット(fncSetDelFlag)でエラー発生が発生しました。"
                                        .GI_NAME = GI_STRCT.GI_NAME     '外部委託先
                                        '口座番号
                                        .KohzaNo = ""
                                        'メッセージ詳細
                                        .MsgNaiyou = "Err.Number           :" & Err.Number & vbCrLf & _
                                                     "Err.Description      :" & Err.Description & vbCrLf & _
                                                     "lngRet               :" & lngRet & vbCrLf & _
                                                     "strSeiFilaName       :" & strSeiFilaName & vbCrLf & _
                                                     "strSheetName         :" & strSheetName & vbCrLf & _
                                                     ".Range(strWkName).Row:" & Workbooks(strSeiFilaName).Sheets(strSheetName).Range(strWkName).Row & vbCrLf & _
                                                     "lngRowNo             :" & lngRowNo & vbCrLf
                                    End With
                                    'エラーシート書き込み
                                    Call fncWriteErrSheet(ERROR_SHEETNAME)
                                    lngErrorCnt = lngErrorCnt + 1
                                    
                                    Set colSeetNames = Nothing
                                    Set colZoufukuNames = Nothing
                                    Erase aryKyotuData
                                    Erase aryNameCol
                                    Exit Function
                                
                                End If
                            End If
                        End With
                    
                    End If
                
                End If
            
                'オフセット退避
                strSvLocation = .Range(DATASHEET_OFFSET_COL & lngRowNo).Value

            End If
            
            lngRowNo = lngRowNo + 1
        Loop
        
        
    End With
    
    'データシートファイルの口座別シート（テンプレート）のPageSetupをバックアップする。
    Select Case GI_STRCT.GI_NO
        Case GI_CODE_RAFI
            Call sub_GetPageSetup(strDataFileName, DATASHEET_RAFI_KOHZA_BT, varPgSetup)
        Case Else
            '処理なし
    End Select
    
    '計算確認書で条件式になっているセルを表示値の値に変換する。
    If gCOPY_DEBUG_FLG = False Then
        lngSheetMaxCnt = Workbooks(strSeiFilaName).Sheets.Count

        If lngSheetMaxCnt >= 3 Then
        '口座別のシートが1シートでもある場合
            ReDim Preserve aryPgSetupName(lngSheetMaxCnt - 3)
        Else
        '口座別のシート何もない場合
            '処理なし
        End If
        
        For lngSheetCnt = 2 To lngSheetMaxCnt
            With Workbooks(strSeiFilaName).Worksheets(lngSheetCnt)
                .Range(gCOPY_RANGE).Copy
                .Range(gCOPY_RANGE).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                .Activate
                .Cells.Interior.ColorIndex = xlNone     'セル背景色削除
                .Range(OUT_SHEET_DEFAULT_CELL).Select
                
                'PageSetupを設定する口座別のシート名を取得
                If lngSheetCnt >= 3 Then
                    aryPgSetupName(lngSheetCnt - 3) = .Name
                End If
            End With
        Next lngSheetCnt
    
    End If
    
    '口座別のシートに対してPageSetupを実施する。
    If UBound(varPgSetup) > 0 And lngSheetMaxCnt > 2 Then
        Select Case GI_STRCT.GI_NO
            Case GI_CODE_RAFI
                Call sub_SetPageSetup(strSeiFilaName, aryPgSetupName, varPgSetup)
            Case Else
                '処理なし
        End Select
    End If
    
    
    '仮計算マークの貼り付け
    If GI_STRCT.KARI_KEISAN_FLG = "1" Then
    
        Call subSheetCopyOtherBook(Workbooks(strSeiFilaName), Workbooks(strDataFileName), MARK_SHEETNAME, MARK_SHEETNAME)
        Call Set_DraftMark(strSeiFilaName)
    
    End If
    
    '*********************************************************
    '後処理
    '*********************************************************
    '計算確認書ファイルのデータシートを非表示
    Workbooks(strSeiFilaName).Worksheets(DATASHEET_DATA).Visible = False
    
    'データシートファイルCLOSE
    Workbooks(strDataFileName).Close False
    
    With ThisWorkbook.Application
        'データシートファイル削除
        .DisplayAlerts = False
        Kill strOutputDir & "\" & strDataFileName
        
        .DisplayAlerts = True
        .DisplayStatusBar = True
    End With
        
        Set colSeetNames = Nothing
        Set colZoufukuNames = Nothing
        Erase aryKyotuData
        Erase aryNameCol

    func_MakeSeikyuFile = True

Exit Function

ErrHandler:

'---- Error Log Start ----------------------------------------------------
On Error Resume Next

    Dim strErrMsg   As String
    Dim lng As Long
    lng = Err.Number
'MsgBox "error"
'Resume
    With Workbooks(strDataFileName).Sheets(DATASHEET_DATA)
        strErrMsg = ""
        strErrMsg = strErrMsg & "データシートから計算確認書作成中にシステムエラーが発生しました。" & vbLf
        strErrMsg = strErrMsg & "システム管理者に連絡して下さい。" & vbLf
        strErrMsg = strErrMsg & "  ファイル名：" & strDataFullName & vbLf
        strErrMsg = strErrMsg & " データシートエラー  行番号：" & lngRowNo & vbLf
        strErrMsg = strErrMsg & "<< データシートの内容 >>" & vbLf
        strErrMsg = strErrMsg & "  ヘッダー　：" & .Range(DATASHEET_SHEETHEAD_COL & lngRowNo).Value & vbLf
        strErrMsg = strErrMsg & "  シート名　：" & .Range(DATASHEET_SHEETNAME_COL & lngRowNo).Value & vbLf
        strErrMsg = strErrMsg & "  項目名　　：" & .Range(DATASHEET_ITEMNAME_COL & lngRowNo).Value & vbLf
        strErrMsg = strErrMsg & "  データ　　：" & .Range(DATASHEET_RESULT_COL & lngRowNo).Value & vbLf
    End With
    
    'エラー情報構造体セット
    With gusrErr
        .ModuleId = MODULE_NAME         'モジュール名
        .Procedure = PROCEDURE_NAME     'プロシージャ名
        .ErrNum = Err.Number             'エラー番号
        'エラー概要
        .ErrDescript = "計算確認書作成中にシステムエラー発生"
        .GI_NAME = GI_STRCT.GI_NAME     '外部委託先
        '口座番号
        .KohzaNo = ""
        'メッセージ詳細
        .MsgNaiyou = "Err.Number:" & Err.Number & vbCrLf & _
                     "Err.Description：" & Err.Description & vbCrLf & _
                      "ファイル名　　：" & strSeiFilaName & vbCrLf & strErrMsg
    End With
    'エラーシート書き込み
    Call fncWriteErrSheet(ERROR_SHEETNAME)
    lngErrorCnt = lngErrorCnt + 1
    
    'データシートファイルCLOSE
    ThisWorkbook.Application.DisplayAlerts = False
    ThisWorkbook.Application.Workbooks(strDataFileName).Close False
    ThisWorkbook.Application.DisplayAlerts = True
    Set colSeetNames = Nothing
    Set colZoufukuNames = Nothing
    Erase aryKyotuData
    Erase aryNameCol

    Err.Clear
    Resume Next

'---- Error Log End   ----------------------------------------------------

End Function



'*************************************************************************
'関数名　　：ファイルを開く
'
'引　　数　：
'           strOutputDir    I       フォルダ
'           strFileName     I       ファイル名
'
'戻り値　　：Boolean
'
'機能説明　：
'
'更新履歴　：2008/06/16 SRA Y.Azuma    変更   外部委託ライセンスフィー算出対応
'
'*************************************************************************
Private Function func_FileOpen(ByVal strOutputDir As String _
                             , ByVal strFileName As String) As Boolean
On Error GoTo ErrHandler

    Const PROCEDURE_NAME    As String = "func_FileOpen"

    Dim wbNewBook           As Workbook

    func_FileOpen = False

    'ファイル名作成
    
    '新規ワークブックのオープン
    Set wbNewBook = ThisWorkbook.Application.Workbooks.Add
    
    '新規ワークブックの別名保存
    If Right(strOutputDir, 1) = "\" Then
        wbNewBook.Application.ActiveWorkbook.SaveAs Filename:=strOutputDir & strFileName
    Else
        wbNewBook.Application.ActiveWorkbook.SaveAs Filename:=strOutputDir & "\" & strFileName
    End If
    
    Set wbNewBook = Nothing
    
    func_FileOpen = True
    Exit Function
ErrHandler:

    func_FileOpen = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    Set wbNewBook = Nothing

End Function


'*************************************************************************
'関数名　　：ワークシートコピー処理(別ブックにコピー)
'
'引　　数　：
'           objDstBook      I       貼付先ブック
'           objSrcBook      I       コピー元ブック
'           strCopySheet    I       コピーシート名(省略可)
'           strNewName      I       貼付後のシート名(省略可)
'
'戻り値　　：なし
'
'機能説明　：指定されたシートをブックの最後に追加する。シートの指定がない場合
'           先頭のシートをコピーして貼付を行う。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    変更   外部委託ライセンスフィー算出対応
'
'*************************************************************************
Private Sub subSheetCopyOtherBook(ByVal objDstBook As Workbook _
                             , ByVal objSrcBook As Workbook _
                             , Optional ByVal strCopySheet As String = "" _
                             , Optional ByVal strNewName As String = "")
    
On Error GoTo ErrHandler
    
    
    Const PROCEDURE_NAME    As String = "subSheetCopyOtherBook"
    Dim lngMaxSheetNum      As Long
    Dim lngCnt              As Long
    Dim strNames()          As String
    Dim lngNamesCnt         As Long
    
    
'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

    lngMaxSheetNum = objDstBook.Sheets.Count

    With objSrcBook.Styles("Normal").Font
        .Name = "Tahoma"
        .Size = 10
    End With


    If Trim(strCopySheet) <> "" Then
        
        If InStr(1, strCopySheet, "レター") <> 0 Then
            objSrcBook.Sheets(strCopySheet).Copy After:=objDstBook.Sheets(lngMaxSheetNum)
        Else
        '口座別の場合、シート数が増えると性能が劣化する為以下の処理を取る
            Erase strNames
            lngNamesCnt = 0
        
            'コピー元シートの名前定義をバックアップする。
            With objSrcBook.Worksheets(strCopySheet).Names
                For lngNamesCnt = 1 To .Count
                    ReDim Preserve strNames(1, lngNamesCnt)
                    strNames(0, lngNamesCnt) = .Item(lngNamesCnt).Name
                    strNames(1, lngNamesCnt) = .Item(lngNamesCnt).RefersTo
                Next lngNamesCnt
            End With
            
        
            objDstBook.Sheets.Add After:=objDstBook.Worksheets(lngMaxSheetNum)
            objSrcBook.Sheets(strCopySheet).Cells.Copy
            ThisWorkbook.ActiveSheet.Paste Destination:=objDstBook.Worksheets(lngMaxSheetNum + 1).Range("A1")
        
        
            With objDstBook.Worksheets(lngMaxSheetNum + 1)
                '一部コピーされた名前定義を削除する。
                For lngNamesCnt = 1 To .Names.Count
                    .Names.Item(1).Delete
                Next lngNamesCnt
            
                'バックアップした名前定義を戻す。
                If objSrcBook.Worksheets(strCopySheet).Names.Count > 0 Then
                    For lngNamesCnt = 1 To UBound(strNames, 2)
                        .Names.Add Name:=Replace(strNames(0, lngNamesCnt), strCopySheet, .Name), _
                               RefersTo:=Replace(strNames(1, lngNamesCnt), strCopySheet, .Name)
                    Next lngNamesCnt
                End If
                
            End With
        End If

    Else
        objSrcBook.Sheets(1).Copy After:=objDstBook.Sheets(lngMaxSheetNum)
    End If


    '貼付たシートの新たな名前をつける
    If Trim(strNewName) <> "" Then
        lngMaxSheetNum = objDstBook.Sheets.Count
        objDstBook.Sheets(lngMaxSheetNum).Name = strNewName
    End If

    

Exit Sub

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
End Sub


'*************************************************************************
'関数名　　：行コピー処理
'
'引　　数　：
'           strSeiFilaName      I       処理対象ファイル名
'           strSheetName        I       処理対象シート名
'           lngKikanSu          I       期間数(貼り付け回数)
'
'戻り値　　：なし
'
'機能説明　："COPY_START"と"COPY_END"の行範囲をコピーし期間数分貼り付ける。
'           貼り付けの際、"期間001"を期間数で(例"期間002")セル定義名と
'           ワークシート関数で使用しているセル定義名を置換する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成   外部委託ライセンスフィー算出対応
'
'*************************************************************************
Private Sub GyouCopy(ByVal strSeiFilaName As String _
                   , ByVal strSheetName As String _
                   , ByVal lngKikanSu As Long)

    Dim lngCpStartRow       As Long     'コピー範囲開始行
    Dim lngCpEndRow         As Long     'コピー範囲終了行
    Dim lngInsStartRow      As Long     '挿入後範囲開始行
    Dim lngInsEndRow        As Long     '挿入後範囲終了行
    
    Dim lngCpRows           As Long     'コピー行数
    Dim lngInsBaseRow       As Long     '挿入行
    Dim lngKikanCnt         As Long
    Dim lngDefineRow        As Long
    Dim lngDefineCol        As Long
    
    Dim lngCnt              As Long
    Dim strWork             As String
    Dim strDefineName       As String
    Dim lngFindP            As Long
    Dim strNewCellName      As String
    
    Dim lngRow              As Long
    Dim lngCol              As Long
    Dim strBuff             As String
    Const MAX_COL = 100
    
    
    With Workbooks(strSeiFilaName).Sheets(strSheetName)
        
        lngCpStartRow = .Range("COPY_START").Row
        lngCpEndRow = .Range("COPY_END").Row
        lngCpRows = lngCpEndRow - lngCpStartRow + 1
        
        For lngKikanCnt = 1 To lngKikanSu - 1
            '行コピー
            .Rows(lngCpStartRow & ":" & lngCpEndRow).Copy
            
            '挿入行の更新
            lngInsBaseRow = lngCpEndRow + (lngCpRows * (lngKikanCnt - 1)) + 1
            
            '行貼り付け
            .Rows(lngInsBaseRow & ":" & lngInsBaseRow).Insert Shift:=xlDown
            
            'コピー範囲のセル名前定義”期間001〜”を挿入後範囲に”期間002〜”で作成する。
            For lngCnt = 1 To .Names.Count
                
                strWork = ""
                strDefineName = ""
                strNewCellName = ""
            
                strWork = .Names(lngCnt).Name
                lngFindP = InStr(1, strWork, "!")
                If lngFindP > 0 Then
                    strDefineName = Mid(strWork, lngFindP + 1, Len(strWork) - lngFindP)
                Else
                    strDefineName = strWork
                End If
    
                
                If Mid(strDefineName, 1, 5) = DATASHEET_INC_KIKAN001 Then
                    lngDefineRow = .Range(strDefineName).Row + (lngCpRows * (lngKikanCnt))
                    lngDefineCol = .Range(strDefineName).Column
                    strNewCellName = Replace(strDefineName, DATASHEET_INC_KIKAN001, DATASHEET_INC_KIKAN & Format(lngKikanCnt + 1, "000"))
                    Workbooks(strSeiFilaName).Names.Add Name:=strSheetName & "!" & strNewCellName, RefersToR1C1:= _
                        "=" & strSheetName & "!R" & lngDefineRow & "C" & lngDefineCol
                End If
                
            Next lngCnt
            
            'セル関数で”期間001〜”を参照してところを”期間002〜”に変更する。
            For lngRow = lngInsBaseRow To (lngInsBaseRow + lngCpRows - 1)
                For lngCol = 1 To MAX_COL
                    strBuff = .Range(.Cells(lngRow, lngCol), .Cells(lngRow, lngCol)).Formula
                    If Left(strBuff, 1) = "=" Then
                        If InStr(1, strBuff, DATASHEET_INC_KIKAN001) > 0 Then
                            strBuff = Replace(strBuff, DATASHEET_INC_KIKAN001, DATASHEET_INC_KIKAN & Format(lngKikanCnt + 1, "000"))
                            .Range(.Cells(lngRow, lngCol), .Cells(lngRow, lngCol)).Formula = strBuff
                        End If
                    End If
                Next lngCol
            Next lngRow
            
        Next lngKikanCnt
        
    End With

End Sub

'*************************************************************************
'関数名　　：仮計算マーク設定関数
'
'引　　数　：
'           strBookName         I       処理対象ワークブック名
'
'戻り値　　：なし
'
'機能説明　：仮計算マーク"DRAFT"をワークシートに設定する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Sub Set_DraftMark(ByVal strBookName As String)

On Error GoTo ErrHandler

    Const PROCEDURE_NAME    As String = "Set_DraftMark"
    Dim lngSheet            As Long
    Dim lngRow              As Long

'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

    With Workbooks(strBookName)
        'ワークシートからマークをコピー
        .Sheets(MARK_SHEETNAME).Shapes(DATASHEET_MARK_NAME).Copy
        
        'データシート(1番目)とマークコピー元シートを除いてコピーしたマークを貼り付け
        For lngSheet = 2 To .Worksheets.Count - 1
            .Sheets(lngSheet).Select
            .Sheets(lngSheet).Range(DATASHEET_DRAFT_CELL).Select
            .Sheets(lngSheet).Paste
        Next lngSheet
        
        'マークコピー元のシートを削除する。
        .Sheets("MARK").Delete
    End With
    
Exit Sub

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
End Sub


'*************************************************************************
'関数名　　：Page設定取得関数
'
'引　　数　：
'           strDataFileName     I       検索対象ワークブック名
'           strSheetName        I       検索対象シート名
'           varPgSetup()        O       取得結果格納配列
'
'戻り値　　：なし
'
'機能説明　：検索対象のシートからPageSetup情報を取得して配列に格納する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Sub sub_GetPageSetup(ByVal strDataFileName As String _
                           , ByVal strSheetName As String _
                           , ByRef varPgSetup() As Variant)
On Error GoTo ErrHandler
    
    
    Const PROCEDURE_NAME    As String = "sub_GetPageSetup"
    Dim lngMaxSheetNum      As Long
    Dim lngCnt              As Long
    
    
    ReDim varPgSetup(26)
    
'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

    lngMaxSheetNum = Workbooks(strDataFileName).Sheets.Count

    With Workbooks(strDataFileName)
        For lngCnt = 1 To lngMaxSheetNum
            If .Worksheets(lngCnt).Name = strSheetName Then
                'ページ設定をバックアップする。
                With .Worksheets(lngCnt).PageSetup
                    varPgSetup(PAGE_SETUP_NUM.PrintArea) = .PrintArea
                    varPgSetup(PAGE_SETUP_NUM.LeftHeader) = .LeftHeader
                    varPgSetup(PAGE_SETUP_NUM.CenterHeader) = .CenterHeader
                    varPgSetup(PAGE_SETUP_NUM.RightHeader) = .RightHeader
                    varPgSetup(PAGE_SETUP_NUM.LeftFooter) = .LeftFooter
                    varPgSetup(PAGE_SETUP_NUM.CenterFooter) = .CenterFooter
                    varPgSetup(PAGE_SETUP_NUM.RightFooter) = .RightFooter
                    varPgSetup(PAGE_SETUP_NUM.LeftMargin) = .LeftMargin
                    varPgSetup(PAGE_SETUP_NUM.RightMargin) = .RightMargin
                    varPgSetup(PAGE_SETUP_NUM.TopMargin) = .TopMargin
                    varPgSetup(PAGE_SETUP_NUM.BottomMargin) = .BottomMargin
                    varPgSetup(PAGE_SETUP_NUM.HeaderMargin) = .HeaderMargin
                    varPgSetup(PAGE_SETUP_NUM.FooterMargin) = .FooterMargin
                    varPgSetup(PAGE_SETUP_NUM.PrintHeadings) = .PrintHeadings
                    varPgSetup(PAGE_SETUP_NUM.PrintGridlines) = .PrintGridlines
                    varPgSetup(PAGE_SETUP_NUM.PrintComments) = .PrintComments
                    varPgSetup(PAGE_SETUP_NUM.PrintQuality) = .PrintQuality
                    varPgSetup(PAGE_SETUP_NUM.CenterHorizontally) = .CenterHorizontally
                    varPgSetup(PAGE_SETUP_NUM.CenterVertically) = .CenterVertically
                    varPgSetup(PAGE_SETUP_NUM.Orientation) = .Orientation
                    varPgSetup(PAGE_SETUP_NUM.Draft) = .Draft
                    varPgSetup(PAGE_SETUP_NUM.PaperSize) = .PaperSize
                    varPgSetup(PAGE_SETUP_NUM.FirstPageNumber) = .FirstPageNumber
                    varPgSetup(PAGE_SETUP_NUM.Order) = .Order
                    varPgSetup(PAGE_SETUP_NUM.BlackAndWhite) = .BlackAndWhite
                    varPgSetup(PAGE_SETUP_NUM.Zoom) = .Zoom
                    varPgSetup(PAGE_SETUP_NUM.PrintErrors) = .PrintErrors
                End With
                Exit For
            Else
                '処理なし
            End If
        Next lngCnt
    End With


Exit Sub

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
    
    ReDim varPgSetup(0)

    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
End Sub



'*************************************************************************
'関数名　　：Page設定取得関数
'
'引　　数　：
'           strSeiFilaName      I       設定対象ワークブック名
'           strSheetName        I       設定対象シート名配列
'           varPgSetup()        I       設定情報格納配列
'
'戻り値　　：なし
'
'機能説明　：設定対象の全シートにPageSetup情報を設定する。
'
'更新履歴　：2008/06/30 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Sub sub_SetPageSetup(ByVal strSeiFilaName As String _
                           , ByRef arySheetName() As Variant _
                           , ByRef varPgSetup() As Variant)
On Error GoTo ErrHandler
    
    Dim varName     As Variant
    
    Const PROCEDURE_NAME    As String = "sub_SetPageSetup"
    
'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

'Dim dblS    As Double 'for debug
'Dim dblE    As Double 'for debug

    
    For Each varName In arySheetName
'dblS = Timer'for debug
        'バックアップしたPageSetupを戻す。
        ' ※すべて設定すると遅くなるので主要なもののみ設定
        With Workbooks(strSeiFilaName).Worksheets(CStr(varName)).PageSetup
            .PrintArea = varPgSetup(PAGE_SETUP_NUM.PrintArea)
'            .LeftHeader = varPgSetup(PAGE_SETUP_NUM.LeftHeader)
'            .CenterHeader = varPgSetup(PAGE_SETUP_NUM.CenterHeader)
'            .RightHeader = varPgSetup(PAGE_SETUP_NUM.RightHeader)
'            .LeftFooter = varPgSetup(PAGE_SETUP_NUM.LeftFooter)
'            .CenterFooter = varPgSetup(PAGE_SETUP_NUM.CenterFooter)
'            .RightFooter = varPgSetup(PAGE_SETUP_NUM.RightFooter)
            .LeftMargin = varPgSetup(PAGE_SETUP_NUM.LeftMargin)
            .RightMargin = varPgSetup(PAGE_SETUP_NUM.RightMargin)
            .TopMargin = varPgSetup(PAGE_SETUP_NUM.TopMargin)
            .BottomMargin = varPgSetup(PAGE_SETUP_NUM.BottomMargin)
'            .HeaderMargin = varPgSetup(PAGE_SETUP_NUM.HeaderMargin)
'            .FooterMargin = varPgSetup(PAGE_SETUP_NUM.FooterMargin)
'            .PrintHeadings = varPgSetup(PAGE_SETUP_NUM.PrintHeadings)
'            .PrintGridlines = varPgSetup(PAGE_SETUP_NUM.PrintGridlines)
'            .PrintComments = varPgSetup(PAGE_SETUP_NUM.PrintComments)
            .PrintQuality = varPgSetup(PAGE_SETUP_NUM.PrintQuality)
'            .CenterHorizontally = varPgSetup(PAGE_SETUP_NUM.CenterHorizontally)
'            .CenterVertically = varPgSetup(PAGE_SETUP_NUM.CenterVertically)
            .Orientation = varPgSetup(PAGE_SETUP_NUM.Orientation)
'            .Draft = varPgSetup(PAGE_SETUP_NUM.Draft)
            .PaperSize = varPgSetup(PAGE_SETUP_NUM.PaperSize)
'            .FirstPageNumber = varPgSetup(PAGE_SETUP_NUM.FirstPageNumber)
'            .Order = varPgSetup(PAGE_SETUP_NUM.Order)
'            .BlackAndWhite = varPgSetup(PAGE_SETUP_NUM.BlackAndWhite)
            .Zoom = varPgSetup(PAGE_SETUP_NUM.Zoom)
'            .PrintErrors = varPgSetup(PAGE_SETUP_NUM.PrintErrors)
        End With
'dblE = Timer 'for debug
'Debug.Print "sub_SetPageSetup  " & varName & " : " & (dblE - dblS) 'for debug
    
    Next

Exit Sub

ErrHandler:

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0

    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
End Sub



