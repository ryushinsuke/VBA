Attribute VB_Name = "bas50Koushin"
Option Explicit

'*************************************************************************
'
'プロジェクト名：外部委託ライセンスフィー計算システム
'
'オブジェクト名：bas50Koushin
'
'機能概要　：更新処理
'
'更新履歴　：2008/06/05 SRA H.Anpo   新規作成
'
'*************************************************************************

'*************************************************************************
'モジュール内共通変数
'*************************************************************************
Const MODULE_NAME = "bas50Koushin"

'=======================================
'更新ユーザ、プログラムIDの定義
'=======================================
Const UPDATE_USER = "APL001"
Const UPDATE_PGM_ID = "外部委託先情報登録"

'=======================================
'組入れ情報配列の番号定義
'=======================================
Const C_KUM_ROWNO = 0                           '行番号
Const C_KUM_KEISAN_KIKAN_FROM = 1               '計算期間FROM
Const C_KUM_KEISAN_KIKAN_TO = 2                 '計算期間TO
Const C_KUM_KOHZA_NO = 3                        '口座番号
Const C_KUM_KEISAN_HOHHOH = 4                   '計算方法
Const C_KUM_ISSCD = 5                           'PX銘柄コード
Const C_KUM_RATE_CODE = 6                       '料率コード
Const C_KUM_UNYOH_HOHSHU_RATE_CODE = 7          '運用報酬料率コード
Const C_KUM_COMMITMENT_GAKU = 8                 'コミットメント金額
Const C_KUM_COMMITMENT_MNGCD = 9                'コミットメント通貨
Const C_KUM_SEIKOH_HOHSHU_WARIAI_BUNSHI = 10    '成功報酬割合分子
Const C_KUM_SEIKOH_HOHSHU_WARIAI_BUNBO = 11     '成功報酬割合分母
Const C_KUM_HIZUKE_SHURUI = 12                  '国内顧問日付種類
Const C_KUM_SAISHU_KBN = 13                     '最終区分
Const C_KUM_BIKOH = 14                          '備考
Const C_KUM_KEISAN_KIKAN_ID = 15                '計算期間ID

Const C_KUM_CNT = 15                            '組入れ情報の項目数




'*************************************************************************
'関数名　　：入力チェック処理(更新時)
'
'引　　数　：
'           TargetSheets        I           チェック対象のシート
'           Kumiire()           O           組入れ情報配列
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：メインシートの更新時入力チェックを行う
'
'更新履歴　：2008/06/09 SRA H.Anpo    新規作成
'
'*************************************************************************
Public Function gfuncKeisan_UpdInputCheck(ByRef TargetSheets As Object _
                                        , ByRef Kumiire() As Variant) As Boolean
On Error GoTo ErrorSection

    Dim strGiNo         As String       '外部委託先
    Dim strWk           As String       '文字列編集用
    Dim dtDwk           As Date         '日付編集用
    Dim blnRet          As Boolean

    gfuncKeisan_UpdInputCheck = False

    With TargetSheets
    
        '検索情報のチェック
        '外部委託先
        '必須入力チェック
        If Trim(.Range("外部委託先").Value) = "" Then
            '外部委託先：未入力です。
            .Range("外部委託先").Activate
            Call gfunc_ErrorMsg(3, 18546, "外部委託先", "")
    
            Exit Function
        End If
    
        '外部委託先の検索時同一チェック
        strGiNo = .Range("外部委託先")
        If Trim(ThisWorkbook.Worksheets(TEMPLATE_SHEETNAME).Range("検索時支払期間ID")) <> "" Then
            If StrComp(ThisWorkbook.Worksheets(TEMPLATE_SHEETNAME).Range("検索時外部委託先"), strGiNo) <> 0 Then
                '"外部委託先：検索時と外部委託先が異なります。"
                .Range("外部委託先").Activate
                Call gfunc_ErrorMsg(3, 18500, "外部委託先", "")
                Exit Function
            End If
        End If
        
        '契約情報のチェック
        '支払期間(From)
        '必須入力チェック
        If Trim(.Range("支払期間FROM").Value) = "" Then
            '支払期間(From)：未入力です。
            .Range("支払期間FROM").Activate
            Call gfunc_ErrorMsg(3, 18501, "支払期間(From)", "")
    
            Exit Function
        End If
        '日付の妥当性チェック
        If gfunc_CheckDate(Trim(CStr(.Range("支払期間FROM").Value))) = False Then
            '"支払期間(From)：入力に誤りがあります。"
            .Range("支払期間FROM").Activate
            Call gfunc_ErrorMsg(3, 18503, "支払期間(From)", "日付として認識できません。YYYYMMDD形式で入力して下さい。")
            Exit Function
        End If
        
    
        '支払期間(To)
        If Trim(.Range("支払期間TO").Value) = "" Then
            '支払期間(To)：未入力です。
            .Range("支払期間TO").Activate
            Call gfunc_ErrorMsg(3, 18502, "支払期間(To)", "")
    
            Exit Function
        End If
        '日付の妥当性チェック
        If gfunc_CheckDate(Trim(CStr(.Range("支払期間TO").Value))) = False Then
            '"支払期間(To)：入力に誤りがあります。"
            .Range("支払期間TO").Activate
            Call gfunc_ErrorMsg(3, 18504, "支払期間(To)", "日付として認識できません。YYYYMMDD形式で入力して下さい。")
            Exit Function
        End If
    
        '日付の大小比較チェック
        If .Range("支払期間FROM").Value > .Range("支払期間TO").Value Then
            '期間の指定に誤りがあります。
            .Range(.Range("支払期間FROM"), .Range("支払期間TO")).Activate
            Call gfunc_ErrorMsg(3, 18505, "支払期間(From),(To)", "From,Toの大小関係が不正です。")
            Exit Function
        End If
    
        '既存支払期間との重複チェック
        blnRet = func_Check_ShiharaiKikan_Chohfuku( _
                Mid(strGiNo, 1, 1), _
                .Range("支払期間FROM").Value, _
                .Range("支払期間TO").Value, _
                strWk)
        If blnRet = True Then
            If strWk <> "" Then
                '"期間の指定に誤りがあります。"
                .Range(.Range("支払期間FROM"), .Range("支払期間TO")).Activate
                Call gfunc_ErrorMsg(3, 18506, "支払期間(From),(To)", _
                                    "同一外部委託先で期間の重複したデータが既に登録されています。" & vbCrLf & "登録済みの期間：" & strWk)
                Exit Function
            End If
        Else
            Exit Function
        End If
        
        '契約期間(From)
        '必須入力チェック
        If Trim(.Range("契約期間FROM").Value) = "" Then
            '契約期間(From)：未入力です。
            .Range("契約期間FROM").Activate
            Call gfunc_ErrorMsg(3, 18507, "契約期間(From)", "")
    
            Exit Function
        End If
        '日付の妥当性チェック
        If gfunc_CheckDate(Trim(CStr(.Range("契約期間FROM").Value))) = False Then
            '"契約期間(From)：入力に誤りがあります。"
            .Range("契約期間FROM").Activate
            Call gfunc_ErrorMsg(3, 18509, "契約期間(From)", "日付として認識できません。YYYYMMDD形式で入力して下さい。")
            Exit Function
        End If
        
        '契約期間(To)
        If Trim(.Range("契約期間TO").Value) = "" Then
            '契約期間(To)：未入力です。
            .Range("契約期間TO").Activate
            Call gfunc_ErrorMsg(3, 18508, "契約期間(To)", "")
    
            Exit Function
        End If
        '日付の妥当性チェック
        If gfunc_CheckDate(Trim(CStr(.Range("契約期間TO").Value))) = False Then
            '"契約期間(To)：入力に誤りがあります。"
            .Range("契約期間TO").Activate
            Call gfunc_ErrorMsg(3, 18510, "契約期間(To)", "日付として認識できません。YYYYMMDD形式で入力して下さい。")
            Exit Function
        End If
    
        '日付の大小比較チェック
        If .Range("契約期間FROM").Value > .Range("契約期間TO").Value Then
            '期間の指定に誤りがあります。
            .Range(.Range("契約期間FROM"), .Range("契約期間TO")).Activate
            Call gfunc_ErrorMsg(3, 18511, "契約期間(From),(To)", "From,Toの大小関係が不正です。")
            Exit Function
        End If
        
        '１年以内の期間かチェック
'        dtDwk = Format(.Range("契約期間FROM"), "####/##/##")
'        dtDwk = DateAdd("yyyy", 1, dtDwk)
'        dtDwk = DateAdd("d", -1, dtDwk)
'        If Format(dtDwk, "YYYYMMDD") < .Range("契約期間TO") Then
'        If Format(dtDwk, "YYYYMMDD") < .Range("契約期間TO") Then
        dtDwk = Format(.Range("契約期間TO"), "####/##/##")
        dtDwk = DateAdd("yyyy", -1, dtDwk)
        dtDwk = DateAdd("d", 1, dtDwk)
        If Format(dtDwk, "YYYYMMDD") > .Range("契約期間FROM") Then
            '期間の指定に誤りがあります。
            .Range(.Range("契約期間FROM"), .Range("契約期間TO")).Activate
            Call gfunc_ErrorMsg(3, 18512, "契約期間(From),(To)", "契約期間には１年以内の期間を入力して下さい。")
            Exit Function
        End If
        
        '年間日数
        '必須入力チェック
        If Trim(.Range("年間日数").Value) = "" Then
            '年間日数：未入力です。
            .Range("年間日数").Activate
            Call gfunc_ErrorMsg(3, 18513, "年間日数", "")
    
            Exit Function
        End If
        
        '源泉税
        '必須入力チェック
        If Trim(.Range("源泉税").Value) = "" Then
            '源泉税：未入力です。
            .Range("源泉税").Activate
            Call gfunc_ErrorMsg(3, 18514, "源泉税", "")
    
            Exit Function
        End If

        '源泉税率(%)
        If Mid(Trim(.Range("源泉税").Value), 1, 1) = "1" Then
            '源泉税が「1:あり」の場合
            '必須入力チェック
            If Trim(.Range("源泉税率").Value) = "" Then
                '源泉税率：未入力です。
                .Range("源泉税率").Activate
                Call gfunc_ErrorMsg(3, 18515, "源泉税率", "")
        
                Exit Function
            End If
        Else
            '源泉税が「0:なし」の場合
            If Trim(.Range("源泉税率").Value) <> "" Then
                '源泉税率：源泉税なしの場合は未入出来ません。
                .Range("源泉税率").Activate
                Call gfunc_ErrorMsg(3, 18547, "源泉税率", "")
        
                Exit Function
            End If
        End If

        If Trim(.Range("源泉税率").Value) <> "" Then
            '数値の妥当性チェック
            If gkyk_IsNumeric(Trim(CStr(.Range("源泉税率").Value))) = False Then
                '"源泉税率：数値で入力して下さい。"
                .Range("源泉税率").Activate
                Call gfunc_ErrorMsg(3, 18516, "源泉税率", "")
                Exit Function
            End If
        End If

        '消費税
        '必須入力チェック
        If Trim(.Range("消費税").Value) = "" Then
            '消費税：未入力です。
            .Range("消費税").Activate
            Call gfunc_ErrorMsg(3, 18517, "消費税", "")
    
            Exit Function
        End If

        '消費税率(%)
        If Mid(Trim(.Range("消費税").Value), 1, 1) = "1" Then
            '消費税が「1:あり」の場合
            '必須入力チェック
            If Trim(.Range("消費税率").Value) = "" Then
                '消費税率：未入力です。
                .Range("消費税率").Activate
                Call gfunc_ErrorMsg(3, 18518, "消費税率", "")
        
                Exit Function
            End If
        Else
            '消費税が「0:なし」の場合
            If Trim(.Range("消費税率").Value) <> "" Then
                '消費税率：消費税なしの場合は未入出来ません。
                .Range("消費税率").Activate
                Call gfunc_ErrorMsg(3, 18548, "消費税率", "")
        
                Exit Function
            End If
        End If

        If Trim(.Range("消費税率").Value) <> "" Then
            '数値の妥当性チェック
            If gkyk_IsNumeric(Trim(CStr(.Range("消費税率").Value))) = False Then
                '"消費税率：数値で入力して下さい。"
                .Range("消費税率").Activate
                Call gfunc_ErrorMsg(3, 18519, "消費税率", "")
                Exit Function
            End If
        End If


        '支払割合分子
        '必須入力チェック
        If Trim(.Range("支払割合分子").Value) = "" Then
            '支払割合(分子)：未入力です。
            .Range("支払割合分子").Activate
            Call gfunc_ErrorMsg(3, 18520, "支払割合(分子)", "")
    
            Exit Function
        End If

        '数値の妥当性チェック
        If gkyk_IsNumeric(Trim(CStr(.Range("支払割合分子").Value))) = False Then
            '"支払割合(分子)：数値で入力して下さい。"
            .Range("支払割合分子").Activate
            Call gfunc_ErrorMsg(3, 18521, "支払割合(分子)", "")
            Exit Function
        End If

        '支払割合分母
        '必須入力チェック
        If Trim(.Range("支払割合分母").Value) = "" Then
            '支払割合(分母)：未入力です。
            .Range("支払割合分母").Activate
            Call gfunc_ErrorMsg(3, 18522, "支払割合(分母)", "")
    
            Exit Function
        End If

        '数値の妥当性チェック
        If gkyk_IsNumeric(Trim(CStr(.Range("支払割合分母").Value))) = False Then
            '"支払割合(分母)：数値で入力して下さい。"
            .Range("支払割合分母").Activate
            Call gfunc_ErrorMsg(3, 18523, "支払割合(分母)", "")
            Exit Function
        End If

        '送付日
        '日付の妥当性チェック
        If Trim(.Range("送付日").Value) <> "" Then
            If gfunc_CheckDate(Trim(CStr(.Range("送付日").Value))) = False Then
                '"送付日：入力に誤りがあります。"
                .Range("送付日").Activate
                Call gfunc_ErrorMsg(3, 18524, "送付日", "日付として認識できません。YYYYMMDD形式で入力して下さい。")
                Exit Function
            End If
        End If

        '支払予定日
        '日付の妥当性チェック
        If Trim(.Range("支払予定日").Value) <> "" Then
            If gfunc_CheckDate(Trim(CStr(.Range("支払予定日").Value))) = False Then
                '"支払予定日：入力に誤りがあります。"
                .Range("支払予定日").Activate
                Call gfunc_ErrorMsg(3, 18525, "支払予定日", "日付として認識できません。YYYYMMDD形式で入力して下さい。")
                Exit Function
            End If
        End If

        '組入れ情報チェック
        If func_CheckKumiire(TargetSheets, Kumiire) = False Then
            Exit Function
        End If

    End With

    gfuncKeisan_UpdInputCheck = True

    Exit Function

ErrorSection:

    gfuncKeisan_UpdInputCheck = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "gfuncKeisan_UpdInputCheck", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function


'*************************************************************************
'関数名　　：支払期間の既存登録重複チェック
'
'引　　数　：
'           strGiNo             I     外部委託先番号(1桁)
'           strKikanFrom        I     支払期間From(YYYMMDD)
'           strKikanTo          I     支払期間To(YYYYMMDD)
'           strErrKikan         I     重複している支払期間("YYYYMMDD〜YYYYMMDD")
'
'戻り値　　：Boolean (TRUE:正常、FALSE:重複エラー)
'
'機能説明　：既存の支払期間の重複があるかをチェックする
'
'更新履歴　：2008/06/09 SRA H.Anpo     新規作成
'
'*************************************************************************
Private Function func_Check_ShiharaiKikan_Chohfuku( _
                ByVal strGiNo As String, _
                ByVal strKikanFrom As String, _
                ByVal strKikanTo As String, _
                ByRef strErrKikan As String _
                ) As Boolean

    Dim vData()                 As Variant
    Dim strSql                  As String
    Dim lngCol                  As Long
    Dim lngRow                  As Long
    Dim strErrCode              As String
    Dim blnRet                  As Boolean
    Dim lngKikanIdFirst         As Long         '検索時　請求期間ID

    func_Check_ShiharaiKikan_Chohfuku = False

    strErrCode = ""
    strErrKikan = ""
    Erase vData

    '検索時支払期間IDの取得
    lngKikanIdFirst = func_GetKikanIdFirst()

    '既存の支払期間情報を取得
    strSql = ""
    strSql = strSql & " SELECT"
    strSql = strSql & "         GI_SHIHARAI_KIKAN_FROM || '〜' || GI_SHIHARAI_KIKAN_TO"
    strSql = strSql & " FROM"
    strSql = strSql & "         KYK_GI_SHIHARAI_KIKAN"
    strSql = strSql & " WHERE"
    strSql = strSql & "         GI_NO = '" & strGiNo & "'"
    
    strSql = strSql & " AND  (( '" & strKikanFrom & "' <= GI_SHIHARAI_KIKAN_TO   AND '" & strKikanTo & "' >= GI_SHIHARAI_KIKAN_TO )"
    strSql = strSql & " OR    ( '" & strKikanFrom & "' <= GI_SHIHARAI_KIKAN_FROM AND '" & strKikanTo & "' >= GI_SHIHARAI_KIKAN_FROM )"
    strSql = strSql & " OR    ( '" & strKikanFrom & "' >= GI_SHIHARAI_KIKAN_FROM AND '" & strKikanTo & "' <= GI_SHIHARAI_KIKAN_TO ))"
    
    strSql = strSql & " AND     SAKUJO_FLG = '0'"
    If lngKikanIdFirst <> -1 Then
        strSql = strSql & " AND     GI_SHIHARAI_KIKAN_ID <> " & lngKikanIdFirst & ""
    End If

    'データ取得
    blnRet = gclsdb.DoExequteSql(gcSELECT, strSql, vData, lngCol, lngRow, strErrCode)

    If blnRet = False Then
        If Trim(strErrCode) <> "" Then
            Exit Function
        End If
    Else
'        Exit Function
    End If

    '存在の確認
    If lngRow > 0 Then
        'データがある場合期間が重複してるデータが存在している。
        strErrKikan = vData(0, 0)
    End If

    Erase vData

    func_Check_ShiharaiKikan_Chohfuku = True

    Exit Function

ErrorSection:

    func_Check_ShiharaiKikan_Chohfuku = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_Check_ShiharaiKikan_Chohfuku", Err.Number, Err.Description)
    On Error GoTo 0

    Erase vData

'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------


End Function


'*************************************************************************
'関数名　　：組入れ情報チェック
'
'引　　数　：
'           TargetSheets        I           チェック対象のシート
'           Kumiire()           O           組入れ情報配列
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：組入れ情報の更新時入力チェック
'
'更新履歴　：2008/06/06 SRA H.Anpo     新規作成
'更新履歴　：2008/08/29 SRA Y.Azuma    変更   連結障害対応(No.21)
'
'*************************************************************************
Private Function func_CheckKumiire(ByRef TargetSheets As Object _
                                 , ByRef Kumiire() As Variant) As Boolean
On Error GoTo ErrorSection

    Dim lngCnt          As Long
    Dim blnRet          As Boolean
    Dim strSubMsg       As String       '付加メッセージ
    Dim lngRow          As Long
    Dim dtWk            As Date
    Dim blnDataFlg      As Boolean
    
    Dim strSvKohzaNo    As String       'KEY退避用(口座番号)
    Dim strSvIssCd      As String       'KEY退避用(銘柄コード)

    Dim colRateCode     As Collection   '料率コード用コレクション
    Dim strRateCode     As String       '料率コード・名称の文字列(コレクションデータ)

    Dim strCallOff_Date As String       '(将来用)現状は口座閉鎖フラグをチェックしていない
    
    
    func_CheckKumiire = False

    '変数の初期化
    ReDim Kumiire(0)
    Set colRateCode = New Collection       'シート名用コレクション生成
    blnRet = gKsC_funcMakeRateCollection(colRateCode)
    If blnRet = False Then
        GoTo EndSection
    End If

    With TargetSheets

        '組入れ情報の配列への取込とソート
        If func_Kumiire_To_Dim(TargetSheets, Kumiire) = False Then
            GoTo EndSection
        End If

        'KEY退避用変数の初期化
        strSvKohzaNo = ""       'KEY退避用(口座番号)
        strSvIssCd = ""         'KEY退避用(銘柄コード)

        For lngCnt = 1 To UBound(Kumiire)
            
            '付加メッセージの編集
            strSubMsg = vbCrLf & "組入れ情報 " & Kumiire(lngCnt, C_KUM_ROWNO) & "行目" _
                        & vbCrLf & " 計算期間(" & Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_FROM) & "〜" & Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO) & ")" _
                        & " 口座番号(" & Kumiire(lngCnt, C_KUM_KOHZA_NO) & ")" _
                        & " PX銘柄  (" & Kumiire(lngCnt, C_KUM_ISSCD) & ")"
            
            'シート上の行番号取得
            lngRow = .Range("先頭行").Row + Kumiire(lngCnt, C_KUM_ROWNO)
            
            '計算期間FROM
            '必須チェック
            If Trim(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_FROM)) = "" Then
                Call func_SetActiveCell(TargetSheets, lngRow, "計算期間FROM")
                '"計算期間(From)：未入力です。"
                Call gfunc_ErrorMsg(3, 18526, "計算期間(From)", strSubMsg)
                GoTo EndSection
            End If
        
            '計算期間TO
            '必須チェック
            If Trim(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO)) = "" Then
                Call func_SetActiveCell(TargetSheets, lngRow, "計算期間TO")
                '"計算期間(To)：未入力です。"
                Call gfunc_ErrorMsg(3, 18527, "計算期間(To)", strSubMsg)
                GoTo EndSection
            End If
        
            '計算期間FROM
            '日付の妥当性チェック
            If gfunc_CheckDate(Trim(CStr(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_FROM)))) = False Then
                Call func_SetActiveCell(TargetSheets, lngRow, "計算期間FROM")
                '"計算期間(From)：入力に誤りがあります。"
                Call gfunc_ErrorMsg(3, 18528, "計算期間(From)", "日付として認識できません。YYYYMMDD形式で入力して下さい。" & strSubMsg)
                GoTo EndSection
            End If
        
            '計算期間TO
            '日付の妥当性チェック
            If gfunc_CheckDate(Trim(CStr(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO)))) = False Then
                Call func_SetActiveCell(TargetSheets, lngRow, "計算期間TO")
                '"計算期間(To)：入力に誤りがあります。"
                Call gfunc_ErrorMsg(3, 18529, "計算期間(To)", "日付として認識できません。YYYYMMDD形式で入力して下さい。" & strSubMsg)
                GoTo EndSection
            End If
        
            '日付の大小比較チェック
            If Trim(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_FROM)) > Trim(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO)) Then
                Call func_SetActiveCell(TargetSheets, lngRow, "計算期間FROM", "計算期間TO")
                '計算期間(From),(To)：期間の指定に誤りがあります。
                Call gfunc_ErrorMsg(3, 18530, "計算期間(From),(To)", "From,Toの大小関係が不正です。" & strSubMsg)
                GoTo EndSection
            End If
        
            '支払期間の範囲内かチェック
            If Not (.Range("支払期間FROM") <= Trim(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_FROM)) And _
                    Trim(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO)) <= .Range("支払期間TO")) Then
                Call func_SetActiveCell(TargetSheets, lngRow, "計算期間FROM", "計算期間TO")
                '計算期間(From),(To)：期間の指定に誤りがあります。
                Call gfunc_ErrorMsg(3, 18531, "計算期間(From),(To)", "支払期間内の期間を入力して下さい。" & strSubMsg)
                GoTo EndSection
            End If
        
            ' 同一口座・銘柄内の抜け/重複チェック(２行目以降のチェック)
            If lngCnt >= 2 Then
                If strSvKohzaNo = Trim(Kumiire(lngCnt, C_KUM_KOHZA_NO)) And _
                   strSvIssCd = Trim(Kumiire(lngCnt, C_KUM_ISSCD)) Then
                    
                    '計算期間(From)が前の行の計算期間(To)の翌日になっているかをチェック
                    dtWk = Format(Trim(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_FROM)), "####/##/##")
                    dtWk = DateAdd("d", -1, dtWk)
                    If Format(dtWk, "YYYYMMDD") <> Trim(Kumiire(lngCnt - 1, C_KUM_KEISAN_KIKAN_TO)) Then
                        Call func_SetActiveCell(TargetSheets, lngRow, "計算期間FROM")
                        '計算期間(From)：期間の指定に誤りがあります。
                        Call gfunc_ErrorMsg(3, 18532, "計算期間(From)", "同一口座・銘柄内で期間の" & _
                            IIf(Format(dtWk, "YYYYMMDD") > Trim(Kumiire(lngCnt - 1, C_KUM_KEISAN_KIKAN_TO)), "抜け", "重複") & "があります。" & _
                            strSubMsg)
                        GoTo EndSection
                    End If
                End If
            End If
        
            '口座番号
            '必須チェック
            If Trim(Kumiire(lngCnt, C_KUM_KOHZA_NO)) = "" Then
                Call func_SetActiveCell(TargetSheets, lngRow, "口座番号")
                '"口座番号：未入力です。"
                Call gfunc_ErrorMsg(3, 18533, "口座番号", strSubMsg)
                GoTo EndSection
            End If
        
            '桁数チェック
            If Len(Trim(Kumiire(lngCnt, C_KUM_KOHZA_NO))) <> 7 Then
                Call func_SetActiveCell(TargetSheets, lngRow, "口座番号")
                '"口座番号：入力に誤りがあります。"
                Call gfunc_ErrorMsg(3, 18534, "口座番号", "7桁で入力して下さい。" & strSubMsg)
                GoTo EndSection
            End If
            
            '口座番号の存在チェック
            blnRet = func_KozaNoExist(TargetSheets, Trim(Kumiire(lngCnt, C_KUM_KOHZA_NO)), strCallOff_Date)
            If blnRet = False Then
                Call func_SetActiveCell(TargetSheets, lngRow, "口座番号")
                '"口座番号：該当する口座番号が存在しません。"
                Call gfunc_ErrorMsg(3, 18535, "口座番号", "" & strSubMsg)
                GoTo EndSection
            End If
        
            '計算方法
            '必須チェック
            If Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "" Then
                Call func_SetActiveCell(TargetSheets, lngRow, "計算方法")
                '"計算方法：未入力です。"
                Call gfunc_ErrorMsg(3, 18536, "計算方法", strSubMsg)
                GoTo EndSection
            End If
            
            'PX銘柄コード
            '必須チェック
            If Trim(Kumiire(lngCnt, C_KUM_ISSCD)) = "" Then
                Call func_SetActiveCell(TargetSheets, lngRow, "PX銘柄コード")
                '"PX銘柄コード(Type of Investment)：未入力です。"
                Call gfunc_ErrorMsg(3, 18537, "PX銘柄コード(Type of Investment)", strSubMsg)
                GoTo EndSection
            End If
        
'------------<Modify Start azuma 2008/08/29 > 連結障害対応(No.21)-----------------------
''''*** 2008/08/07 Added By H.Anpo Start
'''            'シングルクォーテーションの入力不可チェック
'''            If InStr(Kumiire(lngCnt, C_KUM_ISSCD), "'") <> 0 Then
'''                Call func_SetActiveCell(TargetSheets, lngRow, "PX銘柄コード")
'''                '"PX銘柄コード(Type of Investment)：入力に誤りがあります。"
'''                Call gfunc_ErrorMsg(3, 18549, "PX銘柄コード(Type of Investment)", "シングルクォーテーション( ' )は入力出来ません。" & strSubMsg)
'''                GoTo EndSection
'''            End If
''''*** 2008/08/07 Added By H.Anpo End
'------------<Modify End   azuma 2008/08/29 > 連結障害対応(No.21)-----------------------
        
            '桁数チェック
            '計算方法が「1」または「2」の時：12桁以下
            If Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "1" Or Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "2" Then
                If Len(Trim(Kumiire(lngCnt, C_KUM_ISSCD))) > 12 Then
                    Call func_SetActiveCell(TargetSheets, lngRow, "PX銘柄コード")
                    '"PX銘柄コード(Type of Investment)：入力に誤りがあります。"
                    Call gfunc_ErrorMsg(3, 18538, "PX銘柄コード(Type of Investment)", "計算方法が投信の場合は12桁以内で入力して下さい。" & strSubMsg)
                    GoTo EndSection
                End If
            End If
        
            '計算方法が「3」または「4」の時：60桁以下
            If Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "3" Or Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "4" Then
                If Len(Trim(Kumiire(lngCnt, C_KUM_ISSCD))) > 60 Then
                    Call func_SetActiveCell(TargetSheets, lngRow, "PX銘柄コード")
                    '"PX銘柄コード(Type of Investment)：入力に誤りがあります。"
                    Call gfunc_ErrorMsg(3, 18539, "PX銘柄コード(Type of Investment)", "計算方法が直投の場合は60桁以内で入力して下さい。" & strSubMsg)
                    GoTo EndSection
                End If
            End If
            
            'PX銘柄コードの存在チェック
            '計算方法が「1」または「2」の時チェックを行う
            If Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "1" Or Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "2" Then
                
                '前行の銘柄コードと違う場合にチェックを行う
                If strSvIssCd <> Trim(Kumiire(lngCnt, C_KUM_ISSCD)) Then
                    blnRet = func_IssCdExist(TargetSheets, Trim(Kumiire(lngCnt, C_KUM_ISSCD)))
                    If blnRet = False Then
                        Call func_SetActiveCell(TargetSheets, lngRow, "PX銘柄コード")
                        '"PX銘柄コード(Type of Investment)：該当する銘柄コードが存在しません。"
                        Call gfunc_ErrorMsg(3, 18540, "PX銘柄コード(Type of Investment)", "" & strSubMsg)
                        GoTo EndSection
                    End If
                End If
            End If
            
            '料率コード
            '必須チェック
            If Trim(Kumiire(lngCnt, C_KUM_RATE_CODE)) = "" Then
                Call func_SetActiveCell(TargetSheets, lngRow, "料率コード")
                '"料率コード：未入力です。"
                Call gfunc_ErrorMsg(3, 18541, "料率コード", strSubMsg)
                GoTo EndSection
            End If
            
            '存在チェック
            strRateCode = gKsC_fncGetCollectionItem(colRateCode, Trim(Kumiire(lngCnt, C_KUM_RATE_CODE)))
            If strRateCode = vbNullString Then
                '存在チェックエラー
                Call func_SetActiveCell(TargetSheets, lngRow, "料率コード")
                '"料率コード：該当する料率コードが存在しません。"
                Call gfunc_ErrorMsg(3, 18544, "料率コード", "" & strSubMsg)
                GoTo EndSection
            End If
            
            '運用報酬料率コード
            '必須チェック
            '計算方法が「1」または「2」の時チェックを行う
            If Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "1" Or Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "2" Then
                If Trim(Kumiire(lngCnt, C_KUM_UNYOH_HOHSHU_RATE_CODE)) = "" Then
                    Call func_SetActiveCell(TargetSheets, lngRow, "運用報酬料率コード")
                    '"運用報酬料率コード：未入力です。"
                    Call gfunc_ErrorMsg(3, 18542, "運用報酬料率コード", strSubMsg)
                    GoTo EndSection
                End If
            End If
                            
            '存在チェック
            If Trim(Kumiire(lngCnt, C_KUM_UNYOH_HOHSHU_RATE_CODE)) <> "" Then
                strRateCode = gKsC_fncGetCollectionItem(colRateCode, Trim(Kumiire(lngCnt, C_KUM_UNYOH_HOHSHU_RATE_CODE)))
                If strRateCode = vbNullString Then
                    '存在チェックエラー
                    Call func_SetActiveCell(TargetSheets, lngRow, "運用報酬料率コード")
                    '"運用報酬料率コード：該当する運用報酬料率コードが存在しません。"
                    Call gfunc_ErrorMsg(3, 18545, "運用報酬料率コード", "" & strSubMsg)
                    GoTo EndSection
                End If
            End If
        
            '必須チェック
            '最終区分
            If Trim(Kumiire(lngCnt, C_KUM_SAISHU_KBN)) = "" Then
                Call func_SetActiveCell(TargetSheets, lngRow, "最終区分")
                '"最終区分：未入力です。"
                Call gfunc_ErrorMsg(3, 18543, "最終区分", strSubMsg)
                GoTo EndSection
            End If
        
            '---------------------------
            'コミットメント金額
            'コミットメント通貨
            '成功報酬割合(分子/分母)
            '国内顧問日付種類
            '備考
            '---------------------------
            'チェックなし
        
        
            'KEY退避用変数セット
            strSvKohzaNo = Trim(Kumiire(lngCnt, C_KUM_KOHZA_NO))        'KEY退避用(口座番号)
            strSvIssCd = Trim(Kumiire(lngCnt, C_KUM_ISSCD))             'KEY退避用(銘柄コード)
        
        Next lngCnt


    End With

    func_CheckKumiire = True

EndSection:
    Set colRateCode = Nothing       '料率コード用コレクション

    Exit Function


ErrorSection:

    func_CheckKumiire = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_CheckKumiire", Err.Number, Err.Description)
    On Error GoTo 0

'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function


'*************************************************************************
'関数名　　：組入れ情報明細取得・ソート処理
'
'引　　数　：
'           TargetSheets    I       対象ワークシート
'           Kumiire         O       配列
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：組入れ情報の明細を配列に格納する
'
'更新履歴　：2008/06/05 SRA H.Anpo     新規作成
'
'*************************************************************************
Private Function func_Kumiire_To_Dim(ByRef TargetSheets As Object _
                                  , ByRef Kumiire() As Variant) As Boolean
On Error GoTo ErrorSection

    Dim lngStart        As Long
    Dim lngEnd          As Long
    Dim lngRow          As Long
    Dim lngCnt          As Long

    func_Kumiire_To_Dim = False

    '組入れ情報の先頭・最終行取得
    lngStart = TargetSheets.Range("先頭行").Row + 1
    lngEnd = TargetSheets.Range("最終行").Row - 1
    
    With TargetSheets
        ReDim Kumiire(lngEnd - lngStart + 1, C_KUM_CNT)

        For lngRow = lngStart To lngEnd
            lngCnt = lngRow - lngStart + 1
            
            Kumiire(lngCnt, C_KUM_ROWNO) = lngCnt                          '明細行番号
            Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_FROM) = .Cells(lngRow, .Range("計算期間FROM").Column)
            Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO) = .Cells(lngRow, .Range("計算期間TO").Column)
            Kumiire(lngCnt, C_KUM_KOHZA_NO) = .Cells(lngRow, .Range("口座番号").Column)
            Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH) = Mid(.Cells(lngRow, .Range("計算方法").Column), 1, 1)
            Kumiire(lngCnt, C_KUM_ISSCD) = .Cells(lngRow, .Range("PX銘柄コード").Column)
            Kumiire(lngCnt, C_KUM_RATE_CODE) = Mid(.Cells(lngRow, .Range("料率コード").Column), 1, 3)
            Kumiire(lngCnt, C_KUM_UNYOH_HOHSHU_RATE_CODE) = Mid(.Cells(lngRow, .Range("運用報酬料率コード").Column), 1, 3)
            Kumiire(lngCnt, C_KUM_COMMITMENT_GAKU) = .Cells(lngRow, .Range("コミットメント金額").Column)
            Kumiire(lngCnt, C_KUM_COMMITMENT_MNGCD) = .Cells(lngRow, .Range("コミットメント通貨").Column)
            Kumiire(lngCnt, C_KUM_SEIKOH_HOHSHU_WARIAI_BUNSHI) = .Cells(lngRow, .Range("成功報酬割合分子").Column)
            Kumiire(lngCnt, C_KUM_SEIKOH_HOHSHU_WARIAI_BUNBO) = .Cells(lngRow, .Range("成功報酬割合分母").Column)
            Kumiire(lngCnt, C_KUM_HIZUKE_SHURUI) = Mid(.Cells(lngRow, .Range("国内顧問日付種類").Column), 1, 1)
            Kumiire(lngCnt, C_KUM_SAISHU_KBN) = Mid(.Cells(lngRow, .Range("最終区分").Column), 1, 1)
            Kumiire(lngCnt, C_KUM_BIKOH) = .Cells(lngRow, .Range("備考").Column)
            Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_ID) = .Cells(lngRow, .Range("計算期間ID").Column)
            
        Next lngRow
    End With

    '口座番号、PX銘柄コード、計算期間From、計算期間Toの昇順でソートする
    Call sub_DoSort(Kumiire)

    func_Kumiire_To_Dim = True
    Exit Function

ErrorSection:

    func_Kumiire_To_Dim = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_Kumiire_To_Dim", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function



'*************************************************************************
'関数名　　：組入れ情報のソート処理
'
'引　　数　：
'           Kumiire         O       配列
'
'戻り値　　：なし
'
'機能説明　：口座番号、PX銘柄コード、計算期間From、計算期間Toの昇順でソートする
'
'更新履歴　：2008/06/05 SRA H.Anpo     新規作成
'
'*************************************************************************
Private Sub sub_DoSort(ByRef Kumiire() As Variant)

On Error GoTo ErrorSection


    Dim lngLoopCnt1     As Long
    Dim lngLoopCnt2     As Long
    Dim Work            As Variant
    Dim lngCols         As Long
    Dim lngColCnt       As Long
    Dim strSortKeyPre   As String
    Dim strSortKeyNow   As String

    strSortKeyPre = ""
    strSortKeyNow = ""


    'Work領域設定
    lngCols = C_KUM_CNT

    For lngLoopCnt1 = 1 To UBound(Kumiire) - 1

        strSortKeyPre = ""

        For lngLoopCnt2 = 1 To UBound(Kumiire)

            'ソートキー項目設定
            '口座番号、銘柄コード、計算期間From、計算期間Toの昇順でソート
            strSortKeyNow = Kumiire(lngLoopCnt2, C_KUM_KOHZA_NO) & _
                            Kumiire(lngLoopCnt2, C_KUM_ISSCD) & _
                            Kumiire(lngLoopCnt2, C_KUM_KEISAN_KIKAN_FROM) & _
                            Kumiire(lngLoopCnt2, C_KUM_KEISAN_KIKAN_TO)
            
            If Trim(strSortKeyPre) <> "" Then

                If strSortKeyPre > strSortKeyNow Then

                    For lngColCnt = 0 To lngCols
                        Work = ""
                        Work = Kumiire(lngLoopCnt2, lngColCnt)
                        Kumiire(lngLoopCnt2, lngColCnt) = Kumiire(lngLoopCnt2 - 1, lngColCnt)
                        Kumiire(lngLoopCnt2 - 1, lngColCnt) = Work
                    Next lngColCnt

                End If

            End If

            'ソートキー(前)の設定
            strSortKeyPre = strSortKeyNow

        Next lngLoopCnt2
    Next lngLoopCnt1

    Set Work = Nothing

    Exit Sub

ErrorSection:

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "sub_DoSort()", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    Set Work = Nothing

End Sub


'*************************************************************************
'関数名　　：更新処理(メイン)
'
'引　　数　：
'           TargetSheets        I           チェック対象のシート
'           Kumiire()           O           組入れ情報配列
'           lngId               O           支払期間ID(採番したもの)
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：更新
'
'更新履歴　：2008/06/06 SRA H.Anpo      新規作成
'
'*************************************************************************
Public Function gfuncKeisan_DoUpdate(ByRef TargetSheets As Object _
                                   , ByRef Kumiire() As Variant _
                                   , ByRef lngId As Long) As Boolean

On Error GoTo ErrorSection

    Dim strGiNo             As String       '外部委託先番号
    Dim lngSkikanId         As Long         '採番　　支払期間ID
    Dim lngSkikanIdFirst    As Long         '検索時　支払期間ID
    
    Dim strKohzaNo          As String       '口座番号
    Dim strError            As String
    Dim lngStatus           As Long         '更新済みチェックのステータス
    Dim lngMsgId            As Long         'エラーメッセージID


    gfuncKeisan_DoUpdate = False

    '検索時の支払期間ID　取得
    lngSkikanIdFirst = func_GetKikanIdFirst

    '外部委託先番号取得
    strGiNo = Mid(TargetSheets.Range("外部委託先").Value, 1, 1)

    'トランザクション開始
    cnAdo.BeginTrans

    If lngSkikanIdFirst = -1 Then
        '新規登録時
        
        '支払期間ＩＤの採番
        If func_GetIDfromSequence(lngSkikanId) = False Then
            GoTo RollbackSection
            Exit Function
        End If
    
        '外部委託計算期間への登録(Insert)
        If func_UpdIns_kyk_gi_keisan_kikan( _
                                 strGiNo _
                               , lngSkikanId _
                               , Kumiire() _
                               , strError) = False Then
            GoTo RollbackSection
            Exit Function
        End If
    
        '外部委託支払管理への登録(Insert)
        If func_Ins_kyk_gi_shiharai_kanri( _
                                 TargetSheets _
                               , lngSkikanId _
                               , strError) = False Then
            GoTo RollbackSection
            Exit Function
        End If
    
        '外部委託支払期間へのInsert
        If func_Ins_kyk_gi_shiharai_kikan( _
                                 TargetSheets _
                               , lngSkikanId _
                               , strError) = False Then
            GoTo RollbackSection
            Exit Function
        End If
    
    Else
        '更新時
        
        '更新済みチェックと排他処理
        If func_UpdateCheck(TargetSheets, lngStatus, lngSkikanIdFirst) = False Then
    
            If lngStatus = 1 Or lngStatus = 2 Then
                '0:正常,1:ロック,2:削除済,-1:その他
                Select Case lngStatus
                    Case 1
                    '他セッションからのロック
                        lngMsgId = 18005
                    Case 2
                    '削除済み
                        lngMsgId = 18006
                End Select
    
                'エラーメッセージ出力
                Call gfunc_ErrorMsg(3, lngMsgId, "", "")
            End If
    
            GoTo RollbackSection
            Exit Function
        End If
    
        '外部委託計算期間への登録(Update or Insert)
        If func_UpdIns_kyk_gi_keisan_kikan( _
                                 strGiNo _
                               , lngSkikanIdFirst _
                               , Kumiire() _
                               , strError) = False Then
            GoTo RollbackSection
            Exit Function
        End If
        
        '外部委託支払管理のUpdate(Update or Insert)
        If func_UpdIns_kyk_gi_shiharai_kanri( _
                                 TargetSheets _
                               , lngSkikanIdFirst _
                               , strError) = False Then
            GoTo RollbackSection
            Exit Function
        End If
        
        '外部委託支払期間のUpdate
        If func_Upd_kyk_gi_shiharai_kikan( _
                                 TargetSheets _
                               , lngSkikanIdFirst _
                               , strError) = False Then
            GoTo RollbackSection
            Exit Function
        End If
    
    
    End If

    'コミット
    cnAdo.CommitTrans

    '登録に使用した支払期間IDを戻す
    lngId = lngSkikanId

    gfuncKeisan_DoUpdate = True

    Exit Function

RollbackSection:
    'ロールバック
    cnAdo.RollbackTrans

    gfuncKeisan_DoUpdate = False
    Exit Function

ErrorSection:

    gfuncKeisan_DoUpdate = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "gfuncKeisan_DoUpdate", Err.Number, Err.Description)
    On Error GoTo 0
    On Error Resume Next
    'ロールバック
    cnAdo.RollbackTrans
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function


'*************************************************************************
'関数名　　：トランザクションチェック処理
'
'引　　数　：
'           TargetSheets    I       処理対象ワークシート
'           lngStatus       O       エラーステータス(0:正常,1:ロック,2:削除済,-1:その他)
'           lngKikanIdFirst I       検索時支払期間ID
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：外部委託支払期間テーブルの排他・ロックチェック
'
'更新履歴　：2008/06/05 SRA H.Anpo    新規作成
'
'*************************************************************************
Private Function func_UpdateCheck(ByRef TargetSheets As Object _
                                , ByRef lngStatus As Long _
                                , ByVal lngKikanIdFirst As Long) As Boolean

On Error GoTo ErrorSection
    
    Dim vData()                 As Variant
    Dim strSql                  As String
    Dim lngCol                  As Long
    Dim lngRow                  As Long
    Dim strErrCode              As String
    Dim blnRet                  As Boolean
    Dim strGiNo                 As String       '外部委託先番号


    func_UpdateCheck = False

    strErrCode = ""
    lngStatus = -1

    '外部委託先番号
    strGiNo = Mid(TargetSheets.Range("外部委託先").Value, 1, 1)

    strSql = ""
    strSql = strSql & " SELECT"
    strSql = strSql & "     SAKUJO_FLG"
    strSql = strSql & " FROM"
    strSql = strSql & "     KYK_GI_SHIHARAI_KIKAN"
    strSql = strSql & " WHERE"
    strSql = strSql & "     GI_NO                = '" & strGiNo & "'"
    strSql = strSql & " AND GI_SHIHARAI_KIKAN_ID =" & lngKikanIdFirst
    strSql = strSql & "  FOR UPDATE NOWAIT"

    'データ取得
    strErrCode = "ORA-00054"
    blnRet = gclsdb.DoExequteSql(gcSELECT, strSql, vData, lngCol, lngRow, strErrCode)

    If blnRet = False Then
        If Trim(strErrCode) <> "" Then

            If strErrCode = "ORA-00054" Then
            '他セッションからのロック状態
                lngStatus = 1
            Else
            'その他エラー
                lngStatus = -1
            End If

            Exit Function
        End If
    Else
'        Exit Function
    End If

    '削除フラグの確認
    If lngRow > 0 Then
        If CStr(vData(0, 0)) <> "0" Then
            '削除フラグが"0"以外の場合、他ユーザーから更新済み
            lngStatus = 2
            Exit Function
        End If
    End If

    lngStatus = 0
    func_UpdateCheck = True

    Exit Function

ErrorSection:

    func_UpdateCheck = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_UpdateCheck", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------


End Function


'*************************************************************************
'関数名　　：ID発番処理
'
'引　　数　：
'           lngId       I       採番したID
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：シーケンスからIDの採番
'
'更新履歴　：2008/06/06 SRA H.Anpo    新規作成
'
'*************************************************************************
Private Function func_GetIDfromSequence(ByRef lngId As Long) As Boolean

On Error GoTo ErrorSection

    Dim vData()                 As Variant
    Dim strSql                  As String
    Dim lngCol                  As Long
    Dim lngRow                  As Long
    Dim strErrCode              As String
    Dim blnRet                  As Boolean

    func_GetIDfromSequence = False

    strSql = "SELECT KYK_ID_SQ.NEXTVAL FROM DUAL"

    'データ取得
    blnRet = gclsdb.DoExequteSql(gcSELECT, strSql, vData, lngCol, lngRow, strErrCode)

    If blnRet Then
        If Trim(strErrCode) <> "" Then
            Exit Function
        Else
            If IsNumeric(vData(0, 0)) Then
                lngId = CLng(vData(0, 0))
            Else
            '数値以外
                Exit Function
            End If
        End If
    Else
        Exit Function
    End If

    func_GetIDfromSequence = True

    Exit Function

ErrorSection:

    func_GetIDfromSequence = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_GetSeikyuuId", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function


'*************************************************************************
'関数名　　：外部委託支払期間テーブル新規登録(INSERT)処理
'
'引　　数　：
'           TargetSheets    I       処理対象ワークシート
'           lngId           I       支払期間ID
'           lngKikanIdFirst I       検索時支払期間ID
'           strError        O       エラーコード
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：外部委託支払期間テーブルへINSERTを行う
'
'更新履歴　：2008/06/06 SRA H.Anpo    新規作成
'
'*************************************************************************
Private Function func_Ins_kyk_gi_shiharai_kikan(ByVal TargetSheets As Object _
                                              , ByVal lngId As Long _
                                              , ByRef strError As String) As Boolean

On Error GoTo ErrorSection

    Dim vData()                 As Variant
    Dim strSql                  As String
    Dim lngCol                  As Long
    Dim lngRow                  As Long
    Dim strErrCode              As String
    Dim blnRet                  As Boolean

    func_Ins_kyk_gi_shiharai_kikan = False

    With TargetSheets
        strSql = ""
        strSql = strSql & " INSERT INTO KYK_GI_SHIHARAI_KIKAN"
        strSql = strSql & " ("
        strSql = strSql & "     GI_NO,"                             '外部委託先番号
        strSql = strSql & "     GI_SHIHARAI_KIKAN_ID,"              '支払期間ID
        strSql = strSql & "     GI_SHIHARAI_KIKAN_FROM,"            '支払期間FROM
        strSql = strSql & "     GI_SHIHARAI_KIKAN_TO,"              '支払期間TO
        strSql = strSql & "     GI_KEIYAKU_KIKAN_FROM,"             '契約期間FROM
        strSql = strSql & "     GI_KEIYAKU_KIKAN_TO,"               '契約期間TO
        strSql = strSql & "     SHIHARAI_WARIAI_BUNSHI,"            '支払割合(分子)
        strSql = strSql & "     SHIHARAI_WARIAI_BUNBO,"             '支払割合(分母)
        strSql = strSql & "     SHOHIZEI_FLG,"                      '消費税フラグ
        strSql = strSql & "     SHOHIZEI_RITSU,"                    '消費税率
        strSql = strSql & "     GENSENZEI_FLG,"                     '源泉税フラグ
        strSql = strSql & "     GENSENZEI_RITSU,"                   '源泉税率
        strSql = strSql & "     NENKAN_NISSU_KBN,"                  '年間日数区分
        strSql = strSql & "     TOHROKU_YMD,"                       '登録日
        strSql = strSql & "     KOHSHIN_YMD,"                       '更新日
        strSql = strSql & "     KOHSHIN_PGM_ID,"                    '更新プログラムID
        strSql = strSql & "     KOHSHIN_TANTOHSHA,"                 '更新担当者
        strSql = strSql & "     SAKUJO_FLG"                         '削除フラグ
        strSql = strSql & " )"
        strSql = strSql & " VALUES"
        strSql = strSql & " ("
        strSql = strSql & "     '" & Mid(Trim(.Range("外部委託先")), 1, 1) & "',"
        strSql = strSql & "     " & lngId & ","
        strSql = strSql & "     '" & Trim(.Range("支払期間FROM")) & "',"
        strSql = strSql & "     '" & Trim(.Range("支払期間TO")) & "',"
        strSql = strSql & "     '" & Trim(.Range("契約期間FROM")) & "',"
        strSql = strSql & "     '" & Trim(.Range("契約期間TO")) & "',"
        strSql = strSql & "     " & .Range("支払割合分子") & ","
        strSql = strSql & "     " & .Range("支払割合分母") & ","
        strSql = strSql & "     '" & Mid(Trim(.Range("消費税")), 1, 1) & "',"
        strSql = strSql & "     " & IIf(Trim(.Range("消費税率")) = "", "NULL", .Range("消費税率")) & ","
        strSql = strSql & "     '" & Mid(Trim(.Range("源泉税")), 1, 1) & "',"
        strSql = strSql & "     " & IIf(Trim(.Range("源泉税率")) = "", "NULL", .Range("源泉税率")) & ","
        strSql = strSql & "     '" & Mid(Trim(.Range("年間日数")), 1, 1) & "',"
        strSql = strSql & "     SYSDATE,"
        strSql = strSql & "     SYSDATE,"
        strSql = strSql & "     '" & UPDATE_PGM_ID & "',"
        strSql = strSql & "     '" & UPDATE_USER & "',"
        strSql = strSql & "     '0'"
        strSql = strSql & " )"
    End With

    '実行
    blnRet = gclsdb.DoExequteSql(gcINSERT, strSql, vData, lngCol, lngRow, strErrCode)

    If blnRet = False Then
        If Trim(strErrCode) <> "" Then
            strError = strErrCode
        End If

        Exit Function
    End If

    Erase vData
    func_Ins_kyk_gi_shiharai_kikan = True

    Exit Function

ErrorSection:

    func_Ins_kyk_gi_shiharai_kikan = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_Ins_kyk_gi_shiharai_kikan", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    Erase vData


End Function

'*************************************************************************
'関数名　　：外部委託支払期間テーブル更新(UPDATE)処理
'
'引　　数　：
'           TargetSheets    I       処理対象ワークシート
'           lngKikanIdFirst I       検索時支払期間ID
'           strError        O       エラーコード
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：外部委託支払期間テーブルへUPDATEを行う
'
'更新履歴　：2008/06/06 SRA H.Anpo    新規作成
'
'*************************************************************************
Private Function func_Upd_kyk_gi_shiharai_kikan(ByVal TargetSheets As Object _
                                              , ByVal lngKikanIdFirst As Long _
                                              , ByRef strError As String) As Boolean

On Error GoTo ErrorSection

    Dim vData()                 As Variant
    Dim strSql                  As String
    Dim lngCol                  As Long
    Dim lngRow                  As Long
    Dim strErrCode              As String
    Dim blnRet                  As Boolean

    func_Upd_kyk_gi_shiharai_kikan = False

    With TargetSheets
        strSql = ""
        strSql = strSql & " UPDATE KYK_GI_SHIHARAI_KIKAN"
        strSql = strSql & " SET"
        strSql = strSql & "     GI_SHIHARAI_KIKAN_FROM      = '" & Trim(.Range("支払期間FROM")) & "',"
        strSql = strSql & "     GI_SHIHARAI_KIKAN_TO        = '" & Trim(.Range("支払期間TO")) & "',"
        strSql = strSql & "     GI_KEIYAKU_KIKAN_FROM       = '" & Trim(.Range("契約期間FROM")) & "',"
        strSql = strSql & "     GI_KEIYAKU_KIKAN_TO         = '" & Trim(.Range("契約期間TO")) & "',"
        strSql = strSql & "     SHIHARAI_WARIAI_BUNSHI      = " & .Range("支払割合分子") & ","
        strSql = strSql & "     SHIHARAI_WARIAI_BUNBO       = " & .Range("支払割合分母") & ","
        strSql = strSql & "     SHOHIZEI_FLG                = '" & Mid(Trim(.Range("消費税")), 1, 1) & "',"
        strSql = strSql & "     SHOHIZEI_RITSU              = " & IIf(Trim(.Range("消費税率")) = "", "NULL", .Range("消費税率")) & ","
        strSql = strSql & "     GENSENZEI_FLG               = '" & Mid(Trim(.Range("源泉税")), 1, 1) & "',"
        strSql = strSql & "     GENSENZEI_RITSU             = " & IIf(Trim(.Range("源泉税率")) = "", "NULL", .Range("源泉税率")) & ","
        strSql = strSql & "     NENKAN_NISSU_KBN            = '" & Mid(Trim(.Range("年間日数")), 1, 1) & "',"
'        strSql = strSql & "     TOHROKU_YMD,"
        strSql = strSql & "     KOHSHIN_YMD                 = SYSDATE,"
        strSql = strSql & "     KOHSHIN_PGM_ID              = '" & UPDATE_PGM_ID & "',"
        strSql = strSql & "     KOHSHIN_TANTOHSHA           = '" & UPDATE_USER & "',"
        strSql = strSql & "     SAKUJO_FLG                  = '0'"
        strSql = strSql & " WHERE"
        strSql = strSql & "     GI_NO = '" & Mid(Trim(.Range("外部委託先")), 1, 1) & "'"
        strSql = strSql & " AND GI_SHIHARAI_KIKAN_ID = " & lngKikanIdFirst & ""
    End With

    '実行
    blnRet = gclsdb.DoExequteSql(gcUPDATE, strSql, vData, lngCol, lngRow, strErrCode)

    If blnRet = False Then
        If Trim(strErrCode) <> "" Then
            strError = strErrCode
        End If

        Exit Function
    End If

    Erase vData
    func_Upd_kyk_gi_shiharai_kikan = True

    Exit Function

ErrorSection:

    func_Upd_kyk_gi_shiharai_kikan = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_Upd_kyk_gi_shiharai_kikan", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    Erase vData


End Function

'*************************************************************************
'関数名　　：外部委託支払管理テーブル新規登録(INSERT)処理
'
'引　　数　：
'           TargetSheets    I       処理対象ワークシート
'           lngId           I       支払期間ID
'           strError        O       エラーコード
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：外部委託支払管理テーブルへINSERTを行う
'
'更新履歴　：2008/06/06 SRA H.Anpo    新規作成
'
'*************************************************************************
Private Function func_Ins_kyk_gi_shiharai_kanri(ByVal TargetSheets As Object _
                                              , ByVal lngId As Long _
                                              , ByRef strError As String) As Boolean

On Error GoTo ErrorSection

    Dim vData()                 As Variant
    Dim strSql                  As String
    Dim lngCol                  As Long
    Dim lngRow                  As Long
    Dim strErrCode              As String
    Dim blnRet                  As Boolean

    func_Ins_kyk_gi_shiharai_kanri = False

    With TargetSheets
        strSql = ""
        strSql = strSql & " INSERT INTO KYK_GI_SHIHARAI_KANRI"
        strSql = strSql & " ("
        strSql = strSql & "     GI_NO,"                         '外部委託先番号
        strSql = strSql & "     GI_SHIHARAI_KIKAN_ID,"          '支払期間ID
        strSql = strSql & "     SHIHARAI_FLG,"                  '支払フラグ
        strSql = strSql & "     SOUFU_YMD,"                     '送付日
        strSql = strSql & "     SHIHARAI_YOTEI_YMD,"            '支払予定日
        strSql = strSql & "     SHIHARAI_YMD,"                  '支払日
        strSql = strSql & "     STATUS,"                        'ステータス
        strSql = strSql & "     TOHROKU_YMD,"                   '登録日
        strSql = strSql & "     KOHSHIN_YMD,"                   '更新日
        strSql = strSql & "     KOHSHIN_PGM_ID,"                '更新プログラムID
        strSql = strSql & "     KOHSHIN_TANTOHSHA,"             '更新担当者
        strSql = strSql & "     SAKUJO_FLG"                     '削除フラグ
        strSql = strSql & " )"
        strSql = strSql & " VALUES"
        strSql = strSql & " ("
        strSql = strSql & "     '" & Mid(Trim(.Range("外部委託先")), 1, 1) & "',"
        strSql = strSql & "     " & lngId & ","
        strSql = strSql & "     '1',"
        strSql = strSql & "     '" & Trim(.Range("送付日")) & "',"
        strSql = strSql & "     '" & Trim(.Range("支払予定日")) & "',"
        strSql = strSql & "     '" & Trim(.Range("支払日")) & "',"
        strSql = strSql & "     '0',"
        strSql = strSql & "     SYSDATE,"
        strSql = strSql & "     SYSDATE,"
        strSql = strSql & "     '" & UPDATE_PGM_ID & "',"
        strSql = strSql & "     '" & UPDATE_USER & "',"
        strSql = strSql & "     '0'"
        strSql = strSql & " )"
    End With

    '実行
    blnRet = gclsdb.DoExequteSql(gcINSERT, strSql, vData, lngCol, lngRow, strErrCode)

    If blnRet = False Then
        If Trim(strErrCode) <> "" Then
            strError = strErrCode
        End If

        Exit Function
    End If

    Erase vData
    func_Ins_kyk_gi_shiharai_kanri = True

    Exit Function

ErrorSection:

    func_Ins_kyk_gi_shiharai_kanri = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_Ins_kyk_gi_shiharai_kanri", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    Erase vData


End Function

'*************************************************************************
'関数名　　：外部委託支払管理テーブル更新(UPDATE)処理
'
'引　　数　：
'           TargetSheets    I       処理対象ワークシート
'           lngKikanIdFirst I       検索時支払期間ID
'           strError        O       エラーコード
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：外部委託支払管理テーブルへUPDATEを行う
'
'更新履歴　：2008/06/06 SRA H.Anpo    新規作成
'
'*************************************************************************
Private Function func_UpdIns_kyk_gi_shiharai_kanri(ByVal TargetSheets As Object _
                                              , ByVal lngKikanIdFirst As Long _
                                              , ByRef strError As String) As Boolean

On Error GoTo ErrorSection

    Dim vData()                 As Variant
    Dim strSql                  As String
    Dim lngCol                  As Long
    Dim lngRow                  As Long
    Dim strErrCode              As String
    Dim blnRet                  As Boolean

    func_UpdIns_kyk_gi_shiharai_kanri = False

    With TargetSheets
        strSql = ""
        strSql = strSql & " UPDATE KYK_GI_SHIHARAI_KANRI"
        strSql = strSql & " SET"
        strSql = strSql & "     SOUFU_YMD                   = '" & Trim(.Range("送付日")) & "',"
        strSql = strSql & "     SHIHARAI_YOTEI_YMD          = '" & Trim(.Range("支払予定日")) & "',"
        strSql = strSql & "     SHIHARAI_YMD                = '" & Trim(.Range("支払日")) & "',"
        strSql = strSql & "     KOHSHIN_YMD                 = SYSDATE,"
        strSql = strSql & "     KOHSHIN_PGM_ID              = '" & UPDATE_PGM_ID & "',"
        strSql = strSql & "     KOHSHIN_TANTOHSHA           = '" & UPDATE_USER & "',"
        strSql = strSql & "     SAKUJO_FLG                  = '0'"
        strSql = strSql & " WHERE"
        strSql = strSql & "     GI_NO                       = '" & Mid(Trim(.Range("外部委託先")), 1, 1) & "'"
        strSql = strSql & " AND GI_SHIHARAI_KIKAN_ID        = " & lngKikanIdFirst & ""
        strSql = strSql & " AND SHIHARAI_FLG                = '1'"
    End With

    '実行
    blnRet = gclsdb.DoExequteSql(gcUPDATE, strSql, vData, lngCol, lngRow, strErrCode)

    If blnRet = False Then
        If Trim(strErrCode) <> "" Then
            strError = strErrCode
        End If

        Exit Function
    End If

    '更新件数が０件の場合はINSERT処理を行う
    If lngRow <= 0 Then
        blnRet = func_Ins_kyk_gi_shiharai_kanri(TargetSheets, lngKikanIdFirst, strError)
        If blnRet = False Then
            If Trim(strErrCode) <> "" Then
                strError = strErrCode
            End If
    
            Exit Function
        End If
    End If


    Erase vData
    func_UpdIns_kyk_gi_shiharai_kanri = True

    Exit Function

ErrorSection:

    func_UpdIns_kyk_gi_shiharai_kanri = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_Upd_kyk_gi_shiharai_kanri", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    Erase vData


End Function


'*************************************************************************
'関数名　　：外部委託計算期間テーブルの登録処理
'
'引　　数　：
'           strGiNo         I       外部委託先番号
'           lngSkikanId     I       支払期間ID
'           Kumiire         I       資産情報配列
'           strError        O       エラーコード
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：外部委託計算期間テーブルへのUPDATE,INSERTを行う
'
'更新履歴　：2008/06/06 SRA H.Anpo    新規作成
'
'*************************************************************************
Private Function func_UpdIns_kyk_gi_keisan_kikan(ByVal strGiNo As String _
                                          , ByVal lngSkikanId As Long _
                                          , ByVal Kumiire As Variant _
                                          , ByRef strError As String) As Boolean

On Error GoTo ErrorSection

    Dim vData()                 As Variant
    Dim strSql                  As String
    Dim lngCol                  As Long
    Dim lngRow                  As Long
    Dim lngCnt                  As Long
    Dim blnRet                  As Boolean
    Dim strErrCode              As String
    Dim lngKkikanId             As Long     '計算期間ID
    

    func_UpdIns_kyk_gi_keisan_kikan = False

    '対象支払期間IDを持つ外部委託計算期間テーブルが存在する場合は論理削除する
    If lngSkikanId > 0 Then
        '対象支払期間IDを持つ外部委託計算期間テーブルの削除フラグをONにする
        strSql = ""
        strSql = strSql & " UPDATE KYK_GI_KEISAN_KIKAN "
        strSql = strSql & " SET"
        strSql = strSql & "     KOHSHIN_YMD       = SYSDATE, "
        strSql = strSql & "     KOHSHIN_PGM_ID    = '" & UPDATE_PGM_ID & "',"
        strSql = strSql & "     KOHSHIN_TANTOHSHA = '" & UPDATE_USER & "',"
        strSql = strSql & "     SAKUJO_FLG        = '1'"
        strSql = strSql & " WHERE "
        strSql = strSql & "     GI_NO                  = '" & strGiNo & "'"
        strSql = strSql & " AND GI_SHIHARAI_KIKAN_ID   = " & lngSkikanId & ""
        '実行
        blnRet = gclsdb.DoExequteSql(gcUPDATE, strSql, vData, lngCol, lngRow, strErrCode)
        If blnRet = False Then
            If Trim(strErrCode) <> "" Then
                strError = strErrCode
            End If
            Exit Function
        End If
    End If
    
    For lngCnt = 1 To UBound(Kumiire)

        If Not IsEmpty(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_ID)) Then
            '計算期間IDが存在する場合は更新(UPDATE)
            
            '外部委託計算期間テーブルをUPDATEする
            strSql = ""
            strSql = strSql & " UPDATE KYK_GI_KEISAN_KIKAN "
            strSql = strSql & " SET"
            strSql = strSql & "     KOHZA_NO                     = '" & func_ChkQuoteshon((Kumiire(lngCnt, C_KUM_KOHZA_NO)), "'") & "',"
            strSql = strSql & "     ISSCD                        = '" & func_ChkQuoteshon((Kumiire(lngCnt, C_KUM_ISSCD)), "'") & "',"
            strSql = strSql & "     GI_KEISAN_KIKAN_FROM         = '" & Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_FROM) & "',"
            strSql = strSql & "     GI_KEISAN_KIKAN_TO           = '" & Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO) & "',"
            strSql = strSql & "     GI_KEISAN_KIKAN_NISSU        = TO_DATE('" & Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO) & "')" & _
                                                                 " - TO_DATE('" & Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_FROM) & "') +1,"
            strSql = strSql & "     GI_KEISAN_HOHHOH             = '" & Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH) & "',"
            strSql = strSql & "     RATE_CODE                    = '" & Kumiire(lngCnt, C_KUM_RATE_CODE) & "',"
            strSql = strSql & "     UNYOH_HOHSHU_RATE_CODE       = '" & Kumiire(lngCnt, C_KUM_UNYOH_HOHSHU_RATE_CODE) & "',"
            strSql = strSql & "     SEIKOH_HOHSHU_WARIAI_BUNSHI  = NULL,"
            strSql = strSql & "     SEIKOH_HOHSHU_WARIAI_BUNBO   = NULL,"
            strSql = strSql & "     COMMITMENT_GAKU              = NULL,"
            strSql = strSql & "     COMMITMENT_MNGCD             = NULL,"
            strSql = strSql & "     TAISHOH_SEIKYU_KIKAN_ID      = NULL,"
            strSql = strSql & "     TAISHOH_HIZUKE_SHURUI        = '" & Kumiire(lngCnt, C_KUM_HIZUKE_SHURUI) & "',"
            strSql = strSql & "     GI_SAISHU_KBN                = '" & Kumiire(lngCnt, C_KUM_SAISHU_KBN) & "',"
            strSql = strSql & "     BIKOH                        = '" & func_ChkQuoteshon((Kumiire(lngCnt, C_KUM_BIKOH)), "'") & "',"
            strSql = strSql & "     KOHSHIN_YMD                  = SYSDATE, "
            strSql = strSql & "     KOHSHIN_PGM_ID               = '" & UPDATE_PGM_ID & "',"
            strSql = strSql & "     KOHSHIN_TANTOHSHA            = '" & UPDATE_USER & "',"
            strSql = strSql & "     SAKUJO_FLG                   = '0'"
            strSql = strSql & " WHERE "
            strSql = strSql & "     GI_NO                        = '" & strGiNo & "'"
            strSql = strSql & " AND GI_SHIHARAI_KIKAN_ID         = " & lngSkikanId & ""
            strSql = strSql & " AND KOHZA_NO                     = '" & func_ChkQuoteshon((Kumiire(lngCnt, C_KUM_KOHZA_NO)), "'") & "'"
            strSql = strSql & " AND ISSCD                        = '" & func_ChkQuoteshon((Kumiire(lngCnt, C_KUM_ISSCD)), "'") & "'"
            strSql = strSql & " AND GI_KEISAN_KIKAN_ID           = " & Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_ID) & ""
            '実行
            blnRet = gclsdb.DoExequteSql(gcUPDATE, strSql, vData, lngCol, lngRow, strErrCode)
            If blnRet = False Then
                If Trim(strErrCode) <> "" Then
                    strError = strErrCode
                End If
                Exit Function
            End If
        End If
        
        If IsEmpty(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_ID)) Or _
           (Not IsEmpty(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_ID)) And lngRow <= 0) Then
            '計算期間IDが存在しない場合は新規追加(INSERT)
            'または、計算期間IDが存在しUPDATE件数が０件の場合は新規追加(INSERT) <-- KEY項目が変更された場合対応
            
            '計算期間ＩＤの採番
            If func_GetIDfromSequence(lngKkikanId) = False Then
                Exit Function
            End If

            '外部委託計算期間テーブルにINSERTする
            strSql = ""
            strSql = strSql & " INSERT INTO KYK_GI_KEISAN_KIKAN "
            strSql = strSql & " ("
            strSql = strSql & "     GI_NO,"                             '外部委託先番号
            strSql = strSql & "     GI_SHIHARAI_KIKAN_ID,"              '支払期間ID
            strSql = strSql & "     KOHZA_NO,"                          '口座番号
            strSql = strSql & "     ISSCD,"                             '銘柄コード
            strSql = strSql & "     GI_KEISAN_KIKAN_ID,"                '計算期間ID
            strSql = strSql & "     GI_KEISAN_KIKAN_FROM,"              '計算期間FROM
            strSql = strSql & "     GI_KEISAN_KIKAN_TO,"                '計算期間TO
            strSql = strSql & "     GI_KEISAN_KIKAN_NISSU,"             '計算期間日数
            strSql = strSql & "     GI_KEISAN_HOHHOH,"                  '計算方法
            strSql = strSql & "     RATE_CODE,"                         '料率コード
            strSql = strSql & "     UNYOH_HOHSHU_RATE_CODE,"            '運用報酬料率コード
            strSql = strSql & "     SEIKOH_HOHSHU_WARIAI_BUNSHI,"       '成功報酬支払割合(分子)
            strSql = strSql & "     SEIKOH_HOHSHU_WARIAI_BUNBO,"        '成功報酬支払割合(分母)
            strSql = strSql & "     COMMITMENT_GAKU,"                   'コミットメント金額
            strSql = strSql & "     COMMITMENT_MNGCD,"                  'コミットメント通貨
            strSql = strSql & "     TAISHOH_SEIKYU_KIKAN_ID,"           '対象請求期間ID
            strSql = strSql & "     TAISHOH_HIZUKE_SHURUI,"             '対象日付種類
            strSql = strSql & "     GI_SAISHU_KBN,"                     '最終区分
            strSql = strSql & "     BIKOH,"                             '備考
            strSql = strSql & "     TOHROKU_YMD,"                       '登録日
            strSql = strSql & "     KOHSHIN_YMD,"                       '更新日
            strSql = strSql & "     KOHSHIN_PGM_ID,"                    '更新プログラムID
            strSql = strSql & "     KOHSHIN_TANTOHSHA,"                 '更新担当者
            strSql = strSql & "     SAKUJO_FLG"                         '削除フラグ
            strSql = strSql & ") VALUES ("
            strSql = strSql & "     '" & strGiNo & "',"
            strSql = strSql & "     " & lngSkikanId & ","
            strSql = strSql & "     '" & func_ChkQuoteshon((Kumiire(lngCnt, C_KUM_KOHZA_NO)), "'") & "',"
            strSql = strSql & "     '" & func_ChkQuoteshon((Kumiire(lngCnt, C_KUM_ISSCD)), "'") & "',"
            strSql = strSql & "     " & lngKkikanId & ","
            strSql = strSql & "     '" & Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_FROM) & "',"
            strSql = strSql & "     '" & Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO) & "',"
            strSql = strSql & "     TO_DATE('" & Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO) & "')" & _
                                                                 " - TO_DATE('" & Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_FROM) & "') +1,"
            strSql = strSql & "     '" & Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH) & "',"
            strSql = strSql & "     '" & Kumiire(lngCnt, C_KUM_RATE_CODE) & "',"
            strSql = strSql & "     '" & Kumiire(lngCnt, C_KUM_UNYOH_HOHSHU_RATE_CODE) & "',"
            strSql = strSql & "     NULL,"                              '<-- RAFIのみ対応のためNULL固定
            strSql = strSql & "     NULL,"                              '<-- 同上
            strSql = strSql & "     NULL,"                              '<-- 同上
            strSql = strSql & "     NULL,"                              '<-- 同上
            strSql = strSql & "     NULL,"                              '<-- 同上
            strSql = strSql & "     '" & Kumiire(lngCnt, C_KUM_HIZUKE_SHURUI) & "',"
            strSql = strSql & "     '" & Kumiire(lngCnt, C_KUM_SAISHU_KBN) & "',"
            strSql = strSql & "     '" & func_ChkQuoteshon((Kumiire(lngCnt, C_KUM_BIKOH)), "'") & "',"
            strSql = strSql & "     SYSDATE, "
            strSql = strSql & "     SYSDATE, "
            strSql = strSql & "     '" & UPDATE_PGM_ID & "',"
            strSql = strSql & "     '" & UPDATE_USER & "',"
            strSql = strSql & "     '0'"
            strSql = strSql & ")"
            '実行
            blnRet = gclsdb.DoExequteSql(gcINSERT, strSql, vData, lngCol, lngRow, strErrCode)
            If blnRet = False Then
                If Trim(strErrCode) <> "" Then
                    strError = strErrCode
                End If
                Exit Function
            End If
        End If
            
    Next lngCnt

    Erase vData

    func_UpdIns_kyk_gi_keisan_kikan = True

    Exit Function

ErrorSection:

    func_UpdIns_kyk_gi_keisan_kikan = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_UpdIns_kyk_gi_keisan_kikan", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

    Erase vData

End Function


'*************************************************************************
'関数名　　：検索時支払期間ID取得
'
'引　　数　：なし
'
'戻り値　　：検索時支払期間ID, 取得出来ない場合は-1
'
'機能説明　：検索時支払期間IDを取得する
'
'更新履歴　：2008/06/05 SRA H.Anpo    新規作成
'
'*************************************************************************
Private Function func_GetKikanIdFirst() As Long

    Dim lngKikanIdFirst     As Long

    If IsNull(ThisWorkbook.Worksheets(TEMPLATE_SHEETNAME).Range("検索時支払期間ID")) = False Then
        If IsNumeric(ThisWorkbook.Worksheets(TEMPLATE_SHEETNAME).Range("検索時支払期間ID")) Then
            lngKikanIdFirst = CLng(ThisWorkbook.Worksheets(TEMPLATE_SHEETNAME).Range("検索時支払期間ID"))
        Else
            lngKikanIdFirst = -1
        End If
    Else
        lngKikanIdFirst = -1
    End If

    func_GetKikanIdFirst = lngKikanIdFirst

End Function


'*************************************************************************
'関数名　　：
'
'引　　数　：
'           vntData       I       チェック対象文字列
'           strChkStr     I       チェック対象文字
'
'戻り値　　：チェック後文字列
'
'機能説明　：チェック文字が存在した場合は、2個重ねる｡
'
'更新履歴　：2006/08/25 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Function func_ChkQuoteshon(vntData As Variant, _
                                  strChkStr As String) As String

On Error GoTo ErrSection


    Dim lngDataLen  As Long     'チェック文字列の文字数
    Dim lngCnt      As Long     'カウンタ
    Dim strString   As String   '変換後の文字列

    strString = ""

'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

    'チェック文字が半角1文字以外はエラーとする。
    If LenB(StrConv(strChkStr, vbFromUnicode)) <> 1 Then
        Exit Function
    End If


    'チェック文字が存在しない場合は終了する。(正常終了)
    If InStr(vntData, strChkStr) = 0 Then
        func_ChkQuoteshon = vntData
        Exit Function
    End If

    'チェック文字列の文字数を取得する。
    lngDataLen = Len(vntData)

    '1個目のチェック文字までを取得する。
    strString = Left(vntData, InStr(vntData, strChkStr) - 1)


    '1個目のチェック文字から最後まで検索する。
    For lngCnt = InStr(vntData, strChkStr) To lngDataLen

        'チェック文字が1個あったら2個重ねる。
        If Mid(vntData, lngCnt, 1) = strChkStr Then
            strString = strString & strChkStr & Mid(vntData, lngCnt, 1)
        Else
            strString = strString & Mid(vntData, lngCnt, 1)
        End If

    Next lngCnt

    '処理成功
    func_ChkQuoteshon = strString

    Exit Function

ErrSection:

    'エラーの場合
    func_ChkQuoteshon = vntData

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "モジュールネーム", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function


'*************************************************************************
'関数名　　：口座番号の存在チェック処理
'
'引　　数　：
'           TargetSheets    I       表示シート
'           strKozaNo       I       口座番号
'           strCallOff_Date O       口座閉鎖年月日
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：口座番号の存在チェック
'
'更新履歴　：2008/06/10 SRA H.Anpo    新規作成
'        　：2010/06/22 SRA T.Mizutani  Private→Publicに変更
'
'*************************************************************************
Public Function func_KozaNoExist(ByRef TargetSheets As Object _
                                , ByVal strKozaNo As String _
                                , ByRef strCallOff_Date As String) As Boolean
    Dim strSql      As String
    Dim vData()     As Variant
    Dim lngCol      As Long
    Dim lngRow      As Long

    func_KozaNoExist = False

   strSql = ""
   strSql = strSql & " SELECT"
   strSql = strSql & "     NVL(A.CALLOFF_DATE,'0') "
   strSql = strSql & " FROM"
   strSql = strSql & "     VW_DT001D         A,"
   strSql = strSql & "     KYK_KOHZA_ZOKUSEI B"
   strSql = strSql & " WHERE"
   strSql = strSql & "     A.PRTCD       = '" & func_ChkQuoteshon(strKozaNo, "'") & "'"
   strSql = strSql & " AND A.PRTCD       = B.KOHZA_NO"
'   strSql = strSql & " AND A.SETTEI_KBN='1'"
   strSql = strSql & " "

    'データ取得
    Call gclsdb.DoExequteSql(gcSELECT, strSql, vData, lngCol, lngRow)

    Erase vData

    'データありの場合のみ正常
    If lngRow > 0 Then
        func_KozaNoExist = True
    End If

    Exit Function

ErrHandler:
    func_KozaNoExist = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_KozaNoExist", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    Erase vData
'    MsgBox "Error:func_KozaNoExist" & vbCrLf & Err.Description


End Function


'*************************************************************************
'関数名　　：PX銘柄コードの存在チェック処理
'
'引　　数　：
'           TargetSheets    I       表示シート
'           strIssCd        I       PX銘柄コード
'
'戻り値　　：Boolean (TRUE:対象銘柄あり、FALSE:対象銘柄なし)
'
'機能説明　：口座番号の存在チェック
'
'更新履歴　：2008/06/10 SRA H.Anpo    新規作成
'        　：2010/06/22 SRA T.Mizutani  Private→Publicに変更
'
'*************************************************************************
Public Function func_IssCdExist(ByRef TargetSheets As Object _
                                , ByVal strIssCd As String) As Boolean
    Dim strSql      As String
    Dim vData()     As Variant
    Dim lngCol      As Long
    Dim lngRow      As Long

    func_IssCdExist = False

   strSql = ""
   strSql = strSql & " SELECT"
   strSql = strSql & "     COUNT(*) "
   strSql = strSql & " FROM"
   strSql = strSql & "     VW_DT100D"    '銘柄属性(共通)
   strSql = strSql & " WHERE"
   strSql = strSql & "     ISSCD = '" & func_ChkQuoteshon(strIssCd, "'") & "'"
   strSql = strSql & " "

    'データ取得
    Call gclsdb.DoExequteSql(gcSELECT, strSql, vData, lngCol, lngRow)

'    Erase vData

    'データありの場合のみ正常
    If lngRow > 0 Then
        If vData(0, 0) > 0 Then
            func_IssCdExist = True
        End If
    End If

    Erase vData

    Exit Function

ErrHandler:
    func_IssCdExist = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_IssCdExist", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    Erase vData
'    MsgBox "Error:func_KozaNoExist" & vbCrLf & Err.Description


End Function


'*************************************************************************
'関数名　　：カーソル位置セット
'
'引　　数　：
'           TargetSheets            I           チェック対象のシート
'           lngRowNo                I           行番号
'           strColName              I           カラムを取得する名前
'           strColName2   Optional  I           カラムを取得する名前2
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：指定された位置のセルをアクティブにする
'
'更新履歴　：2008/06/11 SRA H.Anpo    新規作成
'
'*************************************************************************
Public Function func_SetActiveCell( _
                    ByVal TargetSheets As Object _
                  , ByVal lngRowNo As Long _
                  , ByVal strColName As String _
                  , Optional strColName2 As String = "") As Boolean

On Error GoTo ErrorSection

    func_SetActiveCell = False

    With TargetSheets
        
        'セルをアクティブにする
        If strColName2 = "" Then
            .Cells(lngRowNo, .Range(strColName).Column).Activate
        Else
            .Range(.Cells(lngRowNo, .Range(strColName).Column), .Cells(lngRowNo, .Range(strColName2).Column)).Activate
        End If
    End With

    func_SetActiveCell = True

    Exit Function

ErrorSection:

    func_SetActiveCell = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_SetActiveCell", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function

