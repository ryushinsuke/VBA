Attribute VB_Name = "bas60RateSet"
Option Explicit

'*************************************************************************
'
'プロジェクト名：外部委託ライセンスフィー計算システム
'
'オブジェクト名：bas60RateSet
'
'機能概要　：料率コード補充処理
'
'更新履歴　：2010/06/22 SRA T.Mizutani    新規作成
'
'*************************************************************************

Const MODULE_NAME = "bas60RateSet"

'=======================================
'組入れ情報配列の番号定義
'=======================================
Const C_KUM_ROWNO = 0                           '行番号
Const C_KUM_KEISAN_KIKAN_FROM = 1               '計算期間FROM
Const C_KUM_KEISAN_KIKAN_TO = 2                 '計算期間TO
Const C_KUM_KOHZA_NO = 3                        '口座番号
Const C_KUM_KEISAN_HOHHOH = 4                   '計算方法
Const C_KUM_ISSCD = 5                           'PX銘柄コード
Const C_KUM_RATE_CODE = 6                       '料率コード

Const C_KUM_CNT = 6                            '組入れ情報の項目数


'*************************************************************************
'関数名　　：補充前入力チェック処理
'
'引　　数　：TargetSheets        I           チェック対象のシート
'            Kumiire()           O           組入れ情報配列
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：メインシートの料率コード補充時入力チェックを行う
'
'更新履歴　：2010/06/22 SRA T.Mizutani    新規作成
'
'*************************************************************************
Public Function gfunc_RateSetInputCheck(ByRef TargetSheets As Object _
                                        , ByRef Kumiire() As Variant) As Boolean
On Error GoTo ErrorSection

    Dim lngCnt          As Long
    Dim blnRet          As Boolean
    Dim strSubMsg       As String       '付加メッセージ
    Dim lngRow          As Long
    Dim strCallOff_Date As String       '(将来用)現状は口座閉鎖フラグをチェックしていない
    
    gfunc_RateSetInputCheck = False
    
    '変数の初期化
    ReDim Kumiire(0)
    
    With TargetSheets
    
        '組入れ情報の配列への取込
        If func_Kumiire_To_Dim(TargetSheets, Kumiire) = False Then
            GoTo EndSection
        End If
    
        For lngCnt = 0 To UBound(Kumiire)
        
            '付加メッセージの編集
            strSubMsg = vbCrLf & "組入れ情報 " & Kumiire(lngCnt, C_KUM_ROWNO) & "行目" _
                        & vbCrLf & " 計算期間(" & Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_FROM) & "〜" & Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO) & ")" _
                        & " 口座番号(" & Kumiire(lngCnt, C_KUM_KOHZA_NO) & ")" _
                        & " PX銘柄コード  (" & Kumiire(lngCnt, C_KUM_ISSCD) & ")"
            
            'シート上の行番号取得
            lngRow = .Range("先頭行").Row + Kumiire(lngCnt, C_KUM_ROWNO)
            
            '計算期間TO
            '必須チェック
            If Trim(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO)) = "" Then
                Call func_SetActiveCell(TargetSheets, lngRow, "計算期間TO")
                '"計算期間(To)：未入力です。"
                Call gfunc_ErrorMsg(3, 18527, "計算期間(To)", strSubMsg)
                GoTo EndSection
            End If
            
            '計算期間TO
            '日付の妥当性チェック
            If gfunc_CheckDate(Trim(CStr(Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO)))) = False Then
                Call func_SetActiveCell(TargetSheets, lngRow, "計算期間TO")
                '"計算期間(To)：入力に誤りがあります。"
                Call gfunc_ErrorMsg(3, 18529, "計算期間(To)", "日付として認識できません。YYYYMMDD形式で入力して下さい。" & strSubMsg)
                GoTo EndSection
            End If
            
            '口座番号
            '必須チェック
            If Trim(Kumiire(lngCnt, C_KUM_KOHZA_NO)) = "" Then
                Call func_SetActiveCell(TargetSheets, lngRow, "口座番号")
                '"口座番号：未入力です。"
                Call gfunc_ErrorMsg(3, 18533, "口座番号", strSubMsg)
                GoTo EndSection
            End If
            
            '桁数チェック
            If Len(Trim(Kumiire(lngCnt, C_KUM_KOHZA_NO))) <> 7 Then
                Call func_SetActiveCell(TargetSheets, lngRow, "口座番号")
                '"口座番号：入力に誤りがあります。"
                Call gfunc_ErrorMsg(3, 18534, "口座番号", "7桁で入力して下さい。" & strSubMsg)
                GoTo EndSection
            End If
            
            '口座番号の存在チェック
            blnRet = func_KozaNoExist(TargetSheets, Trim(Kumiire(lngCnt, C_KUM_KOHZA_NO)), strCallOff_Date)
            If blnRet = False Then
                Call func_SetActiveCell(TargetSheets, lngRow, "口座番号")
                '"口座番号：該当する口座番号が存在しません。"
                Call gfunc_ErrorMsg(3, 18535, "口座番号", "" & strSubMsg)
                GoTo EndSection
            End If
            
            'PX銘柄コード
            '必須チェック
            If Trim(Kumiire(lngCnt, C_KUM_ISSCD)) = "" Then
                Call func_SetActiveCell(TargetSheets, lngRow, "PX銘柄コード")
                '"PX銘柄コード(Type of Investment)：未入力です。"
                Call gfunc_ErrorMsg(3, 18537, "PX銘柄コード(Type of Investment)", strSubMsg)
                GoTo EndSection
            End If
            
            '桁数チェック
            '計算方法が「1」または「2」の時：12桁以下
            If Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "1" Or Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "2" Then
                If Len(Trim(Kumiire(lngCnt, C_KUM_ISSCD))) > 12 Then
                    Call func_SetActiveCell(TargetSheets, lngRow, "PX銘柄コード")
                    '"PX銘柄コード(Type of Investment)：入力に誤りがあります。"
                    Call gfunc_ErrorMsg(3, 18538, "PX銘柄コード(Type of Investment)", "計算方法が投信の場合は12桁以内で入力して下さい。" & strSubMsg)
                    GoTo EndSection
                End If
            End If
            
            '計算方法が「3」または「4」の時：60桁以下
            If Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "3" Or Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "4" Then
                If Len(Trim(Kumiire(lngCnt, C_KUM_ISSCD))) > 60 Then
                    Call func_SetActiveCell(TargetSheets, lngRow, "PX銘柄コード")
                    '"PX銘柄コード(Type of Investment)：入力に誤りがあります。"
                    Call gfunc_ErrorMsg(3, 18539, "PX銘柄コード(Type of Investment)", "計算方法が直投の場合は60桁以内で入力して下さい。" & strSubMsg)
                    GoTo EndSection
                End If
            End If
            
            'PX銘柄コードの存在チェック
            '計算方法が「1」または「2」の時チェックを行う
            If Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "1" Or Trim(Kumiire(lngCnt, C_KUM_KEISAN_HOHHOH)) = "2" Then
                blnRet = func_IssCdExist(TargetSheets, Trim(Kumiire(lngCnt, C_KUM_ISSCD)))
                If blnRet = False Then
                    Call func_SetActiveCell(TargetSheets, lngRow, "PX銘柄コード")
                    '"PX銘柄コード(Type of Investment)：該当する銘柄コードが存在しません。"
                    Call gfunc_ErrorMsg(3, 18540, "PX銘柄コード(Type of Investment)", "" & strSubMsg)
                    GoTo EndSection
                End If
            End If
            
        Next lngCnt
    
    End With
    
    gfunc_RateSetInputCheck = True
    Exit Function
    
EndSection:
    Exit Function

ErrorSection:
    gfunc_RateSetInputCheck = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "gfunc_RateSetInputCheck", Err.Number, Err.Description)
    On Error GoTo 0
'---- Error Log End   ----------------------------------------------------

End Function

'*************************************************************************
'関数名　　：組入れ情報明細取得
'
'引　　数　：
'           TargetSheets    I       対象ワークシート
'           Kumiire()       O       組入れ情報配列
'
'戻り値　　：Boolean (TRUE:正常、FALSE:エラー)
'
'機能説明　：料率コード補充対象の組入れ情報の明細を配列に格納する
'
'更新履歴　：2010/06/22 SRA T.Mizutani    新規作成
'
'*************************************************************************
Private Function func_Kumiire_To_Dim(ByRef TargetSheets As Object _
                                    , ByRef Kumiire() As Variant) As Boolean
On Error GoTo ErrorSection

    Dim lngStart        As Long
    Dim lngEnd          As Long
    Dim lngRow          As Long
    Dim lngCnt          As Long
    Dim lngTaishou      As Long
    
    func_Kumiire_To_Dim = False
    
    '組入れ情報の先頭・最終行取得
    lngStart = TargetSheets.Range("先頭行").Row + 1
    lngEnd = TargetSheets.Range("最終行").Row - 1
    
    lngTaishou = 0
    
    With TargetSheets
    
        '二次元配列の確保
        For lngRow = lngStart To lngEnd
            If Trim(.Cells(lngRow, .Range("料率コード").Column)) = "" Then
                lngCnt = lngCnt + 1
            End If
        Next lngRow
        
        If lngCnt > 0 Then
            ReDim Kumiire(lngCnt - 1, C_KUM_CNT)
        End If
        
        For lngRow = lngStart To lngEnd
            lngCnt = lngRow - lngStart + 1
            
            '料率コード欄がブランクの箇所だけ対象にする
            If Trim(.Cells(lngRow, .Range("料率コード").Column)) = "" Then
                
                Kumiire(lngTaishou, C_KUM_ROWNO) = lngCnt        '明細行番号
                Kumiire(lngTaishou, C_KUM_KEISAN_KIKAN_FROM) = .Cells(lngRow, .Range("計算期間FROM").Column)
                Kumiire(lngTaishou, C_KUM_KEISAN_KIKAN_TO) = .Cells(lngRow, .Range("計算期間TO").Column)
                Kumiire(lngTaishou, C_KUM_KOHZA_NO) = .Cells(lngRow, .Range("口座番号").Column)
                Kumiire(lngTaishou, C_KUM_KEISAN_HOHHOH) = Mid(.Cells(lngRow, .Range("計算方法").Column), 1, 1)
                Kumiire(lngTaishou, C_KUM_ISSCD) = .Cells(lngRow, .Range("PX銘柄コード").Column)
                
                lngTaishou = lngTaishou + 1
            End If
            
        Next lngRow
        
    End With
    
    '補充対象がなければメッセージを出して終了
    If lngTaishou = 0 Then
        Call gfunc_ErrorMsg(3, 18550, "", "", True)
        Exit Function
    End If
    
    func_Kumiire_To_Dim = True
    Exit Function
    
ErrorSection:
    func_Kumiire_To_Dim = False
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_Kumiire_To_Dim", Err.Number, Err.Description)
    On Error GoTo 0
'---- Error Log End   ----------------------------------------------------

End Function

'*************************************************************************
'関数名　　：料率コード補充処理
'
'引　　数　：
'           TargetSheets    I       対象ワークシート
'           Kumiire()       O       組入れ情報配列
'
'戻り値　　：Boolean　(TRUE:正常, FALSE:エラー)
'
'機能説明　：料率コード補充を実行する
'
'更新履歴　：2010/06/22 SRA T.Mizutani    新規作成
'
'*************************************************************************
Public Function gfunc_DoRateSet(ByRef TargetSheets As Object, ByRef Kumiire() As Variant) As Boolean
On Error GoTo Error_Section

    Dim blnRet          As Boolean
    Dim lngCnt          As Long
    Dim rate_cd         As String
    
    gfunc_DoRateSet = False
    
    'テーブル検索処理
    For lngCnt = 0 To UBound(Kumiire)
    
        blnRet = func_GetRateInfo(Kumiire(lngCnt, C_KUM_KOHZA_NO), Kumiire(lngCnt, C_KUM_ISSCD), _
                                    Kumiire(lngCnt, C_KUM_KEISAN_KIKAN_TO), rate_cd)
                                    
        If blnRet = False Then
            Exit Function
        End If
        
        Kumiire(lngCnt, C_KUM_RATE_CODE) = rate_cd
        
    Next lngCnt
    
    '取得データの画面設定
    blnRet = func_SetRateInfo(TargetSheets, Kumiire)
    
    If blnRet = False Then
        Exit Function
    End If

    gfunc_DoRateSet = True
    
    Exit Function

Error_Section:

    gfunc_DoRateSet = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "gfunc_DoRateSet", Err.Number, Err.Description)
    On Error GoTo 0
'---- Error Log End   ----------------------------------------------------

End Function

'*************************************************************************
'関数名　　：料率コード取得処理
'
'引　　数　：
'           kouza_no            I       口座番号
'           meigara_cd          I       PX銘柄コード
'           keisan_kikan_to     I       計算期間To
'           rate_cd             O       料率コード
'
'戻り値　　：Boolean
'
'機能説明　：資産・PX銘柄、料率適用期間をもとに料率コードを検索する
'
'更新履歴　：2010/06/22 SRA T.Mizutani    新規作成
'
'*************************************************************************
Private Function func_GetRateInfo(ByVal kouza_no As String, ByVal meigara_cd As String, _
                                    ByVal keisan_kikan_to As String, ByRef rate_cd As String) As Boolean
On Error GoTo ErrHandler
    
    Dim strSql      As String
    Dim lngRow      As Long
    Dim lngCol      As Long
    Dim vData()     As Variant
    Dim strErrCode  As String
    
    Dim shisan_bunrui As String
    Dim shisan_code   As String
    
    func_GetRateInfo = False
    
    '資産・PX銘柄対応から資産を取得
    strSql = ""
    strSql = strSql & " SELECT"
    strSql = strSql & "     SHISAN_BUNRUI,"
    strSql = strSql & "     SHISAN_CODE"
    strSql = strSql & " FROM"
    strSql = strSql & "     KYK_SHISAN_PX"
    strSql = strSql & " WHERE"
    strSql = strSql & "     SHISAN_BUNRUI = '0'"
    strSql = strSql & " AND GAIBU_CODE    = '" & meigara_cd & "'"
    strSql = strSql & " AND SAKUJO_FLG    = '0'"
    
    'データ取得
    Call gclsdb.DoExequteSql(gcSELECT, strSql, vData, lngCol, lngRow, strErrCode)

    If Trim(strErrCode) <> "" Then
        Exit Function
    End If
    
    If lngRow = 1 Then
        shisan_bunrui = vData(0, 0)
        shisan_code = vData(1, 0)
    Else
        '取得できなかったら口座トータルに変える
        shisan_bunrui = "0"
        shisan_code = "0000"
    End If
    
    '料率適用期間から料率コードを取得
    strSql = ""
    strSql = strSql & " SELECT"
    strSql = strSql & "     RATE_CODE"
    strSql = strSql & " FROM"
    strSql = strSql & "     KYK_RATE_TEKIYOH_KIKAN"
    strSql = strSql & " WHERE"
    strSql = strSql & "     KOHZA_NO                   = '" & kouza_no & "'"
    strSql = strSql & " AND SHISAN_BUNRUI              = '" & shisan_bunrui & "'"
    strSql = strSql & " AND SHISAN_CODE                = '" & shisan_code & "'"
    strSql = strSql & " AND RATE_TEKIYOH_KIKAN_FROM    <= " & keisan_kikan_to
    strSql = strSql & " AND RATE_TEKIYOH_KIKAN_TO      >= " & keisan_kikan_to
    strSql = strSql & " AND SAKUJO_FLG                 = '0'"
    
    'データ取得
    Call gclsdb.DoExequteSql(gcSELECT, strSql, vData, lngCol, lngRow, strErrCode)
    
    If Trim(strErrCode) <> "" Then
        Exit Function
    End If
    
    If lngRow = 1 Then
        rate_cd = vData(0, 0)
    Else
        '取得できなかったら口座トータルに変えて再取得する
        strSql = ""
        strSql = strSql & " SELECT"
        strSql = strSql & "     RATE_CODE"
        strSql = strSql & " FROM"
        strSql = strSql & "     KYK_RATE_TEKIYOH_KIKAN"
        strSql = strSql & " WHERE"
        strSql = strSql & "     KOHZA_NO                   = '" & kouza_no & "'"
        strSql = strSql & " AND SHISAN_BUNRUI              = '0'"
        strSql = strSql & " AND SHISAN_CODE                = '0000'"
        strSql = strSql & " AND RATE_TEKIYOH_KIKAN_FROM    <= " & keisan_kikan_to
        strSql = strSql & " AND RATE_TEKIYOH_KIKAN_TO      >= " & keisan_kikan_to
        strSql = strSql & " AND SAKUJO_FLG                 = '0'"
        
        'データ取得
        Call gclsdb.DoExequteSql(gcSELECT, strSql, vData, lngCol, lngRow, strErrCode)
        
        If Trim(strErrCode) <> "" Then
            Exit Function
        End If
        
        If lngRow = 1 Then
            rate_cd = vData(0, 0)
        Else
            '取得できなかったらブランクとする
            rate_cd = ""
        End If
        
    End If
    
    Erase vData
    func_GetRateInfo = True
    
    Exit Function

ErrHandler:
    func_GetRateInfo = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_GetRateInfo", Err.Number, Err.Description)
    On Error GoTo 0
'---- Error Log End   ----------------------------------------------------

End Function

'*************************************************************************
'関数名　　：料率コードを設定する
'
'引　　数　：
'           TargetSheets    O       ワークシート
'           Kumiire()       O       組入れ情報配列
'
'戻り値　　：Boolean
'
'機能説明　：処理対象ワークシートに料率コードを設定する。
'
'更新履歴　：2010/06/22 SRA T.Mizutani    新規作成
'
'*************************************************************************
Private Function func_SetRateInfo(ByRef TargetSheets As Object _
                                  , ByRef Kumiire() As Variant) As Boolean

On Error GoTo ErrHandler

    Dim lngStartRow     As Long
    Dim lngCnt          As Long
    Dim lngDispRow      As Long

    func_SetRateInfo = False

    With TargetSheets
        
        '明細行の先頭番号取得
        lngStartRow = .Range("先頭行").Row
        
        For lngCnt = 0 To UBound(Kumiire)
            'データの設定
            .Cells(lngStartRow + Kumiire(lngCnt, C_KUM_ROWNO), .Range("料率コード").Column).Value = Kumiire(lngCnt, C_KUM_RATE_CODE)
            
            '背景色の設定
            .Cells(lngStartRow + Kumiire(lngCnt, C_KUM_ROWNO), .Range("料率コード").Column).Select
            With Selection.Interior
                .ColorIndex = 6
                .Pattern = xlSolid
            End With
            
            '設定した最初の行を記憶
            If lngCnt = 0 Then
                lngDispRow = lngStartRow + Kumiire(lngCnt, C_KUM_ROWNO)
            End If
            
        Next lngCnt
        
    End With
    
    '設定した最初のセルをアクティブにする
    Call func_SetActiveCell(TargetSheets, lngDispRow, "料率コード")
    
    func_SetRateInfo = True
    
    Exit Function

ErrHandler:
    func_SetRateInfo = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_SetRateInfo", Err.Number, Err.Description)
    On Error GoTo 0
'---- Error Log End   ----------------------------------------------------

End Function


