Attribute VB_Name = "basClickRunBtn5100"
Option Explicit

'*************************************************************************
'プロジェクト名：新契約管理システム・業務帳票作成指示
'オブジェクト名：basClickRunBtn5100
'機能概要　：資産一覧表
'更新履歴　：2008/02/18 SRA市川     新規作成
'
'*************************************************************************

Const MODULE_NAME = "basClickRunBtn5100"

Private Const cBaseFile = gc帳票Base9
Private Const cPreFName = gc帳票名9

Private Const cShukeiIppan = "01"   '勘定コード集計型　一般資産
Private Const cShisanA = "A1"       '資産A（勘定コード集計型　調整資産(+)）
Private Const cPXIppan = "02"       'PX銘柄指定型　一般資産
Private Const cPXChosei = "B2"      'PX銘柄指定型　調整資産(-)
Private Const cT21Chosei = "Z2"     'T21調整資産

'資産構造体(合成資産以外)
Private Type typShisan
    ShisanBunrui        As String   '資産分類
    ShisanCode          As String   '資産コード
    ShisanName          As String   '資産名
    ShisanPName         As String   '帳票資産名
    KanJohMeigaraOyaKbn As String   '勘定銘柄親区分
    GaibuCode           As String   '外部コード
    HohshuRate          As String   '報酬レート
    JikaTaniKuchisu     As String   '時価単位口数
    T21KohzaNo          As String   'T21口座番号
End Type

'資産構造体(合成資産)
Private Type typGohseiShisan
    ShisanBunrui        As String   '資産分類
    ShisanCode          As String   '資産コード
    ShisanName          As String   '資産名
    ShisanPName         As String   '帳票資産名
    ShisanKagenKbn      As String   '加減区分
    KoShisanBunrui      As String   '子資産分類
    KoShisanCode        As String   '子資産コード
    KoShisanName        As String   '子資産名
End Type

'*************************************************************************
'関数名　　：資産一覧表(帳票作成)
'引　　数　：
'           objTarget        I           対象のシート
'戻り値　　：
'機能説明　：
'更新履歴　：2008/02/18 SRA市川     新規作成
'
'*************************************************************************
Public Function fncClickRunBtn5100(ByRef objTarget As Object) As Boolean
    
    Const PROCEDURE_NAME As String = "fncClickRunBtn5100"

On Error GoTo ErrSection

    Dim strOutFName         As String           '帳票ファイル名
    Dim strShisan()         As typShisan        '資産一覧(合成資産以外)
    Dim strGohseiShisan()   As typGohseiShisan  '合成資産一覧
    
    Call subBeginProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME)
    
    fncClickRunBtn5100 = False
   
    With objTarget

        ' 作成選択の場合
        If .chkMake.Value = True Then

            ' データ取得
            If fncGetDBData5100(strShisan(), strGohseiShisan()) = False Then
                GoTo RtnErrSection
            End If
        
            ' 帳票ファイル取得
            If fncGetFile5100(strOutFName) = False Then
                GoTo RtnErrSection
            End If
        
            ' フォルダをつける。
            strOutFName = .Range("保存フォルダ").Value & "\" & strOutFName
            
            ' ファイルコピー
            If fncCopyBook(cBaseFile, strOutFName) = False Then
                GoTo RtnErrSection
            End If
            
            ' ファイル作成
            If fncMakeBook5100(strOutFName, strShisan(), strGohseiShisan()) = False Then
                ' ファイル削除
                Call fncDeleteFile(strOutFName)
                
                GoTo RtnErrSection
            End If
        End If
    
        ' 印刷選択の場合
        If .chkPrint.Value = True Then
            ' ファイル印刷
            If fncPrintBook(cPreFName, .Range("保存フォルダ").Value) = False Then
                GoTo RtnErrSection
            End If
        End If
    
    End With
   
    fncClickRunBtn5100 = True
    Erase strShisan
    Erase strGohseiShisan
    
    Call subEndProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME)
    
    Exit Function
    
'*******************************************************
'* エラーセクション                                     *
'*******************************************************
ErrSection:

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
'   Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    
'*******************************************************
'* リターンエラーセクション                              *
'*******************************************************
RtnErrSection:
                
    fncClickRunBtn5100 = False
    Erase strShisan
    Erase strGohseiShisan
    
End Function

'*************************************************************************
'関数名　　：資産一覧表(帳票ファイル取得)
'引　　数　：
'           strOutFName        O           出力ファイル名
'戻り値　　：処理結果
'機能説明　：資産一覧表を出力するファイルを取得する。
'更新履歴　：2008/02/18 SRA市川     新規作成
'
'*************************************************************************
Public Function fncGetFile5100(ByRef strOutFName As String) As Boolean
    
    Const PROCEDURE_NAME As String = "fncGetFile5100"

On Error GoTo ErrSection

    Dim strDate         As String
    Dim strTime         As String

    strOutFName = ""
    
    fncGetFile5100 = False
    
    Call gfunc_GetSvDateTime(strDate, strTime)
       
    ' 出力帳票ファイル
    strOutFName = cPreFName
    strOutFName = strOutFName & "_" & strDate
    strOutFName = strOutFName & "_" & strTime
    strOutFName = strOutFName & ".xls"
    
    fncGetFile5100 = True
    
    Exit Function
    
'*******************************************************
'* エラーセクション                                 　  *
'*******************************************************
ErrSection:

    fncGetFile5100 = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
'   Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    
End Function

'*************************************************************************
'関数名　　：資産一覧表(帳票データ取得)
'引　　数　：
'           strShisan()         O           取得データ
'           strGohseiShisan()   O           取得データ
'戻り値　　：処理結果
'機能説明　：資産一覧表のデータを取得する。
'更新履歴　：2008/02/18 SRA市川     新規作成
'
'*************************************************************************
Public Function fncGetDBData5100(ByRef strShisan() As typShisan, ByRef strGohseiShisan() As typGohseiShisan) As Boolean
    
    Const PROCEDURE_NAME As String = "fncGetDBData5100"

On Error GoTo ErrSection

    Dim strSql              As String
    Dim blnRet              As Boolean
    Dim lngShisanCnt        As Long
    Dim lngGohseiShisanCnt  As Long
    
    fncGetDBData5100 = False
    
    blnRet = False
    
    '①資産一覧を取得(合成資産以外)
    blnRet = fncGetSisan(strShisan(), lngShisanCnt)
    
    If blnRet = False Then
        Exit Function
    End If

    '②合成資産一覧を取得
    blnRet = fncGetGohseiSisan(strGohseiShisan(), lngGohseiShisanCnt)
    
    If blnRet = False Then
        Exit Function
    End If
    
    '資産が1件も存在しない場合
    If lngShisanCnt = 0 And lngGohseiShisanCnt = 0 Then
        ' 該当データが存在しません。
        Call gfunc_ErrorMsg(gcMsgKbn_3, gcMsgId3001, cPreFName, "")
        Exit Function
    End If

    fncGetDBData5100 = True
    
    Exit Function
    
'*******************************************************
'* エラーセクション                                 　  *
'*******************************************************
ErrSection:

    fncGetDBData5100 = False

'---- エラーログ出力 Start --------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
'   Err.Raise lng
'---- エラーログ出力 End  ---------------------------------

    Erase strShisan
    Erase strGohseiShisan
   
End Function

'*************************************************************************
'関数名　　：資産一覧取得
'引　　数　：
'           strData()          O           取得データ
'戻り値　　：処理結果
'機能説明　：資産一覧表の合成資産以外の資産データを取得する。
'更新履歴　：2008/02/18 SRA市川     新規作成
'
'*************************************************************************
Public Function fncGetSisan(ByRef strData() As typShisan, ByRef lngRow As Long) As Boolean
    
    Const PROCEDURE_NAME As String = "fncGetSisan"

On Error GoTo ErrSection

    Dim strSql      As String
    Dim vData()     As Variant
    Dim lngCol      As Long
    Dim lngRowCnt   As Long
    
    fncGetSisan = False
    
'*******************************************************
'* SQL文作成                                           *
'*******************************************************

    strSql = ""
    strSql = strSql & "SELECT" & vbCrLf
    strSql = strSql & "    A.SHISAN_BUNRUI," & vbCrLf
    strSql = strSql & "    A.SHISAN_CODE," & vbCrLf
    strSql = strSql & "    A.SHISAN_NAME," & vbCrLf
    strSql = strSql & "    A.SHISAN_PNAME," & vbCrLf
    strSql = strSql & "    A.KANJOH_MEIGARA_OYA_KBN," & vbCrLf
    strSql = strSql & "    DECODE(A.SHISAN_BUNRUI" & vbCrLf
    strSql = strSql & "          ,'Z', C.GAIBU_CODE" & vbCrLf
    strSql = strSql & "              , B.GAIBU_CODE) GAIBU_CODE," & vbCrLf
    strSql = strSql & "    C.HOHSHU_RATE," & vbCrLf
    strSql = strSql & "    C.JIKA_TANI_KUCHISU," & vbCrLf
    strSql = strSql & "    C.T21_KOHZA_NO" & vbCrLf
    strSql = strSql & "FROM" & vbCrLf
    strSql = strSql & "    KYK_SHISAN     A" & vbCrLf
    strSql = strSql & "   ,KYK_SHISAN_PX  B" & vbCrLf
    strSql = strSql & "   ,KYK_SHISAN_T21 C" & vbCrLf
    strSql = strSql & "WHERE" & vbCrLf
    strSql = strSql & "    A.KANJOH_MEIGARA_OYA_KBN IN('1', '2')" & vbCrLf
    strSql = strSql & "AND A.SAKUJO_FLG    = '0'" & vbCrLf
    strSql = strSql & "AND A.SHISAN_BUNRUI = B.SHISAN_BUNRUI(+)" & vbCrLf
    strSql = strSql & "AND A.SHISAN_CODE   = B.SHISAN_CODE  (+)" & vbCrLf
    strSql = strSql & "AND B.SAKUJO_FLG(+) = '0'" & vbCrLf
    strSql = strSql & "AND A.SHISAN_BUNRUI = C.SHISAN_BUNRUI(+)" & vbCrLf
    strSql = strSql & "AND A.SHISAN_CODE   = C.SHISAN_CODE  (+)" & vbCrLf
    strSql = strSql & "AND C.SAKUJO_FLG(+) = '0'" & vbCrLf
    strSql = strSql & "ORDER BY" & vbCrLf
    strSql = strSql & "    KANJOH_MEIGARA_OYA_KBN," & vbCrLf
    strSql = strSql & "    SHISAN_BUNRUI," & vbCrLf
    strSql = strSql & "    SHISAN_CODE" & vbCrLf

    'データ取得
    Call gclsDB.DoExequteSql(gcSELECT, strSql, vData, lngCol, lngRow)
    
    ReDim strData(0)
    
    If lngRow > 0 Then
        ' 動的配列変数に対するメモリ領域の再割り当てを行います
        ReDim strData(lngRow - 1)
        
        '取得データを配列に設定
        For lngRowCnt = 0 To lngRow - 1
            With strData(lngRowCnt)
                .ShisanBunrui = CStr(vData(0, lngRowCnt))           '資産分類
                .ShisanCode = CStr(vData(1, lngRowCnt))             '資産コード
                .ShisanName = CStr(vData(2, lngRowCnt))             '資産名
                .ShisanPName = CStr(vData(3, lngRowCnt))            '帳票資産名
                .KanJohMeigaraOyaKbn = CStr(vData(4, lngRowCnt))    '勘定銘柄親区分
                .GaibuCode = CStr(vData(5, lngRowCnt))              '外部コード
                .HohshuRate = CStr(vData(6, lngRowCnt))             '報酬レート
                .JikaTaniKuchisu = CStr(vData(7, lngRowCnt))        '時価単位口数
                .T21KohzaNo = CStr(vData(8, lngRowCnt))             'T21口座番号
            End With
        Next lngRowCnt
    End If
    
    fncGetSisan = True
    
    Erase vData
    
    Exit Function
    
'*******************************************************
'* エラーセクション                                 　  *
'*******************************************************
ErrSection:

    fncGetSisan = False

'---- エラーログ出力 Start --------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
'   Err.Raise lng
'---- エラーログ出力 End  ---------------------------------

    Erase vData
   
End Function

'*************************************************************************
'関数名　　：合成資産取得
'引　　数　：
'           strData()          O           取得データ
'戻り値　　：処理結果
'機能説明　：資産一覧表の合成資産データを取得する。
'更新履歴　：2008/02/18 SRA市川     新規作成
'
'*************************************************************************
Public Function fncGetGohseiSisan(ByRef strData() As typGohseiShisan, ByRef lngRow As Long) As Boolean
    
    Const PROCEDURE_NAME As String = "fncGetGohseiSisan"

On Error GoTo ErrSection

    Dim strSql      As String
    Dim vData()     As Variant
    Dim lngCol      As Long
    Dim lngRowCnt   As Long
    
    fncGetGohseiSisan = False

'*******************************************************
'* SQL文作成                                           *
'*******************************************************

    strSql = ""
    strSql = strSql & "SELECT" & vbCrLf
    strSql = strSql & "    A.SHISAN_BUNRUI," & vbCrLf
    strSql = strSql & "    A.SHISAN_CODE," & vbCrLf
    strSql = strSql & "    A.SHISAN_NAME," & vbCrLf
    strSql = strSql & "    A.SHISAN_PNAME," & vbCrLf
    strSql = strSql & "    DECODE(B.SHISAN_KAGEN_KBN, 1, '+', -1, '-', '') ," & vbCrLf
    strSql = strSql & "    B.KO_SHISAN_BUNRUI," & vbCrLf
    strSql = strSql & "    B.KO_SHISAN_CODE," & vbCrLf
    strSql = strSql & "    C.SHISAN_NAME" & vbCrLf
    strSql = strSql & "FROM" & vbCrLf
    strSql = strSql & "    KYK_SHISAN        A" & vbCrLf
    strSql = strSql & "   ,KYK_GOHSEI_SHISAN B" & vbCrLf
    strSql = strSql & "   ,KYK_SHISAN        C" & vbCrLf
    strSql = strSql & "WHERE" & vbCrLf
    strSql = strSql & "    A.KANJOH_MEIGARA_OYA_KBN IN('3')" & vbCrLf
    strSql = strSql & "AND A.SAKUJO_FLG    = '0' " & vbCrLf
    strSql = strSql & "AND A.SHISAN_BUNRUI = B.OYA_SHISAN_BUNRUI(+)" & vbCrLf
    strSql = strSql & "AND A.SHISAN_CODE   = B.OYA_SHISAN_CODE  (+)" & vbCrLf
    strSql = strSql & "AND B.SAKUJO_FLG(+) = '0'" & vbCrLf
    strSql = strSql & "AND C.SHISAN_BUNRUI(+) = B.KO_SHISAN_BUNRUI" & vbCrLf
    strSql = strSql & "AND C.SHISAN_CODE(+)   = B.KO_SHISAN_CODE" & vbCrLf
    strSql = strSql & "AND C.SAKUJO_FLG(+)    = '0'" & vbCrLf
    strSql = strSql & "ORDER BY" & vbCrLf
    strSql = strSql & "    A.SHISAN_BUNRUI," & vbCrLf
    strSql = strSql & "    A.SHISAN_CODE," & vbCrLf
    strSql = strSql & "    B.KO_SHISAN_BUNRUI," & vbCrLf
    strSql = strSql & "    B.KO_SHISAN_CODE" & vbCrLf

    'データ取得
    Call gclsDB.DoExequteSql(gcSELECT, strSql, vData, lngCol, lngRow)
    
    ReDim strData(0)
    
    If lngRow > 0 Then
        ' 動的配列変数に対するメモリ領域の再割り当てを行います
        ReDim strData(lngRow - 1)
        
        '取得データを配列に設定
        For lngRowCnt = 0 To lngRow - 1
            With strData(lngRowCnt)
                .ShisanBunrui = CStr(vData(0, lngRowCnt))       '資産分類
                .ShisanCode = CStr(vData(1, lngRowCnt))         '資産コード
                .ShisanName = CStr(vData(2, lngRowCnt))         '資産名
                .ShisanPName = CStr(vData(3, lngRowCnt))        '帳票資産名
                .ShisanKagenKbn = CStr(vData(4, lngRowCnt))     '加減区分
                .KoShisanBunrui = CStr(vData(5, lngRowCnt))     '子資産分類
                .KoShisanCode = CStr(vData(6, lngRowCnt))       '子資産コード
                .KoShisanName = CStr(vData(7, lngRowCnt))       '子資産名
            End With
        Next lngRowCnt
    End If
    
    fncGetGohseiSisan = True
    
    Erase vData
    
    Exit Function
    
'*******************************************************
'* エラーセクション                                 　  *
'*******************************************************
ErrSection:

    fncGetGohseiSisan = False

'---- エラーログ出力 Start --------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
'   Err.Raise lng
'---- エラーログ出力 End  ---------------------------------

    Erase vData
   
End Function

'*************************************************************************
'関数名　　：資産一覧表(帳票作成)
'引　　数　：
'           strOutFName        I           出力ファイル名
'           strData()          I           出力データ
'戻り値　　：処理結果
'機能説明　：資産一覧表を作成する。
'更新履歴　：2008/02/18 SRA市川     新規作成
'
'*************************************************************************
Public Function fncMakeBook5100(ByVal strOutFName As String, ByRef strShisan() As typShisan, _
                                ByRef strGohseiShisan() As typGohseiShisan) As Boolean
                    
    Const PROCEDURE_NAME As String = "fncMakeBook5100"

On Error GoTo ErrSection

    Dim lngRowCnt           As Long
    Dim lngStartRow         As Long     'データ出力開始行
    Dim strSrcRange         As String   'セル結合開始行
    Dim lngDataMax          As Long     'データ件数
    Dim lngDataCnt          As Long
    Dim strWorkShisanChk    As String   '資産グループ判断処理用変数
    
    Call subBeginProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME)
    
    lngRowCnt = 0
    
    ' ファイルOpen
    Workbooks.Open Filename:=strOutFName
    
    strWorkShisanChk = ""
    '資産一覧配列よりデータ件数を取得
    lngDataMax = UBound(strShisan)
    fncMakeBook5100 = False
    
    With Workbooks(Workbooks.Count).Worksheets(1)
        
        '1件目の資産分類が空白ではない場合
        If Trim(strShisan(0).ShisanBunrui) <> "" Then
        
            ' 資産一覧を出力(合成資産以外)
            For lngDataCnt = 0 To lngDataMax
                '初回ループ時
                If strWorkShisanChk = "" Then
                    '資産グループ判断処理用変数 = 資産分類 + 勘定銘柄親区分
                    strWorkShisanChk = Trim(strShisan(lngDataCnt).ShisanBunrui) & Trim(strShisan(lngDataCnt).KanJohMeigaraOyaKbn)
                    
                    '存在しない資産グループの行をヘッダを残して削除
                    Select Case strWorkShisanChk
                        Case cShisanA       '勘定コード集計型　調整資産(+)
                            '勘定コード集計型　一般資産の行を削除
                            .Range(.Range("集計_資産分類").Row & ":" & .Range("集計_資産分類").Row + 2).Delete
                            
                        Case cPXIppan       'PX銘柄指定型　一般資産
                            '勘定コード集計型　一般資産の行を削除
                            .Range(.Range("集計_資産分類").Row & ":" & .Range("集計_資産分類").Row + 2).Delete
                            '勘定コード集計型　調整資産(+)の行を削除
                            .Range(.Range("集計調整_資産分類").Row & ":" & .Range("集計調整_資産分類").Row + 2).Delete

                        Case cPXChosei      'PX銘柄指定型　調整資産(-)
                            '勘定コード集計型　一般資産の行を削除
                            .Range(.Range("集計_資産分類").Row & ":" & .Range("集計_資産分類").Row + 2).Delete
                            'PX銘柄指定型　一般資産の行を削除
                            .Range(.Range("PX一般_資産分類").Row & ":" & .Range("PX一般_資産分類").Row + 2).Delete
                            '勘定コード集計型　調整資産(+)の行を削除
                            .Range(.Range("集計調整_資産分類").Row & ":" & .Range("集計調整_資産分類").Row + 2).Delete
                            
                        Case cT21Chosei      'T21調整資産
                            '勘定コード集計型　一般資産の行を削除
                            .Range(.Range("集計_資産分類").Row & ":" & .Range("集計_資産分類").Row + 2).Delete
                            'PX銘柄指定型　一般資産の行を削除
                            .Range(.Range("PX一般_資産分類").Row & ":" & .Range("PX一般_資産分類").Row + 2).Delete
                            '勘定コード集計型　調整資産(+)の行を削除
                            .Range(.Range("集計調整_資産分類").Row & ":" & .Range("集計調整_資産分類").Row + 2).Delete
                            'PX銘柄指定型　調整資産(-)の行を削除
                            .Range(.Range("PX調整_資産分類").Row & ":" & .Range("PX調整_資産分類").Row + 2).Delete
                            
                    End Select
                    
                '資産グループが変わった場合
                ElseIf strWorkShisanChk <> Trim(strShisan(lngDataCnt).ShisanBunrui) & Trim(strShisan(lngDataCnt).KanJohMeigaraOyaKbn) Then
                    '出力し終わったグループを判断
                    Select Case strWorkShisanChk
                        Case cShukeiIppan   '勘定コード集計型　一般資産
                            '行増幅用の空行を削除
                            .Range(.Range("集計_ROW").Row & ":" & .Range("集計_ROW").Row - 1).Delete
                            
                            '資産グループ判断処理用変数 = 資産分類 + 勘定銘柄親区分
                            strWorkShisanChk = Trim(strShisan(lngDataCnt).ShisanBunrui) & Trim(strShisan(lngDataCnt).KanJohMeigaraOyaKbn)
                            
                            '出力するグループが勘定コード集計型　調整資産(+)ではない場合
                            If strWorkShisanChk <> cShisanA Then
                                '勘定コード集計型　調整資産(+)の行を削除
                                .Range(.Range("集計調整_資産分類").Row & ":" & .Range("集計調整_資産分類").Row + 2).Delete
                                
                                '出力するグループがPX銘柄指定型　一般資産ではない場合
                                If strWorkShisanChk <> cPXIppan Then
                                    'PX銘柄指定型　一般資産の行を削除
                                    .Range(.Range("PX一般_資産分類").Row & ":" & .Range("PX一般_資産分類").Row + 2).Delete
                                    
                                    '出力するグループがPX銘柄指定型　調整資産(-)ではない場合
                                    If strWorkShisanChk <> cPXChosei Then
                                        'PX銘柄指定型　調整資産(-)の行を削除
                                        .Range(.Range("PX調整_資産分類").Row & ":" & .Range("PX調整_資産分類").Row + 2).Delete
                                    End If
                                End If
                            End If
                        Case cShisanA '勘定コード集計型　調整資産(+)
                            '行増幅用の空行を削除
                            .Range(.Range("集計調整_ROW").Row & ":" & .Range("集計調整_ROW").Row - 1).Delete
                            
                            '資産グループ判断処理用変数 = 資産分類 + 勘定銘柄親区分
                            strWorkShisanChk = Trim(strShisan(lngDataCnt).ShisanBunrui) & Trim(strShisan(lngDataCnt).KanJohMeigaraOyaKbn)
                            
                            '出力するグループがPX銘柄指定型　一般資産ではない場合
                            If strWorkShisanChk <> cPXIppan Then
                                'PX銘柄指定型　一般資産の行を削除
                                .Range(.Range("PX一般_資産分類").Row & ":" & .Range("PX一般_資産分類").Row + 2).Delete
                                
                                '出力するグループがPX銘柄指定型　調整資産(-)ではない場合
                                If strWorkShisanChk <> cPXChosei Then
                                    'PX銘柄指定型　調整資産(-)の行を削除
                                    .Range(.Range("PX調整_資産分類").Row & ":" & .Range("PX調整_資産分類").Row + 2).Delete
                                End If
                            End If
                            
                        Case cPXIppan       'PX銘柄指定型　一般資産
                            '行増幅用の空行を削除
                            .Range(.Range("PX一般_ROW").Row & ":" & .Range("PX一般_ROW").Row - 1).Delete

                            '資産グループ判断処理用変数 = 資産分類 + 勘定銘柄親区分
                            strWorkShisanChk = Trim(strShisan(lngDataCnt).ShisanBunrui) & Trim(strShisan(lngDataCnt).KanJohMeigaraOyaKbn)
                            
                            '出力するグループがPX銘柄指定型　調整資産(-)ではない場合
                            If strWorkShisanChk <> cPXChosei Then
                                'PX銘柄指定型　調整資産(-)の行を削除
                                .Range(.Range("PX調整_資産分類").Row & ":" & .Range("PX調整_資産分類").Row + 2).Delete
                            End If
                        Case cPXChosei      'PX銘柄指定型　調整資産(-)
                            '行増幅用の空行を削除
                            .Range(.Range("PX調整_ROW").Row & ":" & .Range("PX調整_ROW").Row - 1).Delete
                    End Select
                    
                    '資産グループ判断処理用変数 = 資産分類 + 勘定銘柄親区分
                    strWorkShisanChk = Trim(strShisan(lngDataCnt).ShisanBunrui) & Trim(strShisan(lngDataCnt).KanJohMeigaraOyaKbn)
                End If
                
                '出力するグループを判断
                Select Case strWorkShisanChk
                    Case cShukeiIppan   '勘定コード集計型　一般資産
                        '行を追加
                        .Rows(.Range("集計_ROW").Row & ":" & .Range("集計_ROW").Row).Copy
                        .Rows(.Range("集計_ROW").Row - 1 & ":" & .Range("集計_ROW").Row - 1).Insert Shift:=xlDown
                        
                        'セルに資産データを出力
                        .Cells(.Range("集計_ROW").Row - 2, .Range("集計_資産分類").Column).Value = strShisan(lngDataCnt).ShisanBunrui
                        .Cells(.Range("集計_ROW").Row - 2, .Range("集計_資産番号").Column).Value = strShisan(lngDataCnt).ShisanCode
                        .Cells(.Range("集計_ROW").Row - 2, .Range("集計_資産名").Column).Value = strShisan(lngDataCnt).ShisanName
                        .Cells(.Range("集計_ROW").Row - 2, .Range("集計_帳票資産名").Column).Value = strShisan(lngDataCnt).ShisanPName
                    
                    Case cPXIppan       'PX銘柄指定型　一般資産
                        '行を追加
                        .Rows(.Range("PX一般_ROW").Row & ":" & .Range("PX一般_ROW").Row).Copy
                        .Rows(.Range("PX一般_ROW").Row - 1 & ":" & .Range("PX一般_ROW").Row - 1).Insert Shift:=xlDown
                        
                        'セルに資産データを出力
                        .Cells(.Range("PX一般_ROW").Row - 2, .Range("PX一般_資産分類").Column).Value = strShisan(lngDataCnt).ShisanBunrui
                        .Cells(.Range("PX一般_ROW").Row - 2, .Range("PX一般_資産番号").Column).Value = strShisan(lngDataCnt).ShisanCode
                        .Cells(.Range("PX一般_ROW").Row - 2, .Range("PX一般_資産名").Column).Value = strShisan(lngDataCnt).ShisanName
                        .Cells(.Range("PX一般_ROW").Row - 2, .Range("PX一般_帳票資産名").Column).Value = strShisan(lngDataCnt).ShisanPName
                        .Cells(.Range("PX一般_ROW").Row - 2, .Range("PX一般_PX銘柄コード").Column).Value = strShisan(lngDataCnt).GaibuCode
                    
                    Case cShisanA       '勘定コード集計型　調整資産(+)
                        '行を追加
                        .Rows(.Range("集計調整_ROW").Row & ":" & .Range("集計調整_ROW").Row).Copy
                        .Rows(.Range("集計調整_ROW").Row - 1 & ":" & .Range("集計調整_ROW").Row - 1).Insert Shift:=xlDown
                        
                        'セルに資産データを出力
                        .Cells(.Range("集計調整_ROW").Row - 2, .Range("集計調整_資産分類").Column).Value = strShisan(lngDataCnt).ShisanBunrui
                        .Cells(.Range("集計調整_ROW").Row - 2, .Range("集計調整_資産番号").Column).Value = strShisan(lngDataCnt).ShisanCode
                        .Cells(.Range("集計調整_ROW").Row - 2, .Range("集計調整_資産名").Column).Value = strShisan(lngDataCnt).ShisanName
                        .Cells(.Range("集計調整_ROW").Row - 2, .Range("集計調整_帳票資産名").Column).Value = strShisan(lngDataCnt).ShisanPName
                    
                    Case cPXChosei      'PX銘柄指定型　調整資産(-)
                        '行を追加
                        .Rows(.Range("PX調整_ROW").Row & ":" & .Range("PX調整_ROW").Row).Copy
                        .Rows(.Range("PX調整_ROW").Row - 1 & ":" & .Range("PX調整_ROW").Row - 1).Insert Shift:=xlDown
                        
                        'セルに資産データを出力
                        .Cells(.Range("PX調整_ROW").Row - 2, .Range("PX調整_資産分類").Column).Value = strShisan(lngDataCnt).ShisanBunrui
                        .Cells(.Range("PX調整_ROW").Row - 2, .Range("PX調整_資産番号").Column).Value = strShisan(lngDataCnt).ShisanCode
                        .Cells(.Range("PX調整_ROW").Row - 2, .Range("PX調整_資産名").Column).Value = strShisan(lngDataCnt).ShisanName
                        .Cells(.Range("PX調整_ROW").Row - 2, .Range("PX調整_帳票資産名").Column).Value = strShisan(lngDataCnt).ShisanPName
                        .Cells(.Range("PX調整_ROW").Row - 2, .Range("PX調整_PX銘柄コード").Column).Value = strShisan(lngDataCnt).GaibuCode
                        
                    Case cT21Chosei     'T21調整資産
                        '行を追加
                        .Rows(.Range("T21調整_ROW").Row & ":" & .Range("T21調整_ROW").Row).Copy
                        .Rows(.Range("T21調整_ROW").Row - 1 & ":" & .Range("T21調整_ROW").Row - 1).Insert Shift:=xlDown
                        
                        'セルに資産データを出力
                        .Cells(.Range("T21調整_ROW").Row - 2, .Range("T21調整_資産分類").Column).Value = strShisan(lngDataCnt).ShisanBunrui
                        .Cells(.Range("T21調整_ROW").Row - 2, .Range("T21調整_資産番号").Column).Value = strShisan(lngDataCnt).ShisanCode
                        .Cells(.Range("T21調整_ROW").Row - 2, .Range("T21調整_資産名").Column).Value = strShisan(lngDataCnt).ShisanName
                        .Cells(.Range("T21調整_ROW").Row - 2, .Range("T21調整_帳票資産名").Column).Value = strShisan(lngDataCnt).ShisanPName
                        .Cells(.Range("T21調整_ROW").Row - 2, .Range("T21調整_PX銘柄コード").Column).Value = strShisan(lngDataCnt).GaibuCode
                        .Cells(.Range("T21調整_ROW").Row - 2, .Range("T21調整_報酬レート").Column).Value = strShisan(lngDataCnt).HohshuRate
                        .Cells(.Range("T21調整_ROW").Row - 2, .Range("T21調整_時価単位口数").Column).Value = strShisan(lngDataCnt).JikaTaniKuchisu
                        .Cells(.Range("T21調整_ROW").Row - 2, .Range("T21調整_T21口座番号").Column).Value = strShisan(lngDataCnt).T21KohzaNo
                End Select
                
            Next lngDataCnt
        
        End If
        
        '出力終了時のグループを判断し、データ件数０のグループの行を削除する
        Select Case strWorkShisanChk
            Case ""             'データなし
                '勘定コード集計型　一般資産の行を削除
                .Range(.Range("集計_資産分類").Row & ":" & .Range("集計_資産分類").Row + 2).Delete
                'PX銘柄指定型　一般資産の行を削除
                .Range(.Range("PX一般_資産分類").Row & ":" & .Range("PX一般_資産分類").Row + 2).Delete
                '勘定コード集計型　調整資産(+)の行を削除
                .Range(.Range("集計調整_資産分類").Row & ":" & .Range("集計調整_資産分類").Row + 2).Delete
                'PX銘柄指定型　調整資産(-)の行を削除
                .Range(.Range("PX調整_資産分類").Row & ":" & .Range("PX調整_資産分類").Row + 2).Delete
                'T21調整資産の行を削除
                .Range(.Range("T21調整_資産分類").Row & ":" & .Range("T21調整_資産分類").Row + 2).Delete
            Case cShukeiIppan   '勘定コード集計型　一般資産
                '勘定コード集計型　調整資産(+)の空行を削除
                .Range(.Range("集計_ROW").Row & ":" & .Range("集計_ROW").Row - 1).Delete
                'PX銘柄指定型　一般資産の行を削除
                .Range(.Range("PX一般_資産分類").Row & ":" & .Range("PX一般_資産分類").Row + 2).Delete
                '勘定コード集計型　調整資産(+)の行を削除
                .Range(.Range("集計調整_資産分類").Row & ":" & .Range("集計調整_資産分類").Row + 2).Delete
                'PX銘柄指定型　調整資産(-)の行を削除
                .Range(.Range("PX調整_資産分類").Row & ":" & .Range("PX調整_資産分類").Row + 2).Delete
                'T21調整資産の行を削除
                .Range(.Range("T21調整_資産分類").Row & ":" & .Range("T21調整_資産分類").Row + 2).Delete
            
            Case cShisanA       '勘定コード集計型　調整資産(+)
                '勘定コード集計型　調整資産(+)の空行を削除
                .Range(.Range("集計調整_ROW").Row & ":" & .Range("集計調整_ROW").Row - 1).Delete
                'PX銘柄指定型　一般資産の行を削除
                .Range(.Range("PX一般_資産分類").Row & ":" & .Range("PX一般_資産分類").Row + 2).Delete
                'PX銘柄指定型　調整資産(-)の行を削除
                .Range(.Range("PX調整_資産分類").Row & ":" & .Range("PX調整_資産分類").Row + 2).Delete
                'T21調整資産の行を削除
                .Range(.Range("T21調整_資産分類").Row & ":" & .Range("T21調整_資産分類").Row + 2).Delete
            
            Case cPXIppan       'PX銘柄指定型　一般資産
                'PX銘柄指定型　一般資産の空行を削除
                .Range(.Range("PX一般_ROW").Row & ":" & .Range("PX一般_ROW").Row - 1).Delete
                'PX銘柄指定型　調整資産(-)の行を削除
                .Range(.Range("PX調整_資産分類").Row & ":" & .Range("PX調整_資産分類").Row + 2).Delete
                'T21調整資産の行を削除
                .Range(.Range("T21調整_資産分類").Row & ":" & .Range("T21調整_資産分類").Row + 2).Delete
            Case cPXChosei      'PX銘柄指定型　調整資産(-)
                'PX銘柄指定型　調整資産(-)の空行を削除
                .Range(.Range("PX調整_ROW").Row & ":" & .Range("PX調整_ROW").Row - 1).Delete
                'T21調整資産の行を削除
                .Range(.Range("T21調整_資産分類").Row & ":" & .Range("T21調整_資産分類").Row + 2).Delete
            
            Case cT21Chosei      'PX銘柄指定型　調整資産(-)
                'T21調整資産の空行を削除
                .Range(.Range("T21調整_ROW").Row & ":" & .Range("T21調整_ROW").Row - 1).Delete
            
        End Select
        
        '資産グループ判断処理用変数をクリア
        strWorkShisanChk = ""
        
        '合成資産一覧配列よりデータ件数を取得
        lngDataMax = UBound(strGohseiShisan)
        
        '合成資産の出力開始行を取得
        lngStartRow = .Range("合成_資産分類").Row + 2
        
        '1件目の資産分類が空白ではない場合
        If Trim(strGohseiShisan(0).ShisanBunrui) <> "" Then
            
            'セル結合開始行を取得
            strSrcRange = .Range("合成_資産分類").Row + 1
            
            .Rows(lngStartRow & ":" & lngStartRow).Copy
            .Rows(lngStartRow & ":" & lngStartRow + lngDataMax).Insert Shift:=xlDown
            
            ' 合成資産を出力
            For lngDataCnt = 0 To lngDataMax
                '初回ループ時
                If strWorkShisanChk = "" Then
                    '資産グループ判断処理用変数 = 資産分類 + 資産コード（資産分類と資産コードで親資産を判断）
                    strWorkShisanChk = Trim(strGohseiShisan(lngDataCnt).ShisanBunrui) & Trim(strGohseiShisan(lngDataCnt).ShisanCode)
                    
                    lngRowCnt = lngRowCnt + 1
                    'セルに資産データを出力（セル結合処理時に確認メッセージが出ないように1度だけ出力する）
                    .Cells(lngStartRow - 2 + lngRowCnt, .Range("合成_資産分類").Column).Value = strGohseiShisan(lngDataCnt).ShisanBunrui
                    .Cells(lngStartRow - 2 + lngRowCnt, .Range("合成_資産番号").Column).Value = strGohseiShisan(lngDataCnt).ShisanCode
                    .Cells(lngStartRow - 2 + lngRowCnt, .Range("合成_資産名").Column).Value = strGohseiShisan(lngDataCnt).ShisanName
                    .Cells(lngStartRow - 2 + lngRowCnt, .Range("合成_帳票資産名").Column).Value = strGohseiShisan(lngDataCnt).ShisanPName
                '親資産が変わった場合
                ElseIf strWorkShisanChk <> Trim(strGohseiShisan(lngDataCnt).ShisanBunrui) & Trim(strGohseiShisan(lngDataCnt).ShisanCode) Then
                    'セルの結合
                    .Range("A" & strSrcRange & ":A" & .Range("合成_資産分類").Row + lngRowCnt).MergeCells = True
                    .Range("B" & strSrcRange & ":B" & .Range("合成_資産番号").Row + lngRowCnt).MergeCells = True
                    .Range("C" & strSrcRange & ":C" & .Range("合成_資産名").Row + lngRowCnt).MergeCells = True
                    .Range("D" & strSrcRange & ":D" & .Range("合成_帳票資産名").Row + lngRowCnt).MergeCells = True
                    '次のセル結合開始行を取得する
                    strSrcRange = lngStartRow - 1 + lngRowCnt
                    '資産グループ判断処理用変数 = 資産分類 + 資産コード（資産分類と資産コードで親資産を判断）
                    strWorkShisanChk = Trim(strGohseiShisan(lngDataCnt).ShisanBunrui) & Trim(strGohseiShisan(lngDataCnt).ShisanCode)
                    
                    lngRowCnt = lngRowCnt + 1
                    'セルに資産データを出力（セル結合処理時に確認メッセージが出ないように1度だけ出力する）
                    .Cells(lngStartRow - 2 + lngRowCnt, .Range("合成_資産分類").Column).Value = strGohseiShisan(lngDataCnt).ShisanBunrui
                    .Cells(lngStartRow - 2 + lngRowCnt, .Range("合成_資産番号").Column).Value = strGohseiShisan(lngDataCnt).ShisanCode
                    .Cells(lngStartRow - 2 + lngRowCnt, .Range("合成_資産名").Column).Value = strGohseiShisan(lngDataCnt).ShisanName
                    .Cells(lngStartRow - 2 + lngRowCnt, .Range("合成_帳票資産名").Column).Value = strGohseiShisan(lngDataCnt).ShisanPName
                '親資産が変わらない場合
                Else
                    lngRowCnt = lngRowCnt + 1
                End If
                
                'セルに資産データを出力
                .Cells(lngStartRow - 2 + lngRowCnt, .Range("合成_加減区分").Column).Value = strGohseiShisan(lngDataCnt).ShisanKagenKbn
                .Cells(lngStartRow - 2 + lngRowCnt, .Range("合成_子資産分類").Column).Value = strGohseiShisan(lngDataCnt).KoShisanBunrui
                .Cells(lngStartRow - 2 + lngRowCnt, .Range("合成_子資産コード").Column).Value = strGohseiShisan(lngDataCnt).KoShisanCode
                .Cells(lngStartRow - 2 + lngRowCnt, .Range("合成_子資産名").Column).Value = strGohseiShisan(lngDataCnt).KoShisanName
                
            Next lngDataCnt
            
            'セルの結合
            .Range("A" & strSrcRange & ":A" & .Range("合成_資産分類").Row + lngRowCnt).MergeCells = True
            .Range("B" & strSrcRange & ":B" & .Range("合成_資産番号").Row + lngRowCnt).MergeCells = True
            .Range("C" & strSrcRange & ":C" & .Range("合成_資産名").Row + lngRowCnt).MergeCells = True
            .Range("D" & strSrcRange & ":D" & .Range("合成_帳票資産名").Row + lngRowCnt).MergeCells = True
            
            '合成資産の行増幅用の空行を削除
            .Range(.Range("合成_ROW").Row & ":" & .Range("合成_ROW").Row - 1).Delete
        
        '合成資産のデータがない場合
        Else
            '合成資産の行増幅用の空行を削除
            .Range(.Range("合成_資産分類").Row & ":" & .Range("合成_資産分類").Row + 2).Delete
        End If
         
        ' カーソル位置を移動する
        .Activate     ' シートが２個以上の場合要る
        .Range("A1").Activate
        
    End With
    
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    
    Workbooks(Workbooks.Count).Close SaveChanges:=True
    
    fncMakeBook5100 = True
    
    Call subEndProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME)
    
    Exit Function
    
'*******************************************************
'* エラーセクション                                 　  *
'*******************************************************
ErrSection:

    Workbooks(Workbooks.Count).Close SaveChanges:=True
    fncMakeBook5100 = False

'---- エラーログ出力 Start --------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
'   Err.Raise lng
'---- エラーログ出力 End  ---------------------------------
   
End Function

