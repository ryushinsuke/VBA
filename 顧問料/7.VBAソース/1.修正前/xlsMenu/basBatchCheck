Attribute VB_Name = "basBatchCheck"
Option Explicit

'*************************************************************************
'
'プロジェクト名：国内顧問料・バッチチェック
'
'オブジェクト名：basBatchCheck
'
'機能概要　：バッチチェック関連処理
'
'更新履歴　：2008/03/21 SRA Y.Azuma    新規作成
'
'
'*************************************************************************
Private Const MODULE_NAME As String = "basBatchCheck"


'*************************************************************************
'関数名　　：バッチチェック関数
'
'引　　数　：
'           strSystemNm2    I       後続システムの名称
'           blnResult       O       チェック結果(True/False)
'           strSystemNm1    O       先行システムの名称
'           strErrMsg       O       システムエラー時のエラー内容
'           blnDisplay      I       メッセージ表示区分(デフォルト：True)
'
'戻り値　　：Boolean
'
'機能説明　：先行システムが実行中に後続システムを実行可能かどうかを判定する。
'
'更新履歴　：2008/03/21 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Function func_BatchCheck(ByVal strSystemNm2 As String _
                              , ByRef blnResult As Boolean _
                              , ByRef strSystemNm1 As String _
                              , ByRef strErrMsg As String _
                              , Optional blnDisplay As Boolean = True) As Boolean
On Error GoTo Error_Section

    Const PROCEDURE_NAME = "func_BatchCheck"
    
    Dim strSystemKbn2   As String   '後続システムのシステム区分
    Dim strErr          As String   'システムのエラーメッセージ
    Dim strSystemKbn1   As String   '先行システムの区分
    Dim lngStasus       As Long     '先行システムの稼動数

    func_BatchCheck = False

    blnResult = True    'システムエラーでもチェック結果は正常

    '【1.後続処理のシステム区分取得】
    If func_getSystemKbn(strSystemNm2, strSystemKbn2, strErr) = False Then
    '取得関数でシステムエラー
        Exit Function
    Else
        'SQLエラー
        If Trim(strErr) <> "" Then
            strErrMsg = gfunc_ErrorMsg(4, 600, "", "エラーメッセージ：" & strErr, False)
            If blnDisplay Then
                Call MsgBox(strErrMsg, vbCritical)
            Else
                'Nothing
            End If
        Else
            If Trim(strSystemKbn2) = "" Then
            '該当データなし該当システム区分がない
                strErrMsg = gfunc_ErrorMsg(4, 601, "", "システム名：" & strSystemNm2, False)
                If blnDisplay Then
                    Call MsgBox(strErrMsg, vbCritical)
                Else
                    'Nothing
                End If
            End If
        End If
        
    End If


    '【2.バッチチェック】
    If Trim(strSystemKbn2) <> "" Then
        If func_getStatus(strSystemKbn2, strSystemKbn1, strSystemNm1, lngStasus, strErr) = False Then
        '取得関数でシステムエラー
            Exit Function
        Else
            If lngStasus > 0 Then
            '先行システムが稼働中
                blnResult = False       '後続処理の起動不可
                Select Case strSystemKbn1
                    Case "01", "02", "03", "04", "05", "06", "07", "08"
                        strSystemNm1 = "顧問ODWバッチ(" & strSystemNm1 & ")"
                    Case "DB", "WB"
                        strSystemNm1 = Replace(strSystemNm1, "全部", "")
                    Case "WB"
                End Select
            
                strErrMsg = gfunc_ErrorMsg(3, 602, "", "「" & strSystemNm1 & "」が実行中の為、「" & strSystemNm2 & "」を起動出来ません。", False)
                
                If blnDisplay Then
                    Call MsgBox(strErrMsg, vbCritical)
                Else
                    'Nothing
                End If
            Else
            '先行システムに稼動中がない
                'Nothing
            End If
            
            'SQLエラー
            If Trim(strErr) <> "" Then
                strErrMsg = gfunc_ErrorMsg(4, 603, "", "エラーメッセージ：" & strErr, False)
                If blnDisplay Then
                    Call MsgBox(strErrMsg, vbCritical)
                Else
                    'Nothing
                End If
            Else
                'Nothing
            End If
            
        End If
    Else
        'Nothing
    End If

    func_BatchCheck = True

Exit Function

Error_Section:
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    func_BatchCheck = False
End Function


'*************************************************************************
'関数名　　：ステータス変更関数
'
'引　　数　：
'           argRecKbn       I       レコード区分
'           argPrtCd        I       ポートフォリオ
'           argSystemNm     I       システム区分名
'           argStatus       I       ステータス値
'
'戻り値　　：Boolean
'
'機能説明　：レコード区分、ポートフォリオ、システム区分名で指定された
'           ステータステーブルのレコードをステータス値で更新する。
'
'更新履歴　：2008/03/27 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Function func_StatusChange(ByVal argRecKbn As String _
                                , ByVal argPrtCd As String _
                                , ByVal argSystemNm As String _
                                , ByVal argStatus As String) As Boolean
On Error GoTo Error_Section

    func_StatusChange = False
    
    Const PROCEDURE_NAME = "func_StatusChange"
    
    Dim RecKbn      As String
    Dim PrtCd       As String
    Dim SystemKbn   As String
    Dim Status      As String
    Dim lngRow      As Long
    Dim strErr      As String
    Dim strErrMsg   As String
    
    '【パラメーターチェック】
    '①レコード区分
    'チェックなし
    RecKbn = argRecKbn
        
    '②ポートフォリオ
    '必須チェック
    If argPrtCd = "" Then
        PrtCd = String(7, " ")
    Else
        PrtCd = argPrtCd
    End If
    
    '③システム区分
    'システム名のシステム区分取得
    If func_getSystemKbn(argSystemNm, SystemKbn, strErr) = False Then
    '取得関数でシステムエラー
        Exit Function
    Else
        'SQLエラー
        If Trim(strErr) <> "" Then
            strErrMsg = gfunc_ErrorMsg(4, 604, "", "エラーメッセージ：" & strErr, False)
            Call MsgBox(strErrMsg, vbCritical)
            Exit Function
        Else
            If Trim(SystemKbn) = "" Then
            '該当データなし該当システム区分がない
                strErrMsg = gfunc_ErrorMsg(4, 605, "", "システム名：" & argSystemNm, False)
                Call MsgBox(strErrMsg, vbCritical)
                Exit Function
            End If
        End If
        
    End If
    
    '④ステータス値
    If LenB(StrConv(argStatus, vbFromUnicode)) > 1 Then
    '1バイトより大きい
        Status = "0"
    ElseIf Trim(argStatus) = "" Then
    'ステータス値が未設定
        Status = "0"
    Else
        Status = argStatus
    End If
    
    '【ステータス変更】
    If func_StatusUpd(RecKbn, PrtCd, SystemKbn, argSystemNm, Status, lngRow, strErr) = False Then
    '異常
        If Trim(strErr) <> "" Then
        'SQLエラー
            strErrMsg = gfunc_ErrorMsg(4, 606, "", "エラーコード：" & strErr, False)
            Call MsgBox(strErrMsg, vbCritical)
            Exit Function
        Else
        'その他システムエラー
            If lngRow < 1 Then
            '更新対象なし
                strErrMsg = gfunc_ErrorMsg(4, 607, "", "レコード区分  ： " & RecKbn & vbCrLf & _
                                                   "ポートフォリオ ： " & PrtCd & vbCrLf & _
                                                   "システム区分  ：" & SystemKbn & "(" & argSystemNm & ")", False)
                Call MsgBox(strErrMsg, vbCritical)
                Exit Function
            Else
                strErrMsg = gfunc_ErrorMsg(4, 608, "", "エラーメッセージ：" & Err.Description, False)
                Call MsgBox(strErrMsg, vbCritical)
                Exit Function
            End If
        End If
    Else
    '正常
        '処理なし
    End If
    
    
    func_StatusChange = True

Exit Function

Error_Section:
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    func_StatusChange = False
End Function


'*************************************************************************
'関数名　　：システム区分取得
'
'引　　数　：
'           strSystemNm         I       システム名
'           strSystemKbn        O       システム区分
'
'戻り値　　：Boolean
'
'機能説明　：システム名でコード値テーブルからシステム区分を取得する。
'
'更新履歴　：2008/03/21 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Function func_getSystemKbn(ByVal strSystemNm As String _
                                 , ByRef strSystemKbn As String _
                                 , ByRef strErr As String) As Boolean
On Error GoTo ErrHandler
    
    Const PROCEDURE_NAME = "func_getSystemKbn"
    Dim blnRet      As Boolean
    Dim strSql      As String
    Dim vdata()     As Variant
    Dim lngCol      As Long
    Dim lngRow      As Long
    Dim strErrCode  As String
    
    func_getSystemKbn = False
    
    strSql = ""
    strSql = strSql & " SELECT CODE_VALUE"
    strSql = strSql & "   FROM KYK_CODE_VALUE"
    strSql = strSql & "  WHERE CODE_NO ='107'"
    strSql = strSql & "    AND VALUE_NAME = TRIM('" & strSystemNm & "')"
    
    'データ取得
    blnRet = gclsDB.DoExequteSql(gcSELECT, strSql, vdata, lngCol, lngRow, strErrCode)

    If blnRet Then
    '取得関数正常
        '取得データを設定
        If lngRow > 0 Then
        '該当データあり
            strSystemKbn = Trim(CStr(vdata(0, 0)))
        Else
        '該当データなし
            strSystemKbn = ""
        End If
    Else
    '取得関数エラー
        strErr = strErrCode
    End If
    
    Erase vdata

    func_getSystemKbn = True
    Exit Function
ErrHandler:

    Erase vdata
Debug.Print strSql
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    strErr = Err.Description
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    
End Function


'*************************************************************************
'関数名　　：Vステータスビュー取得
'
'引　　数　：
'           strSystemKbn2       I       後続システム区分
'           strSystemKbn        O       先行システム区分
'           strSystemNm1        O       先行システム名
'           lngStatus           O       先行システム数
'
'戻り値　　：Boolean
'
'機能説明　：後続システム区分で検索して先行システムが稼動中か調べる
'
'更新履歴　：2008/03/21 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Function func_getStatus(ByVal strSystemKbn2 As String _
                              , ByRef strSystemKbn1 As String _
                              , ByRef strSystemNm1 As String _
                              , ByRef lngStatus As Long _
                              , ByRef strErr As String) As Boolean
On Error GoTo ErrHandler
    
    Const PROCEDURE_NAME = "func_getStatus"
    Dim blnRet      As Boolean
    Dim strSql      As String
    Dim vdata()     As Variant
    Dim lngCol      As Long
    Dim lngRow      As Long
    Dim strErrCode  As String
    
    func_getStatus = False
    
    strSql = ""
    strSql = strSql & " SELECT STATUS"
    strSql = strSql & "       ,SYSTEM_KBN"
    strSql = strSql & "       ,SYSTEM_KBN_NAME"
    strSql = strSql & "   FROM KYK_VW_STATUS"
    strSql = strSql & "  WHERE STATUS > 0"
    strSql = strSql & "    AND SYSTEM_KBN2 = TRIM('" & strSystemKbn2 & "')"
    strSql = strSql & "  ORDER BY SYSTEM_KBN "
    
    'データ取得
    blnRet = gclsDB.DoExequteSql(gcSELECT, strSql, vdata, lngCol, lngRow, strErrCode)

    If blnRet Then
    '取得関数正常
    
        '取得データを設定
        If lngRow > 0 Then
        '該当データあり(先行システムあり)
            lngStatus = CLng(vdata(0, 0))       '起動システム数
            strSystemKbn1 = CStr(vdata(1, 0))   '先行システム区分
            strSystemNm1 = CStr(vdata(2, 0))    '先行システム名
            func_getStatus = True
            Exit Function
        Else
        '該当データなし(先行システムなし)
            strSystemKbn1 = ""
            strSystemNm1 = ""                       '先行システム名
        End If
    Else
    '取得関数エラー
        strSystemKbn1 = ""
        strSystemNm1 = ""                       '先行システム名
        strErr = strErrCode
    End If
    
    Erase vdata

    func_getStatus = True
    Exit Function
ErrHandler:

    Erase vdata
Debug.Print strSql
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "func_getStatus", Err.Number, Err.Description)
    strErr = Err.Description
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    
End Function


'*************************************************************************
'関数名　　：ステータステーブル更新関数
'
'引　　数　：
'           argRecKbn       I       レコード区分
'           argPrtCd        I       ポートフォリオ
'           argSystemKbn    I       システム区分名
'           argSystemNm     I       システム区分名
'           argStatus       I       ステータス値
'           lngRow          O       処理件数
'           strErrMsg       O       システムエラー時のエラー内容
'
'戻り値　　：Boolean
'
'機能説明　：レコード区分、ポートフォリオ、システム区分で指定された
'           ステータステーブルのレコードをステータス値でUPDATEする。
'
'更新履歴　：2008/03/27 SRA Y.Azuma    新規作成
'
'*************************************************************************
Private Function func_StatusUpd(ByVal argRecKbn As String _
                              , ByVal argPrtCd As String _
                              , ByVal argSystemKbn As String _
                              , ByVal argSystemNm As String _
                              , ByVal argStatus As String _
                              , ByRef lngRow As Long _
                              , ByRef strErr As String) As Boolean
On Error GoTo ErrHandler
    
    Const PROCEDURE_NAME = "func_StatusUpd"
    Dim blnRet      As Boolean
    Dim strSql      As String
    Dim vdata()     As Variant
    Dim lngCol      As Long
'    Dim lngRow      As Long
    Dim strErrCode  As String
    
    func_StatusUpd = False
    
    strSql = ""
    strSql = strSql & " UPDATE KYK_STATUS"
    strSql = strSql & "    SET STATUS               = '" & argStatus & "'"
    
    If argStatus = "0" Then
    '未処理 or 処理終了
        strSql = strSql & "       ,END_DATE             = TO_CHAR(SYSDATE,'YYYYMMDD')"
        strSql = strSql & "       ,END_TIME             = TO_CHAR(SYSDATE,'HH24MISS')"
    ElseIf argStatus = "1" Then
    '処理中
        strSql = strSql & "       ,START_DATE           = TO_CHAR(SYSDATE,'YYYYMMDD')"
        strSql = strSql & "       ,START_TIME           = TO_CHAR(SYSDATE,'HH24MISS')"
    Else
    '"0","1"以外のステータス値
        '開始終了のタイムスタンプは変更しない
    End If
    
    strSql = strSql & "       ,KOHSHIN_YMD          = SYSDATE"
    strSql = strSql & "       ,KOHSHIN_PGM_ID       = '" & argSystemNm & "'"
    strSql = strSql & "       ,KOHSHIN_TANTOHSHA    = 'APL001'"
    strSql = strSql & "  WHERE REC_KBN    = '" & argRecKbn & "'"
    strSql = strSql & "    AND PRTCD      = '" & argPrtCd & "'"
    strSql = strSql & "    AND SYSTEM_KBN = '" & argSystemKbn & "'"
    
    'データ更新
        blnRet = gclsDB.DoExequteSql(gcUPDATE, strSql, vdata, lngCol, lngRow, strErrCode)
    
    
    If blnRet = False Then
        If Trim(strErrCode) <> "" Then
        'SQLエラー
            strErr = strErrCode
            Exit Function
        Else
        'システムエラー
            strErr = ""
            Exit Function
        End If
    Else
    'システムエラーなし
        
        If lngRow < 1 Then
        '処理件数０
            Exit Function
        Else
        '正常
            '処理なし
        End If
        
    End If
    
    func_StatusUpd = True
    
    Exit Function
    
ErrHandler:

    Erase vdata
Debug.Print strSql
'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    strErr = Err.Description
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
func_StatusUpd = False

End Function
