VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsDBAccess"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

Const MODULE_NAME = "clsDBAccess"


''Public Function OpenRecordset(ByVal SQL As String) As ADODB.Recordset
''    On Error GoTo 0 'ErrHandler
''
''    cmAdo.CommandText = StrConv(SQL, vbUpperCase)
''
''    Set OpenRecordset = cmAdo.Execute
''
''    Exit Function
''
''ErrHandler:
''    Dim lng As Long
''
''    lng = Err.Number
''    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "", Err.Number, Err.Description)
''    On Error GoTo 0
''    Err.Raise lng
''End Function


''Public Sub ExecuteSQL(ByVal SQL As String)   ' As ADODB.Recordset
''    On Error GoTo 0 'ErrHandler
''    cmAdo.CommandText = StrConv(SQL, vbUpperCase)
'''    Set OpenRecordset = cmAdo.Execute
''    cmAdo.Execute
''    Exit Sub
''ErrHandler:
''Dim lng As Long
''    lng = Err.Number
''    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "", Err.Number, Err.Description)
''    On Error GoTo 0
''    Err.Raise lng
''End Sub

Private Sub Class_Initialize()
    Dim lngRet  As Long
    lngRet = fncGerValiable
    lngRet = fncConnectDb
    
    ' DB接続に状況
    If lngRet <> 0 Then
    ' 失敗
        blnDbCon = False
    Else
    ' 成功
        blnDbCon = True
    End If
    
End Sub

Private Function fncConnectDb() As Long

    Const PROCEDURE_NAME As String = "fncConnectDb"
    On Error GoTo ErrHandler
    
    Dim lngRet  As Long
    Dim strbuf As String
    Call subBeginProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME)
    
    'Recordset
'    Set wsOra = DBEngine.Workspaces(0)
'    Set dbOra = wsOra.OpenDatabase(gstrODBCConn, True, False, "uid=" & gstrUserName & ";pwd=" & gstrPassWord)
        
    'PL/SQL
    Set cnAdo = New ADODB.Connection
    
    Dim Ado As ADODB.Recordset
    
    'cnAdo.ConnectionString = "DSN=odwgpa;UID=gpa01;PWD=gpa01;EXC=T"
    strbuf = "DSN=" & gstrODBCConn & ";UID=" & gstrUserName & ";PWD=" & gstrPassWord
    cnAdo.ConnectionString = strbuf & ";EXC=T"
'------------<Modify Start mizutani 2008/03/06 300->1200 > ★★★☆---------------
'------------<Modify Start azuma 2008/01/29 (PH4)> ★★★☆-----------------------
'    cnAdo.CommandTimeout = 300
    cnAdo.CommandTimeout = 1200
'------------<Modify End   azuma 2008/01/29 (PH4)> ★★★☆-------------------
'------------<Modify End mizutani 2008/03/06 > ★★★☆-----------------------
    cnAdo.Open
    Set cmAdo = New ADODB.Command
    cmAdo.ActiveConnection = cnAdo
'    cnAdo.BeginTrans
    Call subEndProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME)
    Exit Function
ErrHandler:
    fncConnectDb = Err.Number
'    Select Case Err.Number
'    Case -2147217843
'        MsgBox "IDまたはパスワードが違う"
'    Case -2147467259
'        MsgBox "データ ソース名が違う"
'    End Select
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Function

Private Sub Class_Terminate()
On Error Resume Next

    'コネクションのクローズ
    cnAdo.Close
    
    'オブジェクトの破棄
    Set cnAdo = Nothing
    
End Sub

'*************************************************************************
'関数名　　：
'
'引　　数　：
'           lngProcess     I         処理フラグ 0=抽出処理 1=追加処理 2=更新処理 3=削除処理
'           strSql         I         SQL文
'           vntRs()        O         取得したデータ(２次元)
'           lngCols        O         列数
'           lngRows        O         行数
'           strErrCode     I/O       エラーコード(入力時は、除外するエラーコードが入ってくる。)
'戻り値　　：
'
'機能説明　：引数で取得したSQL文を実行し、結果を返す。
'
'更新履歴　：2006/07/06 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Function DoExequteSql(lngProcess As Long, _
                             strSql As String, _
                             vntRs() As Variant, _
                             lngCols As Long, _
                             lngRows As Long, _
                             Optional strErrCode As String = "") As Boolean

'関数説明
' 1.SQL文の実行処理を行う。
' 2.処理フラグが、0の場合、抽出したデータ件数をlngRows引数に返す。
' 3.処理フラグが、0の場合、抽出したデータをstrSql引数に返す。
' 4.処理フラグが、1,2,3の場合、更新したデータ件数をlngRows引数に返す。
' 5.処理フラグが、1,2,3の場合、strSqlに""を返す。
' 6.処理が成功した場合はTrueを返し、終了する。
' 7.エラーが発生した場合はFalseを返し、終了する。


On Error GoTo ErrSection

'***************************************************************
'*　変数宣言
'***************************************************************
    Dim RS As New ADODB.Recordset       'レコードセット
    Dim lngCnt  As Long                 'カウンタ
    Dim lngCnt2 As Long                 'カウンタ２

'*******************************************************
'* 変数初期化                                          *
'*******************************************************
    DoExequteSql = False      '関数初期化

    Erase vntRs                     '配列初期化
    lngCnt = 0                      'インデックス１初期化
    lngCnt2 = 0                     'インデックス２初期化


'*******************************************************
'* 関数開始　                                          *
'*******************************************************

    '処理フラグチェック
    Select Case lngProcess
        Case gcSELECT, gcINSERT, gcUPDATE, gcDELETE
        Case Else
            GoTo ErrSection
    End Select
    
    'SQL文チェック
    If Trim$(strSql) = "" Then
        GoTo ErrSection
    End If

    
    'レコードセット
    Select Case lngProcess
    
        'SELECTの場合
        Case gcSELECT
            RS.Open strSql, cnAdo, adOpenForwardOnly, adLockOptimistic, adCmdText
            Do While RS.EOF = False
            
                ReDim Preserve vntRs(RS.Fields.Count - 1, lngCnt2)
                
                For lngCnt = 0 To RS.Fields.Count - 1
                    'NULL値でない場合
                    If IsNull(RS.Fields(lngCnt)) = False Then
                        vntRs(lngCnt, lngCnt2) = RS.Fields(lngCnt)
                    'NULL値の場合
                    Else
                        vntRs(lngCnt, lngCnt2) = gfunc_ChangeNull(RS.Fields(lngCnt), "")
                    End If
                Next
                
                lngCnt2 = lngCnt2 + 1
                DoEvents
                RS.MoveNext
            Loop
            lngCols = RS.Fields.Count
            lngRows = lngCnt2
            RS.Close

        'INSERT,UPDATE,DELETEの場合
        Case gcINSERT, gcUPDATE, gcDELETE
            Set RS = cnAdo.Execute(strSql, lngRows, &H1)
            lngCols = 0
    
    End Select


    'レコードセットオブジェクト開放
    Set RS = Nothing

    '処理成功
    DoExequteSql = True

Exit Function

'*******************************************************
'* エラーセクション                                　  *
'*******************************************************
ErrSection:

    '処理失敗
    DoExequteSql = False
    lngCols = 0
    lngRows = 0

    '除外エラーコードと一致した場合はログ出力を行わない。
    If Mid$(Err.Description, 1, Len(gc00_OraErr)) = gc00_OraErr Then
        If strErrCode = Mid$(Err.Description, Len(gc00_OraErr) + 1, 9) Then Exit Function
    Else
        If strErrCode = Mid$(Err.Description, 1, 9) Then Exit Function
    End If

    'エラーコードを戻り値にいれる。
    If Mid$(Err.Description, 1, Len(gc00_OraErr)) = gc00_OraErr Then
        strErrCode = Mid$(Err.Description, Len(gc00_OraErr) + 1, 9)
    Else
        strErrCode = Mid$(Err.Description, 1, 9)
    End If

'    Debug.Print "Err_SQL：" & strSql

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "", Err.Number, Err.Description & "(" & strSql & ")")
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function


