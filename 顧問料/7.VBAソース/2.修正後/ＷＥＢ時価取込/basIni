Attribute VB_Name = "basIni"
Option Explicit

'*************************************************************************
'
'プロジェクト名：新顧問料契約管理システム・WEB時価ﾃﾞｰﾀ取込処理
'
'オブジェクト名：basIni
'
'機能概要　：アプリケーション初期処理
'
'更新履歴　：2006/01/17 SRA T.Tanaka    新規作成
'　　　　　：2006/01/26 SRA T.Tanaka    DBアクセスをADOに統一
'　　　　　：2006/01/28 SRA T.Tanaka    信託銀行コードの属性変更
'　　　　　：2006/01/28 SRA T.Tanaka    シートの可視対応
'　　　　　：2006/05/09 SRA H.Anpo      TCSB,JTSB対応
'　　　　　：2006/05/18 SRA H.Anpo      MTBJ未払費用シート追加対応
'
'*************************************************************************
Private Const MODULE_NAME As String = "basIni"

'*************************************************************************
'関数名　　：起動処理
'
'引　　数　：なし
'
'戻り値　　：なし
'
'機能説明　：アプリケーション起動処理
'
'更新履歴　：2006/01/17 SRA T.Tanaka    新規作成
'更新履歴　：2006/11/09 SRA IIDA　      MENUにDB接続を持たせるため削除
'
'*************************************************************************
Public Sub subInit()
Attribute subInit.VB_ProcData.VB_Invoke_Func = "i\n14"

    Const PROCEDURE_NAME As String = "subInit"
    On Error GoTo ErrHandler
    
    Dim lngRet  As Long
    Dim strmsg  As String
    
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
    
    Do
        '2006/11/09 DEL S
'        strMsg = ERRMSG_APPLOAD
'
'        lngRet = fncGerValiable
'        If lngRet <> 0 Then
'            Exit Do
'        End If
        '2006/11/09 DEL E
        
        lngRet = fncIniBook
        If lngRet <> 0 Then
            Exit Do
        End If
        
        '2006/11/09 DEL S
'        lngRet = fncConnectDb
'        If lngRet <> 0 Then
'            strMsg = ERRMSG_DB_CONN
'            Exit Do
'        End If
        '2006/11/09 DEL E
        strmsg = vbNullString
        
    Loop Until True
    
    '<2006/12/25 DEL S iida>
'    If strmsg <> vbNullString Then
'        MsgBox strmsg, vbExclamation, MSG_TTL_SYS
'    End If
    '<2006/12/25 DEL E iida>
        
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    Exit Sub
ErrHandler:
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Sub
'<2006/11/28 DEL S iida>
''*************************************************************************
''関数名　　：共通変数取得処理
''
''引　　数　：なし
''
''戻り値　　：Long       エラー番号
''
''機能説明　：ＤＢ接続文字列、ログモードの取得
''
''更新履歴　：2006/01/18 SRA T.Tanaka    新規作成
''
''*************************************************************************
'Private Function fncGerValiable()
'
'    Const PROCEDURE_NAME As String = "fncGerValiable"
'    On Error GoTo ErrHandler
'
'    Dim lngRet  As Long
'
'    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
'
'    With ThisWorkbook.Sheets("設定")
'
'        gstrODBCConn = .Range("ODBC")
'        gstrUserName = .Range("USERNAME")
'        gstrPassWord = .Range("PASSWORD")
'        gstrLogLevel = .Range("LOGLEVEL")
'        gintDebugLvl = .Range("DEBUGLVL")
'
'    End With
'
'    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
'    Exit Function
'ErrHandler:
'    fncGerValiable = Err.Number
'    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
'End Function
'<2006/11/28 DEL E iida>

'*************************************************************************
'関数名　　：ブックの初期化
'
'引　　数　：ARG1   I   Msg     Boolean  メッセージ表示フラグ
'
'戻り値　　：Long       エラー番号
'
'機能説明　：リリースされた状態に戻す。
'
'更新履歴　：2006/01/18 SRA T.Tanaka    新規作成
'　　　　　：2006/01/27 SRA T.Tanaka    シートの可視対応
'　　　　　：2006/02/07 SRA T.Tanaka    作成ボタンの初期処理に対応
'
'*************************************************************************
Public Function fncIniBook(Optional ByVal Msg As Boolean = False) As Long

    Const PROCEDURE_NAME As String = "fncIniBook"
    On Error GoTo ErrHandler
    
    Dim lngRet  As Long
    
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
    fncIniBook = -1
    
    Do
        Sheets(SHEET_MAIN).Select
        If Msg Then
            If Sheets.Count > DEF_SHEET_COUNT Then
                If vbNo = MsgBox(gfunc_ErrorMsg(2, MSG_INIT_SHEET, "", "", False), vbQuestion + vbYesNo, PGM_ID) Then
                    GoTo ErrHandler
                End If
            End If
        Else
            lngRet = fncIniMain
        End If
        
        lngRet = fncDelProcessSheets
        lngRet = fncIniErrSheet
        Call fncSetSheetsVisible
        
    Loop Until True
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    fncIniBook = 0
    Exit Function
    
ErrHandler:
    fncIniBook = -1
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Function

'*************************************************************************
'関数名　　：処理シートの削除
'
'引　　数　：なし
'
'戻り値　　：Long       エラー番号
'
'機能説明　：不要なシートを削除する。
'
'更新履歴　：2006/01/18 SRA T.Tanaka    新規作成
'
'*************************************************************************
Private Function fncDelProcessSheets() As Long

    Const PROCEDURE_NAME As String = "fncDelProcessSheets"
    On Error GoTo ErrHandler
    
    Dim lngcnt  As Long
    
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
    fncDelProcessSheets = -1
    
    'For lngCnt = 1 To Sheets.Count
    Application.DisplayAlerts = False
    lngcnt = 1
    Do
        Select Case Sheets(lngcnt).Name
        '<2006/11/28 UPDATE iida> 設定シート除外
        Case SHEET_MAIN, SHEET_USR1, SHEET_USR2, SHEET_ERR1 ', SHEET_USR3
        'Case SHEET_MAIN, SHEET_USR1, SHEET_USR2, SHEET_INIT, SHEET_ERR1, SHEET_USR3
            lngcnt = lngcnt + 1
        Case Else
            Sheets(lngcnt).Delete
        End Select
    Loop Until lngcnt > Sheets.Count
    Application.DisplayAlerts = True
    'Next lngCnt
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    fncDelProcessSheets = 0
    Exit Function
    
ErrHandler:
    fncDelProcessSheets = -1
    '<2006/12/18 DEL iida>
    'fncDelProcessSheets = Err.Number
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Function

'*************************************************************************
'関数名　　：メイン画面の初期化
'
'引　　数　：なし
'
'戻り値　　：Long       エラー番号
'
'機能説明　：入力コントロールの初期化
'
'更新履歴　：2006/01/18 SRA T.Tanaka    新規作成
'　　　　　：2006/01/28 SRA T.Tanaka    信託銀行コードの属性変更
'　　　　　：2006/05/09 SRA H.Anpo      TCSB,JTSB対応
'
'*************************************************************************
Private Function fncIniMain() As Long

    Const PROCEDURE_NAME As String = "fncIniMain"
    On Error GoTo ErrHandler
    
    Dim lngRet  As Long
    
    '<2006/12/01 DEL S IIDA>
'    If gintDebugLvl = 1 Then
'        Exit Function
'    End If
    '<2006/12/01 DEL E IIDA>
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
    fncIniMain = -1
    
    With Sheets(SHEET_MAIN)
        .txtDate.Text = ""
        .txtFile1.Text = ""
        .txtFile2.Text = ""
        .txtFile3.Text = ""
        With .cmbBank
            .Style = fmStyleDropDownCombo
            .Text = ""
            .Style = fmStyleDropDownList
            .Clear
'=== 2006/05/09 Modified By Anpo Start
'            .AddItem "ＭＳＢ"
            .AddItem LIST_ITEM_MSB
            .AddItem LIST_ITEM_JTS
            .AddItem LIST_ITEM_TCB
'=== 2006/05/09 Modified By Anpo End

        End With
    End With
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    fncIniMain = 0
    Exit Function
    
ErrHandler:
    fncIniMain = -1
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Function

'*************************************************************************
'関数名　　：エラーシートの初期化
'
'引　　数　：なし
'
'戻り値　　：Long       エラー番号
'
'機能説明　：ヘッダー以外削除する。
'
'更新履歴　：2006/01/18 SRA T.Tanaka    新規作成
'　　　　　：2006/01/30 SRA T.Tanaka    スコープの変更、ヘッダーは削除しない。
'
'*************************************************************************
Public Function fncIniErrSheet() As Long

    Const PROCEDURE_NAME As String = "fncIniErrSheet"
    On Error GoTo ErrHandler
    
    Dim lngLastRow  As Long
    
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
    fncIniErrSheet = -1
    
    With Sheets(SHEET_ERR1)
        lngLastRow = .Cells.SpecialCells(xlCellTypeLastCell).Row
        If lngLastRow > 1 Then
            'ヘッダーは削除しない。
            .Range("2:" & lngLastRow).Delete
        End If
        glngErrNum = 0
    End With
    
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    fncIniErrSheet = 0
    Exit Function
    
ErrHandler:
    fncIniErrSheet = -1
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Function

'<2006/11/28 DEL S iida>
''*************************************************************************
''関数名　　：起動処理
''
''引　　数　：なし
''
''戻り値　　：Long       エラー番号
''
''機能説明　：アプリケーション起動処理
''
''更新履歴　：2006/01/17 SRA T.Tanaka    新規作成
''　　　　　：2006/01/24 SRA T.Tanaka    PL/SQL対応
''　　　　　：2006/01/26 SRA T.Tanaka    DBアクセスをADOに統一
''　　　　　：2006/02/08 SRA T.Tanaka    スコープを変更
''
''*************************************************************************
'Public Function fncConnectDb() As Long
'
'    Const PROCEDURE_NAME As String = "fncConnectDb"
'    On Error GoTo ErrHandler
'
'    Dim lngRet  As Long
'    Dim strBuf As String
'    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
'
'    'Recordset
''    Set wsOra = DBEngine.Workspaces(0)
''    Set dbOra = wsOra.OpenDatabase(gstrODBCConn, True, False, "uid=" & gstrUserName & ";pwd=" & gstrPassWord)
'
'    'PL/SQL
'    Set cnAdo = New ADODB.Connection
'
'    Dim Ado As ADODB.Recordset
'
'    '=== 2006/05/18 Added By Anpo Start
'    If gstrODBCConn = "" Then
'        fncGerValiable
'    End If
'    '=== 2006/05/18 Added By Anpo End
'
'    'cnAdo.ConnectionString = "DSN=odwgpa;UID=gpa01;PWD=gpa01;EXC=T"
'    strBuf = "DSN=" & gstrODBCConn & ";UID=" & gstrUserName & ";PWD=" & gstrPassWord
'    cnAdo.ConnectionString = strBuf & ";EXC=T"
'    cnAdo.Open
'    Set cmAdo = New ADODB.Command
'    cmAdo.ActiveConnection = cnAdo
'
'    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
'    Exit Function
'ErrHandler:
'    fncConnectDb = Err.Number
'    Select Case Err.Number
'    Case 3151
'        'パスワードが違う
'    End Select
'    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
'End Function
'<2006/11/28 DEL E iida>

'*************************************************************************
'関数名　　：シートの可視切り替え
'
'引　　数　：なし
'
'戻り値　　：なし
'
'機能説明　：ユーザーのイベント、エラー件数、デバッグモードを基に切り替える。
'
'更新履歴　：2006/01/28 SRA T.Tanaka    新規作成
'　　　　　：2006/02/17 SRA T.Tanaka    upload1〜3を非表示に
'
'*************************************************************************
Public Function fncSetSheetsVisible() As Long
    
    Const PROCEDURE_NAME As String = "fncSetSheetsVisible"
    
    On Error GoTo ErrHandler
    
    Dim lngcnt      As Long
    Dim blnVisible  As Boolean
    
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
    fncSetSheetsVisible = -1
    
    For lngcnt = 1 To Sheets.Count
        Select Case Sheets(lngcnt).Name
        Case SHEET_MAIN, SHEET_USR1, SHEET_USR2            '"メイン画面"、"未収未払控除対象口座"、"集計分類対応表"
            blnVisible = True
'=== 2006/05/18 Added By Anpo Start
'        Case D_PRICES_TRUST, D_PRC_BY_ASSET, D_PRC_SPCASSET '"信託時価"、"資産別時価"、"特定資産時価"
        Case D_PRICES_TRUST, D_MIBARAI_HIYO, D_PRC_BY_ASSET, D_PRC_SPCASSET '"信託時価"、"未払"、"資産別時価"、"特定資産時価"
'=== 2006/05/18 Added By Anpo End
            blnVisible = CBool(gusrErr.UserEvent = EVENT_MAKE)
        Case SHEET_UPD1, SHEET_UPD2, SHEET_UPD3             '"upload1"、"upload2"、"upload3"
            blnVisible = False
        Case SHEET_ERR1     '"error"
            '<2006/12/22 UPDATE S iida>
            If glngErrNum > 0 Then
                blnVisible = True
            Else
                blnVisible = False
            End If
            '2006/12/22 DEL iida>
            'blnVisible = glngErrNum
            '<2006/12/22 UPDATE E iida>
        '<2006/11/28 UPDATE Iida> 設定シート除外
'        Case SHEET_WORK                         '"work1"
        'Case SHEET_INIT, SHEET_WORK                         '"work1"、"設定"
'            blnVisible = False
        '<2006/11/28 ADD Iida>
'        Case SHEET_USR3                                     '口座検索ツール (TEST用)
'            blnVisible = False
        Case Else
            blnVisible = False
        End Select
        
        '<2006/12/01 UPDATE S IIDA>
        Sheets(lngcnt).Visible = CBool(blnVisible)
        'Sheets(lngcnt).Visible = CBool(blnVisible Or (gintDebugLvl <> 0))
        '<2006/12/01 UPDATE E IIDA>
    Next lngcnt
    
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    fncSetSheetsVisible = 0
    Exit Function
    
ErrHandler:
    fncSetSheetsVisible = -1
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Function
