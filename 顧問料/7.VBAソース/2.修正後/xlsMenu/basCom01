Attribute VB_Name = "basCom01"
Option Explicit

Const MODULE_NAME = "basCom01"

Public Const SHEETLOCKPASS = "nam"

'
'*************************************************************************
'関数名　　：エクセルワークブックのオープン処理
'
'引　　数　：
'           strWkBookFName       I       オープン対象ブック名
'           blnForceMode         I       True:別インスタンスで開く
'
'戻り値　　：
'
'機能説明　：指定されたワークブックを開く
'
'更新履歴　：2006/07/07 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Sub gCom01_OpenWorkBook(ByVal strWkBookFName As String, Optional blnForceMode As Boolean = False)
    Dim lngBookCnt      As Long

    '２重起動のチェック
    If Not gblnInstanceKick And Not blnForceMode Then
        For lngBookCnt = 1 To Application.Workbooks.Count
    
            If Application.Workbooks(lngBookCnt).Name = strWkBookFName Then
                Call gfunc_ErrorMsg(3, 500, "", strWkBookFName)
                Application.Workbooks(strWkBookFName).Activate
                Exit Sub
            End If
    
        Next lngBookCnt
    End If


    'ファイルのオープン処理
    If Dir(Application.ThisWorkbook.Path & "\" & strWkBookFName) <> "" Then
        
        If gblnInstanceKick Or blnForceMode Then
            Dim xlApp As Object
            Set xlApp = CreateObject("excel.application")
            With xlApp
                With .Application
                    If .WindowState = xlNormal Then
                        .Top = ThisWorkbook.Application.Top + 20
                        .Left = ThisWorkbook.Application.Left + 20
                    End If
                End With
                .Visible = True
                .Workbooks.Open FileName:=Application.ThisWorkbook.Path & "\" & strWkBookFName
            End With
        Else
'------------<Modify Start azuma 2007/12/27 > ★★★☆-----------------------
            Workbooks.Open FileName:=Application.ThisWorkbook.Path & "\" & strWkBookFName, Password:=SHEETLOCKPASS
''            Workbooks.Open FileName:=Application.ThisWorkbook.Path & "\" & strWkBookFName
'------------<Modify End   azuma 2007/12/27 > ★★★☆-----------------------
        End If
    Else
    
        Call gfunc_ErrorMsg(4, 501, "", strWkBookFName)
        Exit Sub
    
    End If

End Sub

'*************************************************************************
'関数名　　：NULL文字列置換処理
'
'引　　数　：
'           vntTrg      I       対象文字列
'           vntCng      I       置換文字列
'
'戻り値　　：
'
'機能説明　：
'           対象文字列がNULLの場合はNULLの場合の置換文字列を返す。
'           対象文字列がNULLでない場合は対象文字列をそのまま返す。
'
'更新履歴　：2006/07/06 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Function gfunc_ChangeNull(vntTrg As Variant, vntCng As Variant) As Variant

On Error GoTo ErrSection

'!*******************************************************
'!* 関数開始                                            *
'!*******************************************************

    '!Nullチェック
    If IsNull(vntTrg) = True Then
        gfunc_ChangeNull = vntCng
    Else
        gfunc_ChangeNull = vntTrg
    End If

Exit Function

'!***************************************************************
'!*　エラーセクション
'!***************************************************************
ErrSection:

    gfunc_ChangeNull = vntTrg

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "gfunc_ChangeNull", Err.Number, Err.Description)
    On Error GoTo 0
    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function


'シートの保護処理
'*************************************************************************
'関数名　　：シートの保護処理関数
'
'引　　数　：
'           objTarget       I/O     削除対象
'           blnProtect      I       フラグ(True:保護,False:保護解除)
'
'戻り値　　：なし
'
'機能説明　：シートの保護と保護解除を行う
'
'更新履歴　：2006/07/06 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Sub gCom01_SheetProtect(ByRef objTarget As Object, ByVal blnProtect As Boolean)

    If blnProtect = True Then
    '保護実行
        objTarget.Protect Password:=SHEETLOCKPASS, UserInterfaceOnly:=True
    Else
    '保護解除
        objTarget.Unprotect Password:=SHEETLOCKPASS
    End If
    

End Sub

'*************************************************************************
'関数名　　：Bookの保護処理関数
'
'引　　数　：
'           objTarget       I/O     削除対象
'           blnProtect      I       フラグ(True:保護,False:保護解除)
'
'戻り値　　：なし
'
'機能説明　：Bookの保護と保護解除を行う
'
'更新履歴　：2006/07/21 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Sub gCom01_BookProtect(ByRef objTarget As Object, ByVal blnProtect As Boolean)
    
    If blnProtect = True Then
    '保護実行
        objTarget.Protect Structure:=True, Password:=SHEETLOCKPASS
    Else
    '保護解除
        objTarget.Unprotect Password:=SHEETLOCKPASS
    End If
End Sub



'*************************************************************************
'関数名　　：サーバーのシステム日付を取得する
'
'引　　数　：
'           strDate     O       日付(YYYYMMDD)
'           strTime     O       時刻(HH24MISS)
'
'戻り値　　：なし
'
'機能説明　：サーバーのシステム日付を取得する。
'
'更新履歴　：2006/07/06 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Sub gfunc_GetSvDateTime(ByRef strDate As String, ByRef strTime As String)

On Error GoTo ErrHandler

    Const PROCEDURE_NAME As String = "gfunc_GetSvDateTime"

    Dim strSql      As String
    Dim vdata()     As Variant
    Dim lngCol      As Long
    Dim lngRow      As Long
    Dim lngCnt      As Long
    
    
   strSql = ""
   strSql = strSql & " SELECT"
   strSql = strSql & "     TO_CHAR(SYSDATE,'YYYYMMDD'),"
   strSql = strSql & "     TO_CHAR(SYSDATE,'HH24MISS')"
   strSql = strSql & " FROM"
   strSql = strSql & "     DUAL;"
   strSql = strSql & " "
    
    'データ取得
    Call gclsDB.DoExequteSql(gcSELECT, strSql, vdata, lngCol, lngRow)
    
    
    '取得データをセルに設定
    If lngRow > 0 Then
        strDate = vdata(0, 0)   '日付
        strTime = vdata(1, 0)   '時刻
    End If
    
    Erase vdata
    
    Exit Sub
ErrHandler:

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "", Err.Number, Err.Description)
    On Error GoTo 0
    Erase vdata
    Err.Raise lng
'---- Error Log End   ----------------------------------------------------



End Sub

'*************************************************************************
'関数名　　：口座番号の整形処理
'
'引　　数　：
'           strData     I       口座番号
'
'戻り値　　：ゼロパディングした口座番号
'
'機能説明　：入力された口座番号をゼロパディングする。
'
'更新履歴　：2006/07/07 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Function gfunc_KozaNoFormat(ByVal strData As String) As String
    
'    If IsNumeric(strData) = True Then
        gfunc_KozaNoFormat = Right("0000000" & Trim(strData), 7)
'    End If

End Function

'*************************************************************************
'関数名　　：年月日の整形処理
'
'引　　数　：
'           strData     I       年月日(yyyy/mm/dd)
'
'戻り値　　：YYYYMMDD形式の文字列
'
'機能説明　：入力された年月日からを"/"を削除する。
'
'更新履歴　：2006/07/07 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Function gfunc_YmdFormat(ByVal strData As String) As String

    gfunc_YmdFormat = Mid(strData, 1, 4) & "/" & Mid(strData, 5, 2) & "/" & Mid(strData, 7, 2)

End Function


'*************************************************************************
'関数名　　：日付の妥当チェック処理
'
'引　　数　：
'           strDate     I       年月日(yyyy/mm/dd)
'
'戻り値　　：YYYYMMDD形式の妥当チェック
'
'機能説明　：入力された年月日から妥当性をチェック
'
'更新履歴　：2006/07/07 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Function gfunc_CheckDate(ByVal strDate As String) As Boolean
    
    Dim strDateBuf As String
    
    strDateBuf = ""
    
    gfunc_CheckDate = False
    
    '必須チェック
    If Trim(strDate) = "" Then
        Exit Function
    End If
    
    '桁数チェック
    If Len(strDate) <> 8 Then
        Exit Function
    End If
    
    '日付の妥当チェック
    strDateBuf = Mid(strDate, 1, 4) & "/" & Mid(strDate, 5, 2) & "/" & Mid(strDate, 7, 2)
    If IsDate(strDateBuf) = False Then
        Exit Function
    End If
    
    gfunc_CheckDate = True
    

End Function



'*************************************************************************
'関数名　　：期間の妥当チェック処理
'
'引　　数　：
'           strFrom     I       年月日(yyyy/mm/dd)
'           strTo       I       年月日(yyyy/mm/dd)
'
'戻り値　　：YYYYMMDD形式の期間チェック
'
'機能説明　：入力された年月日からを"/"を削除する。
'
'更新履歴　：2006/07/07 SRA Y.Azuma    新規作成
'
'*************************************************************************
Public Function gfunc_CheckKikan(ByVal strFrom As String, ByVal strTo As String) As Boolean
    
    Dim strFrBuf As String
    Dim strToBuf As String
    
    strFrBuf = ""
    strToBuf = ""
    
    gfunc_CheckKikan = False
    
    '必須チェック
    If Trim(strFrom) = "" Then
        Call gfunc_ErrorMsg(3, 1, "顧問料請求期間From", "")
        Exit Function
    End If
    
    If Trim(strTo) = "" Then
        Call gfunc_ErrorMsg(3, 1, "顧問料請求期間To", "")
        Exit Function
    End If

    
    '桁数チェック
    If Len(strFrom) <> 8 Then
        Call gfunc_ErrorMsg(3, 12, "顧問料請求期間From", "")
        Exit Function
    End If
    
    If Len(strTo) <> 8 Then
        Call gfunc_ErrorMsg(3, 12, "顧問料請求期間To", "")
        Exit Function
    End If
    
    
    '日付の妥当チェック
    strFrBuf = Mid(strFrom, 1, 4) & "/" & Mid(strFrom, 5, 2) & "/" & Mid(strFrom, 7, 2)
    strToBuf = Mid(strTo, 1, 4) & "/" & Mid(strTo, 5, 2) & "/" & Mid(strTo, 7, 2)
    
    If IsDate(strFrBuf) = False Then
        Call gfunc_ErrorMsg(3, 13, "顧問料請求期間From", "")
        Exit Function
    End If
    
    If IsDate(strToBuf) = False Then
        Call gfunc_ErrorMsg(3, 13, "顧問料請求期間To", "")
        Exit Function
    End If
    
    
    '期間の大小チェック
    If strFrom > strTo Then
        Call gfunc_ErrorMsg(3, 5, "顧問料請求期間From/To", "顧問料請求期間From≦顧問料請求期間Toの条件で入力して下さい。")
        Exit Function
    End If
    
    
    gfunc_CheckKikan = True
    

End Function

'*************************************************************************
'関数名　　：口座番号の存在チェック処理
'
'引　　数　：
'           strKozaNo   I       口座番号
'           strData1    O       名称
'
'戻り値　　：Boolean
'
'機能説明　：口座番号の存在チェック
'
'更新履歴　：2006/07/06 SRA Y.Azuma    新規作成
'更新履歴　：2006/07/12 SRA Y.Azuma    修正　　　KK01廃止対応
'更新履歴　：2006/07/25 SRA Y.Azuma    修正　　　共通に格上げ
'更新履歴　：2006/10/04 SRA H.Haya     修正　　　開設区分=1:国内本開設の条件を追加
'更新履歴　：2013/04/11 GUT金 顧問バック更改対応
'
'*************************************************************************
Public Function gCom01_KozaNoExist(ByVal strKozaNo As String, Optional strData1 As String) As Boolean
    Dim strSql      As String
    Dim vdata()     As Variant
    Dim lngCol      As Long
    Dim lngRow      As Long
    Dim lngCnt      As Long
'    Dim strData1    As String
    
    gCom01_KozaNoExist = False
    
    strSql = ""
    strSql = strSql & " SELECT"
    strSql = strSql & "     A.NAME_J"
    strSql = strSql & " FROM"
    strSql = strSql & "     VW_DT001D A"
    strSql = strSql & " WHERE"
    strSql = strSql & "     A.prtcd='" & strKozaNo & "'"
    '------------<顧問バック更改対応 2013/04/11 GUT金 START> ------------
    'strSql = strSql & " AND A.settei_kbn='1'"           '06/10/04 SRA H.Haya Update
    strSql = strSql & " AND A.settei_kbn='0'"
    strSql = strSql & " AND A.gengo='0'"
    '------------<顧問バック更改対応 2013/04/11 GUT金 END> ------------
    strSql = strSql & " "
    
    'データ取得
    Call gclsDB.DoExequteSql(gcSELECT, strSql, vdata, lngCol, lngRow)
    
    
    strData1 = ""
    '取得データがある場合を名称をセルに設定
    If lngRow > 0 Then
         strData1 = vdata(0, 0)
    Else
        strData1 = ""
    End If
    
    Erase vdata
    
    'データありの場合のみ正常
    If lngRow > 0 Then
        gCom01_KozaNoExist = True
    End If
    
    Exit Function

ErrHandler:
    gCom01_KozaNoExist = False

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "gCom01_KozaNoExist", Err.Number, Err.Description)
    Erase vdata
    On Error GoTo 0
    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function

'*************************************************************************
'関数名　　：
'
'引　　数　：
'           strData       I       チェック対象文字列
'           strChkStr     I       チェック対象文字
'
'戻り値　　：チェック後文字列
'
'機能説明　：チェック文字が存在した場合は、2個重ねる｡
'
'更新履歴　：2007/03/12 SRA T.Ichikawa  新規作成
'
'*************************************************************************
Public Function func_ChkQuoteshon(strData As String, _
                                  strChkStr As String) As String

On Error GoTo ErrSection


    Dim lngDataLen  As Long     'チェック文字列の文字数
    Dim lngCnt      As Long     'カウンタ
    Dim strString   As String   '変換後の文字列

    strString = ""

'*******************************************************
'* 関数開始　                                        　*
'*******************************************************

    'チェック文字が半角1文字以外はエラーとする。
    If LenB(StrConv(strChkStr, vbFromUnicode)) <> 1 Then
        Exit Function
    End If


    'チェック文字が存在しない場合は終了する。(正常終了)
    If InStr(strData, strChkStr) = 0 Then
        func_ChkQuoteshon = strData
        Exit Function
    End If

    'チェック文字列の文字数を取得する。
    lngDataLen = Len(strData)

    '1個目のチェック文字までを取得する。
    strString = Left(strData, InStr(strData, strChkStr) - 1)


    '1個目のチェック文字から最後まで検索する。
    For lngCnt = InStr(strData, strChkStr) To lngDataLen

        'チェック文字が1個あったら2個重ねる。
        If Mid(strData, lngCnt, 1) = strChkStr Then
            strString = strString & strChkStr & Mid(strData, lngCnt, 1)
        Else
            strString = strString & Mid(strData, lngCnt, 1)
        End If

    Next lngCnt

    '処理成功
    func_ChkQuoteshon = strString

    Exit Function

ErrSection:

    'エラーの場合
    func_ChkQuoteshon = strData

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "モジュールネーム", Err.Number, Err.Description)
    On Error GoTo 0
    Err.Raise lng
'---- Error Log End   ----------------------------------------------------

End Function

