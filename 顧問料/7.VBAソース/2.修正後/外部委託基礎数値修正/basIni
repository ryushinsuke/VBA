Attribute VB_Name = "basIni"
Option Explicit
'*************************************************************************
'
'プロジェクト名：外部委託ライセンスフィー計算システム・外部委託基礎数値修正
'
'オブジェクト名：basIni
'
'機能概要　    ：アプリケーション初期処理
'
'更新履歴　    ：2008/06/19 SRA H.Anpo  新規作成
'
'*************************************************************************
Private Const MODULE_NAME As String = "basIni"

'*************************************************************************
'関数名　　：起動処理
'
'引　　数　：なし
'
'戻り値　　：なし
'
'機能説明　：アプリケーション起動処理
'
'更新履歴　：2008/06/19 SRA H.Anpo  新規作成
'
'*************************************************************************
Public Sub subInit()
Attribute subInit.VB_ProcData.VB_Invoke_Func = "i\n14"

    Const PROCEDURE_NAME As String = "subInit"

On Error GoTo ErrHandler
    
    Dim lngRet  As Long
    
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    'ブック、シートの初期化
    Call fncIniBook
    
    'コンボリストの初期設定
    Call keisanIniCombo
    
    Application.ScreenUpdating = True
    
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    Exit Sub
ErrHandler:
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Sub

'*************************************************************************
'関数名　　：ブックの初期化
'
'引　　数　：なし
'
'戻り値　　：Long       エラー番号
'
'機能説明　：リリースされた状態に戻す。
'
'更新履歴　：2008/06/20 SRA H.Anpo  新規作成
'
'*************************************************************************
Public Function fncIniBook() As Long

    Const PROCEDURE_NAME As String = "fncIniBook"
    On Error GoTo ErrHandler
    
    Dim lngRet  As Long
    
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
        
    fncIniBook = 0
        
    With ThisWorkbook.Sheets(SHEET_MAIN)
        .Select
        Call fncSetSheetsVisible
        lngRet = fncIniMain
        .Range("口座番号").Select
    End With
    
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    Exit Function
ErrHandler:
    fncIniBook = Err.Number
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Function

'*************************************************************************
'関数名　　：メイン画面の初期化
'
'引　　数　：なし
'
'戻り値　　：Long       エラー番号
'
'機能説明　：入力フィールドの初期化
'
'更新履歴　：2008/06/20 SRA H.Anpo  新規作成
'
'*************************************************************************
Private Function fncIniMain() As Long

    Const PROCEDURE_NAME As String = "fncIniMain"
    On Error GoTo ErrHandler
    
    fncIniMain = 0
    
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
    
    With ThisWorkbook.Sheets(SHEET_MAIN)
        'シート保護解除
        subCmnUnProtectActiveSheet
        
        '全フィールドクリア
        fncKsCmnClearField 0
        
        '外部委託先・口座番号・基準日の退避エリアをクリア
        fncKsCmnClearSaveField
        
        '初期値設定
        '外部委託先
        .Range("外部委託先").Value = INIT_VAL_GI_NO
        
        'シート保護
        subCmnProtectActiveSheet
    End With
    
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    Exit Function
ErrHandler:
    fncIniMain = Err.Number
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Function

'*************************************************************************
'関数名　　：シートの可視切り替え
'
'引　　数　：なし
'
'戻り値　　：なし
'
'機能説明　：各シートの可視を切り替える
'
'更新履歴　：2008/06/20 SRA H.Anpo  新規作成
'
'*************************************************************************
Public Function fncSetSheetsVisible()
    
    Const PROCEDURE_NAME As String = "fncSetSheetsVisible"
    
    On Error GoTo ErrHandler
    
    Dim lngCnt      As Long
    Dim blnVisible  As Boolean
    
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
    
    With ThisWorkbook
    
        For lngCnt = 1 To .Sheets.Count
        
            Select Case .Sheets(lngCnt).Name
            Case SHEET_MAIN                                     '"メイン画面"
                blnVisible = True
            Case Else
                blnVisible = False
            End Select
            
            .Sheets(lngCnt).Visible = CBool(blnVisible Or (gintDebugLvl <> 0))
            
        Next lngCnt
    
    End With
    
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    
    Exit Function
ErrHandler:
     
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
End Function

'*************************************************************************
'関数名　　：コンボ項目の初期設定
'
'引　　数　：なし
'
'戻り値　　：なし
'
'機能説明　：コンボ項目の初期設定を行う
'
'更新履歴　：2008/06/20 SRA H.Anpo  新規作成
'
'*************************************************************************
Private Sub keisanIniCombo()

    Dim strErrMsg As String
    
    strErrMsg = ""

    'コード値のデータ取得
    If fncGet_Code() = False Then
        '21021 初期データ取得でエラーが発生しました。
        Call gfunc_ErrorMsg(3, 21021, "", "(コード値テーブル取得で失敗)")
        Exit Sub
    End If
    
    'コード値と料率の名前定義
    Call subNameDefine

End Sub


'*************************************************************************
'関数名　　：コード値テーブル抽出処理
'
'引　　数　：無し
'
'戻り値　　：Boolean
'
'機能説明　：コード値テーブルからコンボ項目を取得し「data」シートに記入
'
'更新履歴　：2008/06/20 SRA H.Anpo     新規作成
'
'*************************************************************************
Private Function fncGet_Code() As Boolean
       
On Error GoTo ErrHandler
    
    Dim vCodeNo(1)              As Variant
    Dim lngCnt                  As Long
    Dim lngCnt2                 As Long
    Dim blnRet                  As Boolean
    
    Dim strSql                  As String
    Dim vData()                 As Variant
    Dim lngCol                  As Long
    Dim lngRow                  As Long
    
    fncGet_Code = False
    
    '契約区分のコード値を取得
    vCodeNo(1) = CODENO_KEIYAKU_KBN     '契約区分
    
    For lngCnt = 1 To UBound(vCodeNo())
    
        strSql = ""
        strSql = strSql & " SELECT"
        strSql = strSql & "     CODE_VALUE || ':' || NVL(VALUE_NAME,'')"
        strSql = strSql & " FROM"
        strSql = strSql & "     KYK_CODE_VALUE"
        strSql = strSql & " WHERE"
        strSql = strSql & "     SAKUJO_FLG ='0'"
        strSql = strSql & " AND CODE_NO    = '" & vCodeNo(lngCnt) & "'"
        strSql = strSql & " ORDER BY "
        strSql = strSql & "     CODE_VALUE "
        'データ取得
        blnRet = gclsdb.DoExequteSql(gcSELECT, strSql, vData, lngCol, lngRow)
        
        'データセル範囲をクリア
        With ThisWorkbook.Worksheets(SHEET_DATA)
            .Activate
            
            .Range(.Cells(2, lngCnt), .Cells(65536, lngCnt)).ClearContents
        
            '取得データをセルに設定
            For lngCnt2 = 0 To lngRow - 1
                 .Cells(2 + lngCnt2 + 0, lngCnt).Value = vData(0, lngCnt2)
            Next lngCnt2
        
        End With
        
        Erase vData
    
    Next lngCnt
    
    Erase vCodeNo
    
    fncGet_Code = blnRet
    
    Exit Function
ErrHandler:

'---- Error Log Start ----------------------------------------------------
    Dim lng As Long
    lng = Err.Number
    Call subErrProcess(ThisWorkbook.Name & "\" & MODULE_NAME, "fncGet_Code", Err.Number, Err.Description)
    On Error GoTo 0
'    Err.Raise lng
'---- Error Log End   ----------------------------------------------------
    Erase vData
'    MsgBox "Error:fncGet_Code" & vbCrLf & Err.Description

End Function

'*************************************************************************
'関数名　　：名前定義設定
'
'引　　数　：無し
'
'戻り値　　：無し
'
'機能説明　：リストデータの名前定義を再設定する。
'
'更新履歴　：2008/06/20 SRA H.Anpo     新規作成
'
'*************************************************************************
Private Sub subNameDefine()
    
    Dim lngRowCnt                           As Long
    Dim lngListCol                          As Long
    Dim vListName(1)                        As Variant
    
    '1)契約区分
    vListName(1) = "契約区分リスト"
    
    With ThisWorkbook
     
        For lngListCol = 1 To UBound(vListName())
            
            For lngRowCnt = 2 To 65536
                If Trim(.Worksheets(SHEET_DATA).Cells(lngRowCnt, lngListCol).Value) = "" Then
                    lngRowCnt = lngRowCnt - 1
                    Exit For
                End If
            Next lngRowCnt
            
            '再定義
            .Names.Add Name:=vListName(lngListCol), _
             RefersToR1C1:="=data!R2C" & lngListCol & ":R" & IIf(lngRowCnt < 2, 2, lngRowCnt) & "C" & lngListCol
        Next lngListCol
    
    End With
    
    Erase vListName
    
End Sub


