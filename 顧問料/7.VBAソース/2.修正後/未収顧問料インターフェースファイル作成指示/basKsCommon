Attribute VB_Name = "basKsCommon"
'*************************************************************************
'
'プロジェクト名：契約管理システム・資産別時価登録
'
'オブジェクト名：basKsCommon
'
'機能概要　：チェック機能
'
'更新履歴　：2006/07/04 SRA H.Anpo      新規作成
'
'*************************************************************************
Private Const MODULE_NAME As String = "basKsCommon"

Option Explicit


'*************************************************************************
'関数名　　：メイン画面の初期化
'
'引　　数　：ARG1   I   iKind   long    0:全項目クリア
'　　　　　　                           1:組入資産情報クリア
'　　　　　　                           2:時価情報クリア
'戻り値　　：Long       エラー番号
'
'機能説明　：入力フィールドの初期化
'
'更新履歴　：2006/07/04 SRA H.Anpo    新規作成
'更新履歴　：2007/11/19 SRA Y.Azuma    変更     (PH4)
'更新履歴　：2009/03/10 SRA Y.Azuma    変更     未収顧問料IFの項目追加(セル完全修飾対応)
'
'*************************************************************************
Function fncKsCmnClearField(iKind As Long) As Long
    
On Error GoTo ErrorHandler

    fncKsCmnClearField = 0
    
    If iKind = 0 Then
        
        '全項目クリア
'------------<Modify Start azuma 2009/03/10 > 未収顧問料IFの項目追加(セル完全修飾対応)---------------
'        With Sheets(SHEET_MAIN)
        With ThisWorkbook.Sheets(SHEET_MAIN)
'------------<Modify End   azuma 2009/03/10 > 未収顧問料IFの項目追加(セル完全修飾対応)---------------
            .Range(RNG_KIJYUNBI).Value = vbNullString   '基準日
            
'------------<Modify Start azuma 2007/11/19 (PH4)> ★★★☆-----------------------
            .Range(RNG_KOHZA_NO).Value = vbNullString   '口座番号
'------------<Modify End   azuma 2007/11/19 (PH4)> ★★★☆-----------------------
            
'            .Range(RNG_FOLDER).Value = vbNullString     '保存フォルダ名
            .Range(RNG_FOLDER).Value = INITVAL_FOLDER     '保存フォルダ名

'            '表示ボタンを押せなくする
'            .cmdExec.Enabled = False
            'チェックボックスをチェック済みにする
            .chkKeisan.Value = True
'            .chkPrint.Value = True     '2007/12/26 Deleted By T.Ichikawa
        End With
    End If
    
    Exit Function

ErrorHandler:
    MsgBox Err.Description
    fncKsCmnClearField = Err.Number

End Function


''''''*************************************************************************
''''''関数名　　：トランザクション開始
''''''
''''''引　　数　：
''''''
''''''機能説明　：トランザクションを開始する。
''''''
''''''更新履歴　：2006/07/05 SRA H.Anpo    新規作成
''''''
''''''*************************************************************************
'''''Public Sub fncKsCmnBeginTrans()
'''''On Error GoTo 0 'ErrHandler
'''''
'''''    MainMenu.cnAdo.BeginTrans
'''''
'''''    Exit Sub
'''''ErrHandler:
'''''Dim lng As Long
'''''    lng = Err.Number
'''''    Call subErrProcess(MODULE_NAME, "", Err.Number, Err.Description)
'''''    On Error GoTo 0
'''''    Err.Raise lng
'''''End Sub

''''*************************************************************************
''''関数名　　：トランザクションコミット
''''
''''引　　数　：
''''
''''機能説明　：トランザクションをコミットする。
''''
''''更新履歴　：2006/07/05 SRA H.Anpo    新規作成
''''
''''*************************************************************************
'''Public Sub fncKsCmnCommitTrans()
'''On Error GoTo 0 'ErrHandler
'''
'''    MainMenu.cnAdo.CommitTrans
'''
'''    Exit Sub
'''ErrHandler:
'''Dim lng As Long
'''    lng = Err.Number
'''    Call subErrProcess(MODULE_NAME, "", Err.Number, Err.Description)
'''    On Error GoTo 0
'''    Err.Raise lng
'''End Sub

''''''*************************************************************************
''''''関数名　　：トランザクションロールバック
''''''
''''''引　　数　：
''''''
''''''機能説明　：トランザクションをロールバックする。
''''''
''''''更新履歴　：2006/07/05 SRA H.Anpo    新規作成
''''''
''''''*************************************************************************
'''''Public Sub fncKsCmnRollbackTrans()
'''''On Error GoTo 0 'ErrHandler
'''''
'''''    MainMenu.cnAdo.RollbackTrans
'''''
'''''    Exit Sub
'''''ErrHandler:
'''''Dim lng As Long
'''''    lng = Err.Number
'''''    Call subErrProcess(MODULE_NAME, "", Err.Number, Err.Description)
'''''    On Error GoTo 0
'''''    Err.Raise lng
'''''End Sub


'*************************************************************************
'関数名　　：
'
'引　　数　：
'           lngProcess     I         処理フラグ 0=抽出処理 1=追加処理 2=更新処理 3=削除処理
'           strSql         I         SQL文
'           vntRs()        O         取得したデータ(２次元)
'           lngCols        O         列数
'           lngRows        O         行数
'           strErrCode     I/O       エラーコード(入力時は、除外するエラーコードが入ってくる。)
'戻り値　　：Boolean
'
'機能説明　：引数で取得したSQL文を実行し、結果を返す。
'
'更新履歴　：2006/07/05 SRA H.Anpo    新規作成
'
'*************************************************************************
Public Function fncKsCmnDoExequteSql( _
                             lngProcess As Long, _
                             strSql As String, _
                             vntRs() As Variant, _
                             lngCols As Long, _
                             lngRows As Long, _
                             Optional strErrCode As String = "") As Boolean

'関数説明
' 1.SQL文の実行処理を行う。
' 2.処理フラグが、0の場合、抽出したデータ件数をlngRows引数に返す。
' 3.処理フラグが、0の場合、抽出したデータをstrSql引数に返す。
' 4.処理フラグが、1,2,3の場合、更新したデータ件数をlngRows引数に返す。
' 5.処理フラグが、1,2,3の場合、strSqlに""を返す。
' 6.処理が成功した場合はTrueを返し、終了する。
' 7.エラーが発生した場合はFalseを返し、終了する。


'On Error GoTo ErrSection

    Dim blnRet As Boolean

    fncKsCmnDoExequteSql = gclsDB.DoExequteSql(lngProcess, strSql, vntRs, lngCols, lngRows, strErrCode)


Exit Function

'*******************************************************
'* エラーセクション                                　  *
'*******************************************************
ErrSection:

End Function


''''''*************************************************************************
''''''関数名　　：DBシステム日付取得
''''''
''''''引　　数　：ARG1   O   DbSysdate   String (YYYYMMDD)
''''''
''''''戻り値　　：エラー番号
''''''
''''''機能説明　：DBのシステム日付(SYSDATE)を取得する
''''''
''''''更新履歴　：2006/07/05 SRA H.Anpo      新規作成
''''''
''''''*************************************************************************
'''''Function fncGetDbSysdate(DbSysdate As String) As Long
'''''
'''''    Const PROCEDURE_NAME As String = "fncGetDbSysdate"
'''''
'''''    Dim strDay As String
'''''
'''''On Error GoTo ErrHandler
'''''
'''''    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
'''''
'''''    '共通関数よりDBシステム日付取得
'''''    gfunc_GetSvDateTime DbSysdate, strDay
'''''
'''''    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
'''''
'''''    Exit Function
'''''ErrHandler:
'''''    fncGetDbSysdate = Err.Number
'''''    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
'''''End Function




''''''*************************************************************************
''''''関数名　　：ストアドプロシジャー呼出(ADOコマンド使用)
''''''
''''''引　　数　：なし
''''''
''''''戻り値　　：エラー番号
''''''
''''''機能説明　：ストアドプロシジャー呼出テストファンクション
''''''
''''''更新履歴　：2006/07/05 SRA H.Anpo      新規作成
''''''
''''''*************************************************************************
'''''Public Function fncKsCmnSp1Call()
'''''    Dim objCmd As ADODB.Command
'''''    Dim objPrm As ADODB.Parameter
'''''
'''''    Dim strSql    As String
'''''    Dim lcount As Long
'''''
'''''    Set objCmd = New ADODB.Command
'''''
'''''    'コマンドの準備
'''''    objCmd.ActiveConnection = MainMenu.cnAdo
'''''    objCmd.CommandType = adCmdStoredProc
'''''    objCmd.CommandText = "GPA01.SF_YYYYMMDD" 'SP名
'''''
'''''    'パラメーターの準備
'''''    '戻り値
'''''    Set objPrm = objCmd.CreateParameter("pRet", adChar, adParamReturnValue, 10)
'''''    objCmd.Parameters.Append objPrm
'''''    '年月日
''''''    Set objPrm = objCmd.CreateParameter("pYYYYMMDD", adChar, adParamInput, 8)
'''''    Set objPrm = objCmd.CreateParameter("pYYYYMMDD", adChar, adParamInput, 8, "20060801")
'''''    objCmd.Parameters.Append objPrm
'''''
'''''    'パラメータの設定
''''''    objCmd.Parameters("pYYYYMMDD").Value = "20060801"
'''''
'''''    '実行
'''''    objCmd.Execute lcount    'lcountにはUPDATEされた行数が戻る｡
'''''
'''''MsgBox objCmd.Parameters("pRet").Value
'''''
'''''    '破棄
'''''    Set objCmd = Nothing
'''''
'''''End Function

''''''*************************************************************************
''''''関数名　　：ストアドプロシジャー呼出(ADOコマンドバインド変数使用)
''''''
''''''引　　数　：なし
''''''
''''''戻り値　　：エラー番号
''''''
''''''機能説明　：ストアドプロシジャー呼出テストファンクション
''''''
''''''更新履歴　：2006/07/05 SRA H.Anpo      新規作成
''''''
''''''*************************************************************************
'''''Public Function fncKsCmnSp2Call()
'''''    Dim objCmd As ADODB.Command
'''''    Dim objPrm As ADODB.Parameter
'''''
'''''    Dim strSql    As String
'''''    Dim lcount As Long
'''''    Dim vntArray() As Integer
'''''
'''''    Set objCmd = New ADODB.Command
'''''    ReDim vntArray(10)
'''''
'''''    'コマンドの準備
'''''    objCmd.ActiveConnection = MainMenu.cnAdo
'''''    objCmd.CommandType = adCmdText
'''''    strSql = "BEGIN ? := GPA01.ANP_TEST.ANP_TEST1(?, ?); END;"
'''''    objCmd.CommandText = strSql
'''''
'''''    'パラメーターの準備
'''''    '戻り値
'''''    Set objPrm = objCmd.CreateParameter("pRet", adInteger, adParamOutput, 10)
'''''    objCmd.Parameters.Append objPrm
'''''    '件数
''''''    Set objPrm = objCmd.CreateParameter("pYYYYMMDD", adChar, adParamInput, 8)
'''''    Set objPrm = objCmd.CreateParameter("pCnt", adInteger, adParamInput, , 10)
'''''    objCmd.Parameters.Append objPrm
'''''    '件数
''''''    Set objPrm = objCmd.CreateParameter("pYYYYMMDD", adChar, adParamInput, 8)
'''''    Set objPrm = objCmd.CreateParameter("pTable", adInteger, adParamOutput, , vntArray())
'''''    objCmd.Parameters.Append objPrm
'''''
'''''    'パラメータの設定
''''''    objCmd.Parameters("pYYYYMMDD").Value = "20060801"
'''''
'''''    '実行
'''''    objCmd.Execute lcount    'lcountにはUPDATEされた行数が戻る｡
'''''
'''''MsgBox objCmd.Parameters("pRet").Value
'''''
'''''    '破棄
'''''    Set objCmd = Nothing
'''''
'''''End Function



'*************************************************************************
'関数名　　：メッセージ表示
'
'引　　数　：ARG1   I   strMsgKbn   String  メッセージ区分(1:情報,2:質問,3:警告,4:エラー)
'　　　　　：ARG2   I   lngMsgId    long    メッセージＩＤ
'　　　　　：ARG3   I   strAddText  String  追加テキスト(項目名)
'　　　　　：ARG4   I   strAddText2 String  追加テキスト
'　　　　　：ARG5   I   blnPopUp    boolean メッセージボックス出力フラグ(デフォルト：True(表示))
'
'戻り値　　：エラー番号
'
'機能説明　：メッセージを出力する
'
'更新履歴　：2006/07/05 SRA H.Anpo      新規作成
'
'*************************************************************************
Function fncKsCmnMessageDisp( _
              ByVal strMsgKbn As String _
            , ByVal lngMsgId As Long _
            , ByVal strAddText As String _
            , Optional ByVal strAddText2 As String _
            , Optional ByVal blnPopUp As Boolean = True) As String

    '共通関数をCALL
    fncKsCmnMessageDisp = gfunc_ErrorMsg( _
                            strMsgKbn, _
                            lngMsgId, _
                            strAddText, _
                            strAddText2, _
                            blnPopUp)


End Function


'*************************************************************************
'関数名　　：配列の階層変更
'
'引　　数　：ARG1   I   vntSrcAry   Variant 修正元配列
'　　　　　：ARG2   O   vntDstAry   Variant 修正後配列
'
'戻り値　　：エラー番号
'
'機能説明　：Array(X,Y) -> Array(Y,X)に変更する
'
'更新履歴　：2006/07/05 SRA H.Anpo      新規作成
'
'*************************************************************************
Public Function fncKsCmnArrayIdxChange( _
            ByVal vntSrcAry As Variant, _
            ByRef vntDstAry As Variant)

    Const PROCEDURE_NAME As String = "fncKsCmnArrayIdxChange"
    
On Error GoTo ErrorHandler

    Dim lngCnt1      As Long
    Dim lngCnt2      As Long

    fncKsCmnArrayIdxChange = 0

    ReDim vntDstAry(UBound(vntSrcAry, 2), UBound(vntSrcAry, 1))
    For lngCnt1 = 0 To UBound(vntSrcAry, 1)
        For lngCnt2 = 0 To UBound(vntSrcAry, 2)
            vntDstAry(lngCnt2, lngCnt1) = vntSrcAry(lngCnt1, lngCnt2)
        Next
    Next
    
    Exit Function

ErrorHandler:
    fncKsCmnArrayIdxChange = Err.Number
'    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)

End Function




'*************************************************************************
'関数名　　：エラーログ情報取得
'
'引　　数　：ARG1   I   lngTranId   long    トランザクションＩＤ
'　　　　　：ARG2   O   vntRec      Variant データ配列
'　　　　　：ARG3   O   lngRow      long    取得行数
'　　　　　：ARG4   O   lngCol      long    取得列数
'
'戻り値　　：エラー番号
'
'機能説明　：エラーログ情報を取得する
'
'更新履歴　：2006/07/05 SRA H.Anpo      新規作成
'
'*************************************************************************
Public Function fncReadErrorLog( _
            ByVal lngTranId As Long, _
            ByRef vntRec() As Variant, _
            ByRef lngRow As Long, _
            ByRef lngCol As Long _
            ) As Long

    Const PROCEDURE_NAME As String = "fncReadErrorLog"

    On Error GoTo ErrHandler
    
    Dim RS As New ADODB.Recordset       'レコードセット
    
    Dim strSql      As String
    Dim lngRet      As Long
    Dim vntRecWk()  As Variant
    
    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)
    
    fncReadErrorLog = 0
    
    strSql = ""
    strSql = strSql & " SELECT"
    strSql = strSql & "     *"
    strSql = strSql & " FROM"
    strSql = strSql & "     KYK_LOG"   'ログテーブル
    strSql = strSql & " WHERE"
    strSql = strSql & "     TRANSACTION_ID  = " & lngTranId
    strSql = strSql & " AND LOG_KBN         = '1'"
    strSql = strSql & " AND SAKUJO_FLG      = '0'"
    
    RS.Open strSql, MainMenu.cnAdo, adOpenKeyset, adLockOptimistic, adCmdText
    vntRecWk = RS.GetRows
    
    lngCol = RS.Fields.Count
    lngRow = RS.RecordCount
    RS.Close
    Set RS = Nothing
    
    If lngRow > 0 Then
        lngRet = fncKsCmnArrayIdxChange(vntRecWk, vntRec)
        If lngRet <> 0 Then
            Err.Raise lngRet
        End If
    End If
    
    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    
    Exit Function
ErrHandler:
    Set RS = Nothing
    fncReadErrorLog = Err.Number

End Function




'*************************************************************************
'関数名　　：エラーシート作成(ストアドJAVAのエラーログ情報)
'
'引　　数　：ARG1   I   TranId      String  トランザクションＩＤ
'　　　　　：ARG2   I   MainSheetNm String  MAINシート名称
'　　　　　：ARG3   I   ErrSheetNm  String  ERRORシート名称
'
'戻り値　　：Long       エラー番号
'
'機能説明　：ストアドJAVAのエラーログ情報のエラーシートを作成する
'           MAINシートの後ろにERRORシートを追加する
'
'更新履歴　：2006/09/26 SRA H.Anpo    新規作成
'更新履歴　：2006/10/27 SRA Y.Azuma   変更     JAVAエラーログ取得失敗対応(連No.25)
'更新履歴　：2009/03/10 SRA Y.Azuma   変更     未収顧問料IFの項目追加(セル完全修飾対応)
'
'*************************************************************************
Public Function fncMakeErrorSheet( _
            ByVal TranId As String, _
            ByVal MainSheetNm As String, _
            ByVal ErrSheetNm As String _
            ) As Long
       
    Const PROCEDURE_NAME As String = "fncMakeErrorSheet"

On Error GoTo ErrorHandler

    Dim lngRet      As Long
    Dim vntRec()    As Variant
    Dim lngRow      As Long
    Dim lngCol      As Long
    
'------------<Modify Start azuma 2006/10/27 連No.25> -----------------------
    Dim lngRowCnt   As Long
    Dim lngColCnt   As Long
'------------<Modify End   azuma 2006/10/27 連No.25> -----------------------

    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)

    fncMakeErrorSheet = 0

    'エラーシート追加
On Error Resume Next
    With ThisWorkbook
        .Sheets(ErrSheetNm).Activate
        If Err.Number <> 0 Then
            
'------------<Modify Start azuma 2009/03/10 > 未収顧問料IFの項目追加(セル完全修飾対応)---------------
            .Sheets.Add After:=.Sheets(MainSheetNm)
            
            .Sheets(MainSheetNm).Next.Name = ErrSheetNm
'            .Sheets.Add After:=Sheets(MainSheetNm)
            
'            ActiveSheet.Name = ErrSheetNm
'------------<Modify End   azuma 2009/03/10 > 未収顧問料IFの項目追加(セル完全修飾対応)---------------
        Else
            .Sheets(ErrSheetNm).Clear
        End If
    End With
On Error GoTo ErrorHandler

    'エラーデータ取得
    lngRet = fncReadErrorLog(TranId, vntRec, lngRow, lngCol)
    If lngRet <> 0 Then
        Err.Raise lngRet
    End If

    'エラーシートに貼り付け
    'シートにデータをセット
    With ThisWorkbook.Sheets(ErrSheetNm)
'------------<Modify Start azuma 2006/10/27 連No.25> -----------------------
        '.Range(Cells(1, 1), Cells(lngRow, lngCol)) = vntRec
        For lngRowCnt = 0 To lngRow - 1
            For lngColCnt = 0 To lngCol - 1
                .Cells(lngRowCnt + 1, lngColCnt + 1).Value = vntRec(lngRowCnt, lngColCnt)
            Next lngColCnt
        Next lngRowCnt
'------------<Modify End   azuma 2006/10/27 連No.25> -----------------------
        
    End With

    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    
    Exit Function

ErrorHandler:
    fncMakeErrorSheet = Err.Number
End Function


'*************************************************************************
'関数名　　：未収顧問料計算処理実行(ストアドJAVA)
'
'引　　数　：ARG1   I   BookName    String  ワークブック名
'　　　　　：ARG2   I   KijyunYm    Long    データ配列
'　　　　　：ARG3   I   KohzaNo     String  口座番号
'戻り値　　：Long       エラー番号
'
'機能説明　：未収顧問料計算処理プロシジャー(ストアドJAVA)をCALLする。
'         ：エラー発生時はエラーシートを作成する。
'
'更新履歴　：2006/08/22 SRA H.Anpo    新規作成
'更新履歴　：2007/11/19 SRA Y.Azuma   変更     (PH4)口座番号追加
'更新履歴　：2009/03/10 SRA Y.Azuma   変更     未収顧問料IFの項目追加(セル完全修飾対応)
'
'*************************************************************************
Public Function fncExecMishuKomon( _
            ByVal KijyunYm As Long _
          , Optional KohzaNo As String = "") As Long
       
    Const PROCEDURE_NAME As String = "fncExecMishuKomon"

On Error GoTo ErrorHandler

    Dim TranId      As String
    Dim lngErrCd    As Long
    Dim strErrMsg   As String
    Dim lngRet      As Long

    'プロシジャーCALL用
    Dim objCmd As ADODB.Command
    Dim objPrm As ADODB.Parameter

    Call subBeginProcess(MODULE_NAME, PROCEDURE_NAME)

    fncExecMishuKomon = 0

    '時価取得プロシジャー(ストアドJAVA)をCALL
    Set objCmd = New ADODB.Command
    
    With objCmd
    
        'コマンドの準備
        .ActiveConnection = MainMenu.cnAdo
        .CommandType = adCmdStoredProc
        .CommandText = PROC_NAME_KEISAN 'SP名
        .CommandTimeout = 0
        
        'パラメータの設定
        
        '年月
        Set objPrm = .CreateParameter("pn_nengetsu", adInteger, adParamInput, , KijyunYm)
        .Parameters.Append objPrm
'------------<Modify Start azuma 2007/11/19 (PH4)> ★★★☆-----------------------
        '口座番号
        Set objPrm = .CreateParameter("ps_kohza", adVarChar, adParamInput, 7, KohzaNo)
        .Parameters.Append objPrm
'------------<Modify End   azuma 2007/11/19 (PH4)> ★★★☆-----------------------
        
        'TransactionID
        Set objPrm = .CreateParameter("ps_tranId", adVarChar, adParamOutput, 38, TranId)
        .Parameters.Append objPrm
        'エラーステータス
        Set objPrm = .CreateParameter("pn_err_status", adInteger, adParamOutput)
        .Parameters.Append objPrm
        'エラーメッセージ
        Set objPrm = .CreateParameter("ps_err_message", adVarChar, adParamOutput, 4096)
        .Parameters.Append objPrm
        
        '実行
        .Execute
        
        If .Parameters("pn_err_status").Value <> 0 Then
            '7007 JAVAプロシジャーでエラーが発生しました。
            fncKsCmnMessageDisp MSGLVL_WARNNING, 7007, MSG1_KEISAN, IIf(IsNull(.Parameters("ps_err_message").Value), "", .Parameters("ps_err_message").Value), True
            TranId = .Parameters("ps_tranId").Value
            fncExecMishuKomon = .Parameters("pn_err_status").Value
            
            Call gCom01_BookProtect(ThisWorkbook, False)    '<------------ Modify azuma 2006/10/27
            'ログをエラーシートに貼り付け
            lngRet = fncMakeErrorSheet(.Parameters("ps_tranId").Value, SHEET_MAIN, SHEET_ERROR)
            Call gCom01_BookProtect(ThisWorkbook, True)     '<------------ Modify azuma 2006/10/27

        Else
            Call gCom01_BookProtect(ThisWorkbook, False)    '<------------ Modify azuma 2006/10/27
            Application.DisplayAlerts = False
            'ERRORシートを削除
            On Error Resume Next
'------------<Modify Start azuma 2009/03/10 > 未収顧問料IFの項目追加(セル完全修飾対応)---------------
'            Sheets(SHEET_ERROR).Delete
            ThisWorkbook.Sheets(SHEET_ERROR).Delete
'------------<Modify End   azuma 2009/03/10 > 未収顧問料IFの項目追加(セル完全修飾対応)---------------
            Call gCom01_BookProtect(ThisWorkbook, True)     '<------------ Modify azuma 2006/10/27
            On Error GoTo ErrorHandler
            Application.DisplayAlerts = True
        End If
    
    End With
    
    '破棄
    Set objCmd = Nothing

    Call subEndProcess(MODULE_NAME, PROCEDURE_NAME)
    
    Exit Function

ErrorHandler:
    fncExecMishuKomon = Err.Number
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)
    
End Function

'*************************************************************************
'関数名　　：合算口座の存在チェック処理
'
'引　　数　：
'            strKohzaNo   I       口座番号
'
'戻り値　　：Long
'
'機能説明　：口座番号の存在チェック
'
'更新履歴　：2007/12/20 SRA T.Ichikawa    新規作成
'
'*************************************************************************
Public Function fncGassanKohzaExist(ByVal strKohzaNo As String) As Long
    
    Dim strSql      As String
    Dim vntRec()    As Variant
    Dim lngCols     As Long
    Dim lngRows     As Long
    Dim lngCnt      As Long
    Dim blnRet      As Boolean
    Dim strErrCd    As String
    
    Const PROCEDURE_NAME As String = "fncGassanKohzaExist"
    
    fncGassanKohzaExist = 0
    
    strSql = ""
    strSql = strSql & "SELECT" & vbCrLf
    strSql = strSql & "    GASSAN_OYA_KOHZA_NO" & vbCrLf
    strSql = strSql & "FROM" & vbCrLf
    strSql = strSql & "    KYK_GASSAN_KOHZA" & vbCrLf
    strSql = strSql & "WHERE" & vbCrLf
    strSql = strSql & "    GASSAN_OYA_KOHZA_NO = '" & strKohzaNo & "'" & vbCrLf
    strSql = strSql & "AND SAKUJO_FLG = '0'" & vbCrLf
    
    blnRet = fncKsCmnDoExequteSql(MainMenu.gcSELECT, strSql, vntRec, lngCols, lngRows, strErrCd)
    
    If blnRet = False Then
        fncGassanKohzaExist = strErrCd
        Exit Function
    End If
    
    '口座が存在しない場合
    If lngRows <= 0 Then
        fncGassanKohzaExist = -1
    End If
    
    Erase vntRec
    
    Exit Function

ErrHandler:
    Erase vntRec

    fncGassanKohzaExist = Err.Number
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)

End Function

'*************************************************************************
'関数名　　：前受け管理テーブルチェック処理
'
'引　　数　：
'            strKohzaNo   I       口座番号
'            strKijyunBi  I       基準日
'　　　　　  lngRows      O       取得データ数
'
'戻り値　　：Long
'
'機能説明　：前受け管理テーブルに口座が存在するかチェック
'
'更新履歴　：2007/12/25 SRA T.Ichikawa    新規作成
'
'*************************************************************************
Public Function fncMaeukeCheck(ByVal strKohzaNo As String, ByVal strKijyunBi As String, ByRef lngRows As Long) As Long

    Dim strSql      As String
    Dim vntRec()    As Variant
    Dim lngCols     As Long
    Dim lngCnt      As Long
    Dim blnRet      As Boolean
    Dim strErrCd    As String

    Const PROCEDURE_NAME As String = "fncMaeukeCheck"

    fncMaeukeCheck = 0

    strSql = ""
    strSql = strSql & "SELECT" & vbCrLf
    strSql = strSql & "    KMK.KOHZA_NO" & vbCrLf
    strSql = strSql & "FROM" & vbCrLf
    strSql = strSql & "    KYK_MAEUKE_KANRI    KMK" & vbCrLf
    '合算口座の場合
    If Left(Trim(strKohzaNo), 1) = "G" Then
        strSql = strSql & "   ,KYK_GASSAN_KOHZA    KGK" & vbCrLf
    End If
    strSql = strSql & "WHERE" & vbCrLf
    strSql = strSql & "    KMK.KEISAN_TO_YMD = " & strKijyunBi & vbCrLf
    
    If Trim(strKohzaNo) <> "" Then
        '合算口座の場合
        If Left(Trim(strKohzaNo), 1) = "G" Then
            strSql = strSql & "AND KGK.GASSAN_OYA_KOHZA_NO = '" & strKohzaNo & "'" & vbCrLf
            strSql = strSql & "AND KMK.KOHZA_NO   = KGK.GASSAN_KO_KOHZA_NO" & vbCrLf
            strSql = strSql & "AND KGK.SAKUJO_FLG = '0'" & vbCrLf
        Else
            strSql = strSql & "AND KMK.KOHZA_NO = '" & strKohzaNo & "'" & vbCrLf
        End If
    End If
    
    strSql = strSql & "AND KMK.SAKUJO_FLG = '0'" & vbCrLf

    blnRet = fncKsCmnDoExequteSql(MainMenu.gcSELECT, strSql, vntRec, lngCols, lngRows, strErrCd)

    If blnRet = False Then
        fncMaeukeCheck = -1
        Exit Function
    End If

    Erase vntRec

    Exit Function

ErrHandler:
    Erase vntRec

    fncMaeukeCheck = Err.Number
    Call subErrProcess(MODULE_NAME, PROCEDURE_NAME, Err.Number, Err.Description)

End Function
